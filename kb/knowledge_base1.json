[
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "anomalies",
        "question": "What is anomalies?",
        "answer": "• \n• \n• \n\nAnomalies in the relational model refer to inconsistencies or errors that can arise when working with relational databases, specifically in the context of data insertion, deletion, and modification. There are different types of anomalies that can occur in referencing and referenced relations which can be discussed as:\n\nThese anomalies can be categorized into three types:\n\n• Insertion Anomalies\n• Deletion Anomalies\n• Update Anomalies. ### How Are Anomalies Caused in DBMS? Anomalies in DBMS are caused by poor management of storing everything in the flat database, lack of normalization, data redundancy, and improper use of primary or foreign keys. The three primary types of anomalies are:\n\n• Insertion Anomalies:These anomalies occur when it is not possible to insert data into a database because the required fields are missing or because the data is incomplete."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nAnomalies in the relational model refer to inconsistencies or errors that can arise when working with relational databases, specifically in the context of data insertion, deletion, and modification. Anomalies in DBMS are caused by poor management of storing everything in the flat database, lack of normalization, data redundancy, and improper use of primary or foreign keys. These issues result in inconsistencies during insert, update, or delete operations, leading to data integrity problems. The three primary types of anomalies are:\n\n• Insertion Anomalies:These anomalies occur when it is not possible to insert data into a database because the required fields are missing or because the data is incomplete. For example, if a database requires that every record has aprimary key, but no value is provided for a particular record, it cannot be inserted into thedatabase."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nAnomalies in the relational model refer to inconsistencies or errors that can arise when working with relational databases, specifically in the context of data insertion, deletion, and modification. Anomalies in DBMS are caused by poor management of storing everything in the flat database, lack of normalization, data redundancy, and improper use of primary or foreign keys. The three primary types of anomalies are:\n\n• Insertion Anomalies:These anomalies occur when it is not possible to insert data into a database because the required fields are missing or because the data is incomplete. For example, if a database requires that every record has aprimary key, but no value is provided for a particular record, it cannot be inserted into thedatabase. • Deletion anomalies:These anomalies occur when deleting a record from a database and can result in the unintentional loss of data."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "update",
        "question": "What is update?",
        "answer": "There are different types of anomalies that can occur in referencing and referenced relations which can be discussed as:\n\nThese anomalies can be categorized into three types:\n\n• Insertion Anomalies\n• Deletion Anomalies\n• Update Anomalies. These issues result in inconsistencies during insert, update, or delete operations, leading to data integrity problems. • Update anomalies:These anomalies occur when modifying data in a database and can result in inconsistencies or errors. Deletion and Updation Anomaly:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will not allow deleting the tuple from referenced relation. Example:If we want to update a record from STUDENT_COURSE with STUD_NO =1, We have to update it in both rows of the table."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "• \n• \n• \n\nAnomalies in the relational model refer to inconsistencies or errors that can arise when working with relational databases, specifically in the context of data insertion, deletion, and modification. There are different types of anomalies that can occur in referencing and referenced relations which can be discussed as:\n\nThese anomalies can be categorized into three types:\n\n• Insertion Anomalies\n• Deletion Anomalies\n• Update Anomalies. STUDENT Table\n\nTable 1\n\nSTUDENT_COURSE\n\nTable 2\n\nInsertion Anomaly:If a tuple is inserted in referencing relation and referencing attribute value is not present in referenced attribute, it will not allow insertion in referencing relation. Deletion and Updation Anomaly:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will not allow deleting the tuple from referenced relation. To avoid this, the following can be used in query:\n\n• ON DELETE/UPDATE SET NULL:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will delete/update the tuple from referenced relation and set the value of referencing attribute to NULL."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "referencing",
        "question": "What is referencing?",
        "answer": "There are different types of anomalies that can occur in referencing and referenced relations which can be discussed as:\n\nThese anomalies can be categorized into three types:\n\n• Insertion Anomalies\n• Deletion Anomalies\n• Update Anomalies. STUDENT Table\n\nTable 1\n\nSTUDENT_COURSE\n\nTable 2\n\nInsertion Anomaly:If a tuple is inserted in referencing relation and referencing attribute value is not present in referenced attribute, it will not allow insertion in referencing relation. Deletion and Updation Anomaly:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will not allow deleting the tuple from referenced relation. If we try to delete a record from the STUDENT table withSTUD_NO = 1, it will not be allowed because there are corresponding records in the STUDENT_COURSE table referencingSTUD_NO = 1. To avoid this, the following can be used in query:\n\n• ON DELETE/UPDATE SET NULL:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will delete/update the tuple from referenced relation and set the value of referencing attribute to NULL."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "normalization",
        "question": "What is normalization?",
        "answer": "Anomalies in DBMS are caused by poor management of storing everything in the flat database, lack of normalization, data redundancy, and improper use of primary or foreign keys. These anomalies can be removed with the process ofNormalization, which generally splits the database which results in reducing the anomalies in the database. ### Removal of Anomalies\nAnomalies in DBMS can be removed by applying normalization. Normalization involves organizing data into tables and applying rules to ensure data is stored in a consistent and efficient manner. By reducing data redundancy and ensuring data integrity, normalization helps to eliminate anomalies and improve the overall quality of the database\n\nAccording toE.F.Codd, who is the inventor of theRelational Database, the goals of Normalization include:\n\n• It helps in vacating all the repeated data from the database."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "referenced",
        "question": "What is referenced?",
        "answer": "There are different types of anomalies that can occur in referencing and referenced relations which can be discussed as:\n\nThese anomalies can be categorized into three types:\n\n• Insertion Anomalies\n• Deletion Anomalies\n• Update Anomalies. STUDENT Table\n\nTable 1\n\nSTUDENT_COURSE\n\nTable 2\n\nInsertion Anomaly:If a tuple is inserted in referencing relation and referencing attribute value is not present in referenced attribute, it will not allow insertion in referencing relation. Deletion and Updation Anomaly:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will not allow deleting the tuple from referenced relation. To avoid this, the following can be used in query:\n\n• ON DELETE/UPDATE SET NULL:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will delete/update the tuple from referenced relation and set the value of referencing attribute to NULL. • ON DELETE/UPDATE CASCADE:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will delete/update the tuple from referenced relation and referencing relation as well."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "record",
        "question": "What is record?",
        "answer": "For example, if a database requires that every record has aprimary key, but no value is provided for a particular record, it cannot be inserted into thedatabase. • Deletion anomalies:These anomalies occur when deleting a record from a database and can result in the unintentional loss of data. For example, if a database contains information about customers and orders, deleting a customer record may also delete all the orders associated with that customer. For example, if a database contains information about employees and their salaries, updating an employee’s salary in one record but not in all related records could lead to incorrect calculations and reporting. Example:If we try to insert a record into the STUDENT_COURSE table withSTUD_NO = 7, it will not be allowed because there is no correspondingSTUD_NO = 7in the STUDENT table."
    },
    {
        "topic": "anomalies-in-relational-model",
        "subtopic": "attribute",
        "question": "What is attribute?",
        "answer": "STUDENT Table\n\nTable 1\n\nSTUDENT_COURSE\n\nTable 2\n\nInsertion Anomaly:If a tuple is inserted in referencing relation and referencing attribute value is not present in referenced attribute, it will not allow insertion in referencing relation. Deletion and Updation Anomaly:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will not allow deleting the tuple from referenced relation. To avoid this, the following can be used in query:\n\n• ON DELETE/UPDATE SET NULL:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will delete/update the tuple from referenced relation and set the value of referencing attribute to NULL. • ON DELETE/UPDATE CASCADE:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will delete/update the tuple from referenced relation and referencing relation as well. • Second Normal Form (2NF): Eliminates partial dependencies by ensuring all non-key attributes are fully dependent on the primary key."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "dependencies",
        "question": "What is dependencies?",
        "answer": "• \n• \n• \n\nPrerequisite –Functional Dependencies\n\nThis article contains Armstrong’s Axioms and how Armstrong’s Axioms are used to decide about the functional dependency on the database. ### Armstrong Axioms\nThe term Armstrong Axioms refers to the sound and complete set of inference rules or axioms, introduced by William W. Armstrong, that is used to test the logical implication offunctional dependencies. If F is a set of functional dependencies then the closure of F, denoted as F+, is the set of all functional dependencies logically implied by F. Armstrong’s Axioms are a set of rules, that when applied repeatedly, generates a closure of functional dependencies. That is adding attributes to dependencies, does not change the basic dependencies. ### Armstrong Relation\nArmstrong Relation can be stated as a relation that is able to satisfy all functional dependencies in the F+Closure."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "armstrong",
        "question": "What is armstrong?",
        "answer": "• \n• \n• \n\nPrerequisite –Functional Dependencies\n\nThis article contains Armstrong’s Axioms and how Armstrong’s Axioms are used to decide about the functional dependency on the database. We will be also learning about the Secondary Rules and Armstrong Relations. ### Armstrong Axioms\nThe term Armstrong Axioms refers to the sound and complete set of inference rules or axioms, introduced by William W. Armstrong, that is used to test the logical implication offunctional dependencies. If F is a set of functional dependencies then the closure of F, denoted as F+, is the set of all functional dependencies logically implied by F. Armstrong’s Axioms are a set of rules, that when applied repeatedly, generates a closure of functional dependencies. ### Armstrong Relation\nArmstrong Relation can be stated as a relation that is able to satisfy all functional dependencies in the F+Closure."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "functional",
        "question": "What is functional?",
        "answer": "• \n• \n• \n\nPrerequisite –Functional Dependencies\n\nThis article contains Armstrong’s Axioms and how Armstrong’s Axioms are used to decide about the functional dependency on the database. Before moving ahead, you must have a knowledge of Functional Dependency. ### Armstrong Axioms\nThe term Armstrong Axioms refers to the sound and complete set of inference rules or axioms, introduced by William W. Armstrong, that is used to test the logical implication offunctional dependencies. If F is a set of functional dependencies then the closure of F, denoted as F+, is the set of all functional dependencies logically implied by F. Armstrong’s Axioms are a set of rules, that when applied repeatedly, generates a closure of functional dependencies. IfA→B, thenAC→BCfor any C.\n• Axiom of Transitivity:Same as the transitive rule in algebra, ifA→Bholds andB→Cholds, thenA→Calso holds.A→Bis called A functionally which determines B. IfX→YandY→Z, thenX→Z."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "axioms",
        "question": "What is axioms?",
        "answer": "• \n• \n• \n\nPrerequisite –Functional Dependencies\n\nThis article contains Armstrong’s Axioms and how Armstrong’s Axioms are used to decide about the functional dependency on the database. ### Armstrong Axioms\nThe term Armstrong Axioms refers to the sound and complete set of inference rules or axioms, introduced by William W. Armstrong, that is used to test the logical implication offunctional dependencies. If F is a set of functional dependencies then the closure of F, denoted as F+, is the set of all functional dependencies logically implied by F. Armstrong’s Axioms are a set of rules, that when applied repeatedly, generates a closure of functional dependencies. ### Axioms\n• Axiom of Reflexivity:If A is a set of attributes and B is a subset of A, then A holds B. ### Secondary Rules\nThese rules can be derived from the above axioms."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "### Armstrong Axioms\nThe term Armstrong Axioms refers to the sound and complete set of inference rules or axioms, introduced by William W. Armstrong, that is used to test the logical implication offunctional dependencies. If F is a set of functional dependencies then the closure of F, denoted as F+, is the set of all functional dependencies logically implied by F. Armstrong’s Axioms are a set of rules, that when applied repeatedly, generates a closure of functional dependencies. ### Axioms\n• Axiom of Reflexivity:If A is a set of attributes and B is a subset of A, then A holds B. • Axiom of Augmentation:IfA→Bholds and Y is the attribute set, thenAY→BYalso holds. In the given set of dependencies, the size of the minimum Armstrong Relation is an exponential function of the number of attributes present in the dependency under consideration."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "rules",
        "question": "What is rules?",
        "answer": "We will be also learning about the Secondary Rules and Armstrong Relations. ### Armstrong Axioms\nThe term Armstrong Axioms refers to the sound and complete set of inference rules or axioms, introduced by William W. Armstrong, that is used to test the logical implication offunctional dependencies. If F is a set of functional dependencies then the closure of F, denoted as F+, is the set of all functional dependencies logically implied by F. Armstrong’s Axioms are a set of rules, that when applied repeatedly, generates a closure of functional dependencies. ### Secondary Rules\nThese rules can be derived from the above axioms. By sound, we mean that given a set of functional dependencies F specified on a relation schema R, any dependency that we can infer from F by using the primary rules of Armstrong axioms holds in every relation state r of R that satisfies the dependencies in F.By complete, we mean that using primary rules of Armstrong axioms repeatedly to infer dependencies until no more dependencies can be inferred results in the complete set of all possible dependencies that can be inferred from F.\n\n\n### Advantages of Using Armstrong’s Axioms in Functional Dependency\n• They provide a systematic and efficient method for inferring additional functional dependencies from a given set of functional dependencies, which can help to optimizedatabase design."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "ifa",
        "question": "What is ifa?",
        "answer": "• Axiom of Augmentation:IfA→Bholds and Y is the attribute set, thenAY→BYalso holds. IfA→B, thenAC→BCfor any C.\n• Axiom of Transitivity:Same as the transitive rule in algebra, ifA→Bholds andB→Cholds, thenA→Calso holds.A→Bis called A functionally which determines B. IfX→YandY→Z, thenX→Z. • Union:IfA→Bholds andA→Cholds, thenA→BCholds. • Composition:IfA→BandX→Yhold, thenAX→BYholds. • Decomposition:IfA→BCholds thenA→BandA→Chold."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "We will be also learning about the Secondary Rules and Armstrong Relations. ### Armstrong Relation\nArmstrong Relation can be stated as a relation that is able to satisfy all functional dependencies in the F+Closure. In the given set of dependencies, the size of the minimum Armstrong Relation is an exponential function of the number of attributes present in the dependency under consideration. By sound, we mean that given a set of functional dependencies F specified on a relation schema R, any dependency that we can infer from F by using the primary rules of Armstrong axioms holds in every relation state r of R that satisfies the dependencies in F.By complete, we mean that using primary rules of Armstrong axioms repeatedly to infer dependencies until no more dependencies can be inferred results in the complete set of all possible dependencies that can be inferred from F.\n\n\n### Advantages of Using Armstrong’s Axioms in Functional Dependency\n• They provide a systematic and efficient method for inferring additional functional dependencies from a given set of functional dependencies, which can help to optimizedatabase design. ### Disadvantages of Using Armstrong’s Axioms in Functional Dependency\n• The process of using Armstrong’s axioms to infer additional functional dependencies can be computationally expensive, especially for large databases with many tables and relationships."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "dependency",
        "question": "What is dependency?",
        "answer": "• \n• \n• \n\nPrerequisite –Functional Dependencies\n\nThis article contains Armstrong’s Axioms and how Armstrong’s Axioms are used to decide about the functional dependency on the database. Before moving ahead, you must have a knowledge of Functional Dependency. In the given set of dependencies, the size of the minimum Armstrong Relation is an exponential function of the number of attributes present in the dependency under consideration. By sound, we mean that given a set of functional dependencies F specified on a relation schema R, any dependency that we can infer from F by using the primary rules of Armstrong axioms holds in every relation state r of R that satisfies the dependencies in F.By complete, we mean that using primary rules of Armstrong axioms repeatedly to infer dependencies until no more dependencies can be inferred results in the complete set of all possible dependencies that can be inferred from F.\n\n\n### Advantages of Using Armstrong’s Axioms in Functional Dependency\n• They provide a systematic and efficient method for inferring additional functional dependencies from a given set of functional dependencies, which can help to optimizedatabase design. ### Disadvantages of Using Armstrong’s Axioms in Functional Dependency\n• The process of using Armstrong’s axioms to infer additional functional dependencies can be computationally expensive, especially for large databases with many tables and relationships."
    },
    {
        "topic": "armstrongs-axioms-in-functional-dependency-in-dbms",
        "subtopic": "using",
        "question": "What is using?",
        "answer": "By sound, we mean that given a set of functional dependencies F specified on a relation schema R, any dependency that we can infer from F by using the primary rules of Armstrong axioms holds in every relation state r of R that satisfies the dependencies in F.By complete, we mean that using primary rules of Armstrong axioms repeatedly to infer dependencies until no more dependencies can be inferred results in the complete set of all possible dependencies that can be inferred from F.\n\n\n### Advantages of Using Armstrong’s Axioms in Functional Dependency\n• They provide a systematic and efficient method for inferring additional functional dependencies from a given set of functional dependencies, which can help to optimizedatabase design. ### Disadvantages of Using Armstrong’s Axioms in Functional Dependency\n• The process of using Armstrong’s axioms to infer additional functional dependencies can be computationally expensive, especially for large databases with many tables and relationships."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "student",
        "question": "What is student?",
        "answer": "Here, we’ll explore the basic operators of Relational Algebra using the STUDENT_SPORTS, EMPLOYEE, and STUDENT relations from Table 1, Table 2, and Table 3, respectively. Table 1: STUDENT_SPORTS\n\nTable 2: EMPLOYEE\n\nTable 3: STUDENT\n\n\n### 1. Syntax:\n\n\n```python\nσ(Cond)(Relation Name)\n```\nExtract students whose age is greater than 18 from STUDENT relation given in Table 3\n\n\n```python\nσ(AGE>18)(STUDENT)\n```\n[Note:SELECT operationdoes not show any result, the projection operator must be called before the selection operator to generate or project the result. So, the correct syntax to generate the result is:∏(σ(AGE>18)(STUDENT))]\n\nRESULT:\n\n\n### 2. Syntax:\n\n\n```python\n∏(Column 1,Column 2….Column n)(Relation Name)\n```\nExtract ROLL_NO and NAME from STUDENT relation given in Table 3\n\n\n```python\n∏(ROLL_NO,NAME)(STUDENT)\n```\nRESULT:\n\nNote:If the resultant relation after projection has duplicate rows, it will be removed."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "• \n• \n• \n\nThe Relational Model is a way of structuring data using relations, which are a collection of tuples that have the same attributes. Relational Algebra is a procedural query language that takes relations as input and returns relations as output. It uses a set of operators to manipulate and retrieve data from these relations. Here, we’ll explore the basic operators of Relational Algebra using the STUDENT_SPORTS, EMPLOYEE, and STUDENT relations from Table 1, Table 2, and Table 3, respectively. Selection operator (σ)\nSelection operator is used to selecting tuples from a relation based on some condition."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "relations",
        "question": "What is relations?",
        "answer": "• \n• \n• \n\nThe Relational Model is a way of structuring data using relations, which are a collection of tuples that have the same attributes. Relational Algebra is a procedural query language that takes relations as input and returns relations as output. It uses a set of operators to manipulate and retrieve data from these relations. Here, we’ll explore the basic operators of Relational Algebra using the STUDENT_SPORTS, EMPLOYEE, and STUDENT relations from Table 1, Table 2, and Table 3, respectively. Cross Product(X)\nCross product is used to join two relations."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "python",
        "question": "What is python?",
        "answer": "Syntax:\n\n\n```python\nσ(Cond)(Relation Name)\n```\nExtract students whose age is greater than 18 from STUDENT relation given in Table 3\n\n\n```python\nσ(AGE>18)(STUDENT)\n```\n[Note:SELECT operationdoes not show any result, the projection operator must be called before the selection operator to generate or project the result. Syntax:\n\n\n```python\n∏(Column 1,Column 2….Column n)(Relation Name)\n```\nExtract ROLL_NO and NAME from STUDENT relation given in Table 3\n\n\n```python\n∏(ROLL_NO,NAME)(STUDENT)\n```\nRESULT:\n\nNote:If the resultant relation after projection has duplicate rows, it will be removed. Syntax:\n\n\n```python\nRelation1 X Relation2\n```\nTo apply Cross Product on STUDENT relation given in Table 1 and STUDENT_SPORTS relation given in Table 2,\n\n\n```python\nSTUDENT X STUDENT_SPORTS\n```\nRESULT:\n\n\n### 4. Syntax:\n\n\n```python\nRelation1 U Relation2\n```\nFind the person who is either student or employees, we can use Union operators like:\n\n\n```python\nSTUDENT U EMPLOYEE\n```\nRESULT:\n\n\n### 5. Syntax:\n\n\n```python\nRelation1 - Relation2\n```\nFind the person who is a student but not an employee, we can use minus operator like:\n\n\n```python\nSTUDENT - EMPLOYEE\n```\nRESULT:\n\n\n### 6."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "operator",
        "question": "What is operator?",
        "answer": "It uses a set of operators to manipulate and retrieve data from these relations. Here, we’ll explore the basic operators of Relational Algebra using the STUDENT_SPORTS, EMPLOYEE, and STUDENT relations from Table 1, Table 2, and Table 3, respectively. Selection operator (σ)\nSelection operator is used to selecting tuples from a relation based on some condition. Syntax:\n\n\n```python\nσ(Cond)(Relation Name)\n```\nExtract students whose age is greater than 18 from STUDENT relation given in Table 3\n\n\n```python\nσ(AGE>18)(STUDENT)\n```\n[Note:SELECT operationdoes not show any result, the projection operator must be called before the selection operator to generate or project the result. Projection Operator (∏)\nProjection operator is used to project particular columns from a relation."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "Here, we’ll explore the basic operators of Relational Algebra using the STUDENT_SPORTS, EMPLOYEE, and STUDENT relations from Table 1, Table 2, and Table 3, respectively. Table 1: STUDENT_SPORTS\n\nTable 2: EMPLOYEE\n\nTable 3: STUDENT\n\n\n### 1. Syntax:\n\n\n```python\nσ(Cond)(Relation Name)\n```\nExtract students whose age is greater than 18 from STUDENT relation given in Table 3\n\n\n```python\nσ(AGE>18)(STUDENT)\n```\n[Note:SELECT operationdoes not show any result, the projection operator must be called before the selection operator to generate or project the result. Syntax:\n\n\n```python\n∏(Column 1,Column 2….Column n)(Relation Name)\n```\nExtract ROLL_NO and NAME from STUDENT relation given in Table 3\n\n\n```python\n∏(ROLL_NO,NAME)(STUDENT)\n```\nRESULT:\n\nNote:If the resultant relation after projection has duplicate rows, it will be removed. Syntax:\n\n\n```python\nRelation1 X Relation2\n```\nTo apply Cross Product on STUDENT relation given in Table 1 and STUDENT_SPORTS relation given in Table 2,\n\n\n```python\nSTUDENT X STUDENT_SPORTS\n```\nRESULT:\n\n\n### 4."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "r2",
        "question": "What is r2?",
        "answer": "Union (U)\nUnion on two relations R1 and R2 can only be computed if R1 and R2 areunion compatible(These two relations should have the same number of attributes and corresponding attributes in two relations have the same domain). Union operator when applied on two relations R1 and R2 will give a relation with tuples that are either in R1 or in R2. The tuples which are in both R1 and R2 will appear only once in the result relation. Minus (-) or Set Difference\nMinus on two relations R1 and R2 can only be computed if R1 and R2 areunion compatible. Minus operator when applied on two relations as R1-R2 will give a relation with tuples that are in R1 but not in R2."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "result",
        "question": "What is result?",
        "answer": "Syntax:\n\n\n```python\nσ(Cond)(Relation Name)\n```\nExtract students whose age is greater than 18 from STUDENT relation given in Table 3\n\n\n```python\nσ(AGE>18)(STUDENT)\n```\n[Note:SELECT operationdoes not show any result, the projection operator must be called before the selection operator to generate or project the result. So, the correct syntax to generate the result is:∏(σ(AGE>18)(STUDENT))]\n\nRESULT:\n\n\n### 2. Syntax:\n\n\n```python\n∏(Column 1,Column 2….Column n)(Relation Name)\n```\nExtract ROLL_NO and NAME from STUDENT relation given in Table 3\n\n\n```python\n∏(ROLL_NO,NAME)(STUDENT)\n```\nRESULT:\n\nNote:If the resultant relation after projection has duplicate rows, it will be removed. Syntax:\n\n\n```python\nRelation1 X Relation2\n```\nTo apply Cross Product on STUDENT relation given in Table 1 and STUDENT_SPORTS relation given in Table 2,\n\n\n```python\nSTUDENT X STUDENT_SPORTS\n```\nRESULT:\n\n\n### 4. The tuples which are in both R1 and R2 will appear only once in the result relation."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "r1",
        "question": "What is r1?",
        "answer": "Union (U)\nUnion on two relations R1 and R2 can only be computed if R1 and R2 areunion compatible(These two relations should have the same number of attributes and corresponding attributes in two relations have the same domain). Union operator when applied on two relations R1 and R2 will give a relation with tuples that are either in R1 or in R2. The tuples which are in both R1 and R2 will appear only once in the result relation. Minus (-) or Set Difference\nMinus on two relations R1 and R2 can only be computed if R1 and R2 areunion compatible. Minus operator when applied on two relations as R1-R2 will give a relation with tuples that are in R1 but not in R2."
    },
    {
        "topic": "basic-operators-in-relational-algebra-2",
        "subtopic": "tuples",
        "question": "What is tuples?",
        "answer": "• \n• \n• \n\nThe Relational Model is a way of structuring data using relations, which are a collection of tuples that have the same attributes. Selection operator (σ)\nSelection operator is used to selecting tuples from a relation based on some condition. If Relation1 has m tuples and and Relation2 has n tuples, cross product of Relation1 and Relation2 will have m X n tuples. Union operator when applied on two relations R1 and R2 will give a relation with tuples that are either in R1 or in R2. The tuples which are in both R1 and R2 will appear only once in the result relation."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "bcnf",
        "question": "What is bcnf?",
        "answer": "This issue is addressed by a stronger normal form known asBoyce-Codd Normal Form (BCNF). To overcome this limitation, BCNF was introduced by Codd in 1974 as a more robust solution. ### Boyce-Codd Normal Form (BCNF)\nBoyce-Codd Normal Form (BCNF) is a stricter version of Third Normal Form (3NF) that ensures a more simplified and efficient database design. BCNF eliminates redundancy more effectively than 3NF by strictly requiring that all functional dependencies originate from super-keys. BCNF is essential for gooddatabase schema designin higher-level systems where consistency and efficiency are important, particularly when there are many candidate keys (as one often finds with a delivery system)."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "normal",
        "question": "What is normal?",
        "answer": "• \n• \n• \n\nWhile Third Normal Form (3NF) is generally sufficient for organizing relational databases, it may not completely eliminate redundancy. This issue is addressed by a stronger normal form known asBoyce-Codd Normal Form (BCNF). ### Boyce-Codd Normal Form (BCNF)\nBoyce-Codd Normal Form (BCNF) is a stricter version of Third Normal Form (3NF) that ensures a more simplified and efficient database design. ### Rules for BCNF\nRule 1:The table should be in the 3rd Normal Form. To determine the highest normal form of a given relation R with functional dependencies, the first step is to check whether the BCNF condition holds."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "Redundancy can still occur if there’s a dependency X→X where X is not a candidate key. Applying the rules of 2NF and 3NF can help identify some redundancies caused by dependencies that violate candidate keys. It enforces that every non-trivial functional dependency must have a superkey on its left-hand side. This approach addresses potential issues with candidate keys and ensures the database is free from redundancy. BCNF eliminates redundancy more effectively than 3NF by strictly requiring that all functional dependencies originate from super-keys."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "• \n• \n• \n\nWhile Third Normal Form (3NF) is generally sufficient for organizing relational databases, it may not completely eliminate redundancy. Rule 2:X should be a super-key for every functional dependency (FD) X−>Y in a given relation. Note:To test whether a relation is in BCNF, we identify all the determinants and make sure that they are candidate keys. To determine the highest normal form of a given relation R with functional dependencies, the first step is to check whether the BCNF condition holds. If R is found to be in BCNF, it can be safely deduced that the relation is also in3NF,2NF,and1NF."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "form",
        "question": "What is form?",
        "answer": "• \n• \n• \n\nWhile Third Normal Form (3NF) is generally sufficient for organizing relational databases, it may not completely eliminate redundancy. This issue is addressed by a stronger normal form known asBoyce-Codd Normal Form (BCNF). ### Boyce-Codd Normal Form (BCNF)\nBoyce-Codd Normal Form (BCNF) is a stricter version of Third Normal Form (3NF) that ensures a more simplified and efficient database design. ### Rules for BCNF\nRule 1:The table should be in the 3rd Normal Form. To determine the highest normal form of a given relation R with functional dependencies, the first step is to check whether the BCNF condition holds."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "candidate",
        "question": "What is candidate?",
        "answer": "Redundancy can still occur if there’s a dependency X→X where X is not a candidate key. Applying the rules of 2NF and 3NF can help identify some redundancies caused by dependencies that violate candidate keys. This approach addresses potential issues with candidate keys and ensures the database is free from redundancy. BCNF is essential for gooddatabase schema designin higher-level systems where consistency and efficiency are important, particularly when there are many candidate keys (as one often finds with a delivery system). Note:To test whether a relation is in BCNF, we identify all the determinants and make sure that they are candidate keys."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "3nf",
        "question": "What is 3nf?",
        "answer": "• \n• \n• \n\nWhile Third Normal Form (3NF) is generally sufficient for organizing relational databases, it may not completely eliminate redundancy. Applying the rules of 2NF and 3NF can help identify some redundancies caused by dependencies that violate candidate keys. However, even with these rules, certain dependencies may still lead to redundancy in 3NF. ### Boyce-Codd Normal Form (BCNF)\nBoyce-Codd Normal Form (BCNF) is a stricter version of Third Normal Form (3NF) that ensures a more simplified and efficient database design. BCNF eliminates redundancy more effectively than 3NF by strictly requiring that all functional dependencies originate from super-keys."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "### Rules for BCNF\nRule 1:The table should be in the 3rd Normal Form. For satisfying this table in BCNF, we have to decompose it into further tables. Here is the full procedure through which we transform this table into BCNF. Let us first divide this main table into two tablesStu_BranchandStu_CourseTable. Stu_Branch Table\n\nCandidate Key for this table:Stu_ID."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "teacher",
        "question": "What is teacher?",
        "answer": "### Example 1\nConsider a relation R with attributes (student, teacher, subject). ```python\nFD: { (student, Teacher) -> subject, (student, subject) -> Teacher, (Teacher) -> subject}\n```\n• Candidate keysare (student, teacher) and (student, subject). • The above relation is not in BCNF, because in the FD (teacher->subject), teacher is not a key. This relation suffers with anomalies −\n• For example, if we delete the student Tahira , we will also lose the information that N.Gupta teaches C. This issue occurs because the teacher is a determinant but not a candidate key. R is divided into two relations R1(Teacher, Subject) and R2(Student, Teacher)."
    },
    {
        "topic": "boyce-codd-normal-form-bcnf",
        "subtopic": "dependency",
        "question": "What is dependency?",
        "answer": "Redundancy can still occur if there’s a dependency X→X where X is not a candidate key. It enforces that every non-trivial functional dependency must have a superkey on its left-hand side. Rule 2:X should be a super-key for every functional dependency (FD) X−>Y in a given relation. • The above relation is in 3NF (since there is no transitive dependency). After decomposing into further tables, now it is in BCNF, as it is passing the condition of Super Key, that in functional dependency X−>Y, X is a Super Key."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "dependencies",
        "question": "What is dependencies?",
        "answer": "• \n• \n• \n\nManaging a large set of functional dependencies can result in unnecessary computational overhead. The canonical cover of a set of functional dependencies F is a simplified version of F that retains the same closure as the original set, ensuring no redundancy. An attribute in a functional dependency is considered extraneous if it can be removed without altering the closure of the set of functional dependencies. ### Canonical Cover\nA canonical cover is a set of functional dependencies that is equivalent to a given set of functional dependencies but is minimal in terms of the number of dependencies. The process of finding the canonical cover of a set of functional dependencies involves the following steps:\n\n\n### Step 1: Combine Functional Dependencies with the Same Left-Hand Side\n• If two or more functional dependencies in F have the same left-hand side, combine them into a single functional dependency by taking the union of their right-hand sides."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "functional",
        "question": "What is functional?",
        "answer": "• \n• \n• \n\nManaging a large set of functional dependencies can result in unnecessary computational overhead. The canonical cover of a set of functional dependencies F is a simplified version of F that retains the same closure as the original set, ensuring no redundancy. An attribute in a functional dependency is considered extraneous if it can be removed without altering the closure of the set of functional dependencies. ### Canonical Cover\nA canonical cover is a set of functional dependencies that is equivalent to a given set of functional dependencies but is minimal in terms of the number of dependencies. Canonical Cover of functional dependency is also called minimal set of functional dependency or irreducible form of functional dependency."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "• \n• \n• \n\nManaging a large set of functional dependencies can result in unnecessary computational overhead. The canonical cover of a set of functional dependencies F is a simplified version of F that retains the same closure as the original set, ensuring no redundancy. An attribute in a functional dependency is considered extraneous if it can be removed without altering the closure of the set of functional dependencies. ### Canonical Cover\nA canonical cover is a set of functional dependencies that is equivalent to a given set of functional dependencies but is minimal in terms of the number of dependencies. Canonical Cover of functional dependency is also called minimal set of functional dependency or irreducible form of functional dependency."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "closure",
        "question": "What is closure?",
        "answer": "The canonical cover of a set of functional dependencies F is a simplified version of F that retains the same closure as the original set, ensuring no redundancy. An attribute in a functional dependency is considered extraneous if it can be removed without altering the closure of the set of functional dependencies. ### Step 2: Eliminate Extraneous Attributes\nAn attribute is extraneous if removing it does not change the closure of the functional dependency set. There are two scenarios:\n\nExtraneous Attributes on the Left-Hand Side:\n\nFor X→Y, check if any attribute in X can be removed without affecting the closure. • Compute the closure of F with X′→Y instead of X→YX ."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "cover",
        "question": "What is cover?",
        "answer": "This is where the canonical cover becomes useful. The canonical cover of a set of functional dependencies F is a simplified version of F that retains the same closure as the original set, ensuring no redundancy. ### Canonical Cover\nA canonical cover is a set of functional dependencies that is equivalent to a given set of functional dependencies but is minimal in terms of the number of dependencies. Canonical Cover of functional dependency is also called minimal set of functional dependency or irreducible form of functional dependency. The process of finding the canonical cover of a set of functional dependencies involves the following steps:\n\n\n### Step 1: Combine Functional Dependencies with the Same Left-Hand Side\n• If two or more functional dependencies in F have the same left-hand side, combine them into a single functional dependency by taking the union of their right-hand sides."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "canonical",
        "question": "What is canonical?",
        "answer": "This is where the canonical cover becomes useful. The canonical cover of a set of functional dependencies F is a simplified version of F that retains the same closure as the original set, ensuring no redundancy. ### Canonical Cover\nA canonical cover is a set of functional dependencies that is equivalent to a given set of functional dependencies but is minimal in terms of the number of dependencies. Canonical Cover of functional dependency is also called minimal set of functional dependency or irreducible form of functional dependency. The process of finding the canonical cover of a set of functional dependencies involves the following steps:\n\n\n### Step 1: Combine Functional Dependencies with the Same Left-Hand Side\n• If two or more functional dependencies in F have the same left-hand side, combine them into a single functional dependency by taking the union of their right-hand sides."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "step",
        "question": "What is step?",
        "answer": "The process of finding the canonical cover of a set of functional dependencies involves the following steps:\n\n\n### Step 1: Combine Functional Dependencies with the Same Left-Hand Side\n• If two or more functional dependencies in F have the same left-hand side, combine them into a single functional dependency by taking the union of their right-hand sides. ### Step 2: Eliminate Extraneous Attributes\nAn attribute is extraneous if removing it does not change the closure of the functional dependency set. ### Step 3: Decompose Functional Dependencies\nIf the right-hand side of a functional dependency has multiple attributes (e.g., X→AB), decompose it into multiple functional dependencies, each with a single attribute on the right-hand side. ### Step 4: Check for Redundant Dependencies\nA functional dependency FD in F is redundant if it can be removed without changing the closure of F.\n\nTo check:\n\n• Temporarily remove FD from F.\n• Compute the closure of the remaining set. ### Step 5: Verify the Final Canonical Cover\nEnsure that each functional dependency is in its simplest form:\n\n• The left-hand side has no extraneous attributes."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "bc",
        "question": "What is bc?",
        "answer": "• Example:A→B and A→C become A→BC. • A→B and A→C become A→BC. • A→B and A→C become A→BC. • Check the right-hand side for extraneous attributes:Split A→BC into A→B and A→C.Now, F={A→B,A→C,B→C,AB→C}. • Split A→BC into A→B and A→C."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "extraneous",
        "question": "What is extraneous?",
        "answer": "An attribute in a functional dependency is considered extraneous if it can be removed without altering the closure of the set of functional dependencies. ### Step 2: Eliminate Extraneous Attributes\nAn attribute is extraneous if removing it does not change the closure of the functional dependency set. There are two scenarios:\n\nExtraneous Attributes on the Left-Hand Side:\n\nFor X→Y, check if any attribute in X can be removed without affecting the closure. • If the closure remains unchanged, A is extraneous. Extraneous Attributes on the Right-Hand Side:\n\nFor X→Y, check if any attribute in Y can be removed without affecting the closure."
    },
    {
        "topic": "canonical-cover-of-functional-dependencies-in-dbms",
        "subtopic": "hand",
        "question": "What is hand?",
        "answer": "The process of finding the canonical cover of a set of functional dependencies involves the following steps:\n\n\n### Step 1: Combine Functional Dependencies with the Same Left-Hand Side\n• If two or more functional dependencies in F have the same left-hand side, combine them into a single functional dependency by taking the union of their right-hand sides. There are two scenarios:\n\nExtraneous Attributes on the Left-Hand Side:\n\nFor X→Y, check if any attribute in X can be removed without affecting the closure. Extraneous Attributes on the Right-Hand Side:\n\nFor X→Y, check if any attribute in Y can be removed without affecting the closure. ### Step 3: Decompose Functional Dependencies\nIf the right-hand side of a functional dependency has multiple attributes (e.g., X→AB), decompose it into multiple functional dependencies, each with a single attribute on the right-hand side. ### Step 5: Verify the Final Canonical Cover\nEnsure that each functional dependency is in its simplest form:\n\n• The left-hand side has no extraneous attributes."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "Database management systems were developed to handle the following difficulties of typical File-processing systems supported by conventional operating systems.1. Data redundancy and inconsistency2. Difficulty in accessing data3. Data isolation – multiple files and formats4. 4.What is database normalization?It is a process of analyzing the given relation schemas based on their functional dependencies and primary keys to achieve the following desirable properties:1."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "Database management systems were developed to handle the following difficulties of typical File-processing systems supported by conventional operating systems.1. 4.What is database normalization?It is a process of analyzing the given relation schemas based on their functional dependencies and primary keys to achieve the following desirable properties:1. Some of the major advantages of DBMS are as follows:\n\n• Controlled Redundancy:DBMS supports a mechanism to control the redundancy of data inside the database by integrating all the data into a single database and as data is stored in only one place, the duplicity of data does not happen. • Data Sharing:Sharing of data among multiple users simultaneously can also be done in DBMS as the same database will be shared among all the users and by different application programs. • Enforcement of Integrity Constraints:Integrity Constraints are very important to be enforced on the data so that the refined data after putting some constraints are stored in the database and this is followed by DBMS."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "There cannot be more than one primary key in a table..AForeign keyis a field (or collection of fields) in one table that uniquely identifies a row of another table. There is only one primary key in a table, but there can be multiple unique constrains. SeeHaving vs Where Clause?for more details\n\n8.How to print duplicate rows in a table?Seehttps://www.geeksforgeeks.org/how-to-print-duplicate-rows-in-a-table/\n\n9. What is Join?An SQL Join is used to combine data from two or more tables, based on a common field between them. For example, consider the following two tables."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "What is Join?An SQL Join is used to combine data from two or more tables, based on a common field between them. For example, consider the following two tables. Views can represent a subset of the data contained in a table; consequently, a view can limit the degree of exposure of the underlying tables to the outer world: a given user may have permission to query the view, while denied access to the rest of the base table.2. Views can join and simplify multiple tables into a single virtual table.3. Views can act as aggregated tables, where the database engine aggregates data (sum, average, etc.)"
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "used",
        "question": "What is used?",
        "answer": "What is the difference between having and where clause?HAVING is used to specify a condition for a group or an aggregate function used in a select statement. What is Join?An SQL Join is used to combine data from two or more tables, based on a common field between them. Depending on the SQL engine used, views can provide extra security.12. It contains a set of operations that are commonly used in an application to do some common database tasks.14. B-Tree or B+ tree are used for this purpose.18."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "query",
        "question": "What is query?",
        "answer": "Table –Student Table\n\nTable –StudentCourse TableCourseIDEnrollNo1100021000310001100221003Following is a join query that shows the names of students enrolled in different courseIDs.SELECT StudentCourse.CourseID, Student.StudentNameFROM StudentCourseINNER JOIN StudentON StudentCourse.EnrollNo = Student.EnrollNoORDER BY StudentCourse.CourseID;The above query would produce the following result.CourseIDStudentName1geek11geek32geek13geek19. Views can represent a subset of the data contained in a table; consequently, a view can limit the degree of exposure of the underlying tables to the outer world: a given user may have permission to query the view, while denied access to the rest of the base table.2. The code is executed automatically whenever the associated query is executed on a table. What is CLAUSE in SQL?A clause in SQL is a part of a query that lets you filter or customize how you want your data to be queried to you.20. What is QBE?Query-by-example represents a visual/graphical approach for accessing information in a database through the use of query templates called skeleton tables."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "What are super, primary, candidate,and foreign keys?Asuper keyis a set of attributes of a relation schema upon which all attributes of the schema are functionally dependent. No two rows can have the same value of super key attributes.ACandidate keyis a minimal superkey, i.e., no proper subset of Candidate key attributes can be a superkey.APrimary Keyis one of the candidate keys. One of the candidate keys is selected as most important and becomes the primary key. There cannot be more than one primary key in a table..AForeign keyis a field (or collection of fields) in one table that uniquely identifies a row of another table. What is the difference between primary key and unique constraints?The primary key cannot have NULL value, the unique constraints can have NULL values."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "What are the differences between DDL, DML,and DCL in SQL?Following are some details of three :DDLstands for Data Definition Language. SQL queries like CREATE, ALTER, DROP, TRUNCATE and RENAME come under this.DMLstands for Data Manipulation Language. SQL queries like SELECT, INSERT, DELETE and UPDATE come under this.DCLstands for Data Control Language. SQL queries like GRANT and REVOKE come under this. What is Join?An SQL Join is used to combine data from two or more tables, based on a common field between them."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "dbms",
        "question": "What is dbms?",
        "answer": "What are the advantages of DBMS over traditional file-based systems? Why is the use of DBMS recommended? Some of the major advantages of DBMS are as follows:\n\n• Controlled Redundancy:DBMS supports a mechanism to control the redundancy of data inside the database by integrating all the data into a single database and as data is stored in only one place, the duplicity of data does not happen. • Data Sharing:Sharing of data among multiple users simultaneously can also be done in DBMS as the same database will be shared among all the users and by different application programs. • Backup and Recovery Facility:DBMS minimizes the pain of creating the backup of data again and again by providing a feature of ‘backup and recovery’ which automatically creates the data backup and restores the data whenever required."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions",
        "subtopic": "rows",
        "question": "What is rows?",
        "answer": "No two rows can have the same value of super key attributes.ACandidate keyis a minimal superkey, i.e., no proper subset of Candidate key attributes can be a superkey.APrimary Keyis one of the candidate keys. The HAVING clause selects rows after grouping. SeeHaving vs Where Clause?for more details\n\n8.How to print duplicate rows in a table?Seehttps://www.geeksforgeeks.org/how-to-print-duplicate-rows-in-a-table/\n\n9. The cursors are used to navigate through a set of rows returned by an embedded SQL SELECT statement. This operation cannot be rolled back and so should be used only when necessary.However in case of TRUNCATE, only the data stored in a table is deleted and the structure of the table is preserved and you can re-insert data by the use of“INSERT INTO clause”.It can be rolled back until the commit has been made.DELETE command, on the other hand, is a DML Command which is used to delete rows from the table and this can be rolled back, however its considered slower  than truncate."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "decomposition",
        "question": "What is decomposition?",
        "answer": "• \n• \n• \n\nIn aDatabase Management System (DBMS),dependency-preserving decompositionrefers to the process of breaking down a complex database schema into simpler, smaller tables, such that all the functional dependencies of the original schema are still enforceable without needing to perform additional joins. To achieve dependency-preserving decomposition, algorithms likelossless join decompositionanddependency-preserving decompositionare applied, ensuring that all original dependencies can be represented directly in the decomposed tables. Now this decomposition will be considered as dependency preserving decomposition if and only if-Every dependency in F is logically implied by F` i.e. F`+= F+It is obvious that F1 ⊆ F+, F2 ⊆ F+and so on.If we verify that F` is satisfied in R, we have verified that decomposition is dependency preserving decomposition i.e. • f1​: FDs in R1​\n• f2​: FDs in R2\n\nNow, there are three possible cases:\n\n\n### Case 1: f1∪f2=F\n• This means the FDs from R1​ and R2​ together exactly match the original FDs F.\n• Result: The decomposition is dependency-preserving because we haven’t lost any FDs."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "dependency",
        "question": "What is dependency?",
        "answer": "• \n• \n• \n\nIn aDatabase Management System (DBMS),dependency-preserving decompositionrefers to the process of breaking down a complex database schema into simpler, smaller tables, such that all the functional dependencies of the original schema are still enforceable without needing to perform additional joins. To achieve dependency-preserving decomposition, algorithms likelossless join decompositionanddependency-preserving decompositionare applied, ensuring that all original dependencies can be represented directly in the decomposed tables. Now this decomposition will be considered as dependency preserving decomposition if and only if-Every dependency in F is logically implied by F` i.e. F`+= F+It is obvious that F1 ⊆ F+, F2 ⊆ F+and so on.If we verify that F` is satisfied in R, we have verified that decomposition is dependency preserving decomposition i.e. • f1​: FDs in R1​\n• f2​: FDs in R2\n\nNow, there are three possible cases:\n\n\n### Case 1: f1∪f2=F\n• This means the FDs from R1​ and R2​ together exactly match the original FDs F.\n• Result: The decomposition is dependency-preserving because we haven’t lost any FDs."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "f1",
        "question": "What is f1?",
        "answer": "Example:\n\nSuppose R is a relational schema and F is the set of functional dependencies on R. If R is decomposed into relations R1, R2, ………….…… Rn , each holding functional dependencies F1, F2, …….……… Fn respectively. We can say, F` = F1 U F2 U ………..… U Fn. F`+= F+It is obvious that F1 ⊆ F+, F2 ⊆ F+and so on.If we verify that F` is satisfied in R, we have verified that decomposition is dependency preserving decomposition i.e. F1 U F2 = F.\n\nLet’s say:\n\n• The original relation R has a set of functional dependencies (FDs) called F.\n• When we decompose R into R1​ and R2​, each gets its own FDs:f1​: FDs in R1​f2​: FDs in R2\n• f1​: FDs in R1​\n• f2​: FDs in R2\n• The combined FDs from R1​ and R2​ are f1∪f2​. • f1​: FDs in R1​\n• f2​: FDs in R2\n\nNow, there are three possible cases:\n\n\n### Case 1: f1∪f2=F\n• This means the FDs from R1​ and R2​ together exactly match the original FDs F.\n• Result: The decomposition is dependency-preserving because we haven’t lost any FDs."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "f2",
        "question": "What is f2?",
        "answer": "Example:\n\nSuppose R is a relational schema and F is the set of functional dependencies on R. If R is decomposed into relations R1, R2, ………….…… Rn , each holding functional dependencies F1, F2, …….……… Fn respectively. We can say, F` = F1 U F2 U ………..… U Fn. F`+= F+It is obvious that F1 ⊆ F+, F2 ⊆ F+and so on.If we verify that F` is satisfied in R, we have verified that decomposition is dependency preserving decomposition i.e. F1 U F2 = F.\n\nLet’s say:\n\n• The original relation R has a set of functional dependencies (FDs) called F.\n• When we decompose R into R1​ and R2​, each gets its own FDs:f1​: FDs in R1​f2​: FDs in R2\n• f1​: FDs in R1​\n• f2​: FDs in R2\n• The combined FDs from R1​ and R2​ are f1∪f2​. • f1​: FDs in R1​\n• f2​: FDs in R2\n\nNow, there are three possible cases:\n\n\n### Case 1: f1∪f2=F\n• This means the FDs from R1​ and R2​ together exactly match the original FDs F.\n• Result: The decomposition is dependency-preserving because we haven’t lost any FDs."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "courseid",
        "question": "What is courseid?",
        "answer": "Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• CourseID→Instructor\n• StudentID,CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={StudentID,CourseID→Instructor}\n• R2(CourseID,Instructor): f2={CourseID→Instructor}\n\nHere, f1∪f2=F.The decomposition is dependency-preserving. Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• StudentID,CourseID→Instructor\n• CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={StudentID,CourseID→Instructor}\n• R2(CourseID,Instructor): f2={}\n\nHere, f1∪f2⊂F.The FD CourseID→InstructorCourseID is missing.The decomposition is not dependency-preserving. Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={CourseID→Instructor}\n• R2(CourseID,Instructor): f2={Instructor→CourseID}\n\nHere, f1∪f2⊃F, as the FD Instructor→CourseID was added unnecessarily.The decomposition has extra dependencies, which could lead to confusion but doesn’t directly violate dependency preservation."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "preserving",
        "question": "What is preserving?",
        "answer": "• \n• \n• \n\nIn aDatabase Management System (DBMS),dependency-preserving decompositionrefers to the process of breaking down a complex database schema into simpler, smaller tables, such that all the functional dependencies of the original schema are still enforceable without needing to perform additional joins. To achieve dependency-preserving decomposition, algorithms likelossless join decompositionanddependency-preserving decompositionare applied, ensuring that all original dependencies can be represented directly in the decomposed tables. Now this decomposition will be considered as dependency preserving decomposition if and only if-Every dependency in F is logically implied by F` i.e. F`+= F+It is obvious that F1 ⊆ F+, F2 ⊆ F+and so on.If we verify that F` is satisfied in R, we have verified that decomposition is dependency preserving decomposition i.e. • f1​: FDs in R1​\n• f2​: FDs in R2\n\nNow, there are three possible cases:\n\n\n### Case 1: f1∪f2=F\n• This means the FDs from R1​ and R2​ together exactly match the original FDs F.\n• Result: The decomposition is dependency-preserving because we haven’t lost any FDs."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "dependencies",
        "question": "What is dependencies?",
        "answer": "• \n• \n• \n\nIn aDatabase Management System (DBMS),dependency-preserving decompositionrefers to the process of breaking down a complex database schema into simpler, smaller tables, such that all the functional dependencies of the original schema are still enforceable without needing to perform additional joins. To achieve dependency-preserving decomposition, algorithms likelossless join decompositionanddependency-preserving decompositionare applied, ensuring that all original dependencies can be represented directly in the decomposed tables. Example:\n\nSuppose R is a relational schema and F is the set of functional dependencies on R. If R is decomposed into relations R1, R2, ………….…… Rn , each holding functional dependencies F1, F2, …….……… Fn respectively. F1 U F2 = F.\n\nLet’s say:\n\n• The original relation R has a set of functional dependencies (FDs) called F.\n• When we decompose R into R1​ and R2​, each gets its own FDs:f1​: FDs in R1​f2​: FDs in R2\n• f1​: FDs in R1​\n• f2​: FDs in R2\n• The combined FDs from R1​ and R2​ are f1∪f2​. Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• CourseID→Instructor\n• StudentID,CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={StudentID,CourseID→Instructor}\n• R2(CourseID,Instructor): f2={CourseID→Instructor}\n\nHere, f1∪f2=F.The decomposition is dependency-preserving."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "instructor",
        "question": "What is instructor?",
        "answer": "Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• CourseID→Instructor\n• StudentID,CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={StudentID,CourseID→Instructor}\n• R2(CourseID,Instructor): f2={CourseID→Instructor}\n\nHere, f1∪f2=F.The decomposition is dependency-preserving. Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• StudentID,CourseID→Instructor\n• CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={StudentID,CourseID→Instructor}\n• R2(CourseID,Instructor): f2={}\n\nHere, f1∪f2⊂F.The FD CourseID→InstructorCourseID is missing.The decomposition is not dependency-preserving. Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={CourseID→Instructor}\n• R2(CourseID,Instructor): f2={Instructor→CourseID}\n\nHere, f1∪f2⊃F, as the FD Instructor→CourseID was added unnecessarily.The decomposition has extra dependencies, which could lead to confusion but doesn’t directly violate dependency preservation."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "fds",
        "question": "What is fds?",
        "answer": "F1 U F2 = F.\n\nLet’s say:\n\n• The original relation R has a set of functional dependencies (FDs) called F.\n• When we decompose R into R1​ and R2​, each gets its own FDs:f1​: FDs in R1​f2​: FDs in R2\n• f1​: FDs in R1​\n• f2​: FDs in R2\n• The combined FDs from R1​ and R2​ are f1∪f2​. • f1​: FDs in R1​\n• f2​: FDs in R2\n\nNow, there are three possible cases:\n\n\n### Case 1: f1∪f2=F\n• This means the FDs from R1​ and R2​ together exactly match the original FDs F.\n• Result: The decomposition is dependency-preserving because we haven’t lost any FDs. ### Case 2: f1∪f2⊂F\n• This means some FDs from the original set F are missing in f1∪f2. • Result: The decomposition is not dependency-preserving, as we’ve lost some FDs. ### Case 3: f1∪f2⊃F\n• This means the FDs from R1R_1R1​ and R2R_2R2​ contain extra dependencies that were not part of F.\n• Result: This case is technically possible but uncommon."
    },
    {
        "topic": "data-base-dependency-preserving-decomposition",
        "subtopic": "functional",
        "question": "What is functional?",
        "answer": "• \n• \n• \n\nIn aDatabase Management System (DBMS),dependency-preserving decompositionrefers to the process of breaking down a complex database schema into simpler, smaller tables, such that all the functional dependencies of the original schema are still enforceable without needing to perform additional joins. Example:\n\nSuppose R is a relational schema and F is the set of functional dependencies on R. If R is decomposed into relations R1, R2, ………….…… Rn , each holding functional dependencies F1, F2, …….……… Fn respectively. F1 U F2 = F.\n\nLet’s say:\n\n• The original relation R has a set of functional dependencies (FDs) called F.\n• When we decompose R into R1​ and R2​, each gets its own FDs:f1​: FDs in R1​f2​: FDs in R2\n• f1​: FDs in R1​\n• f2​: FDs in R2\n• The combined FDs from R1​ and R2​ are f1∪f2​. Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• CourseID→Instructor\n• StudentID,CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={StudentID,CourseID→Instructor}\n• R2(CourseID,Instructor): f2={CourseID→Instructor}\n\nHere, f1∪f2=F.The decomposition is dependency-preserving. Original R:| StudentID | CourseID | Instructor |\n\nFunctional Dependencies F:\n\n• StudentID,CourseID→Instructor\n• CourseID→Instructor\n\nAfter decomposition:\n\n• R1(StudentID,CourseID): f1={StudentID,CourseID→Instructor}\n• R2(CourseID,Instructor): f2={}\n\nHere, f1∪f2⊂F.The FD CourseID→InstructorCourseID is missing.The decomposition is not dependency-preserving."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "denormalization",
        "question": "What is denormalization?",
        "answer": "• \n• \n• \n\nDenormalization focuses on combining multiple tables to make queries execute quickly. In this article, we’ll explore Denormalization and how it impacts database design. ### What is Denormalization in Databases? • Denormalization is a database optimization technique in which we add redundant data to one or more tables. Note that denormalization does not mean ‘reversing normalization’ or ‘not to normalize’."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "It adds redundancies in the database though. In this article, we’ll explore Denormalization and how it impacts database design. This method can help us to avoid costly joins in a relational database made during normalization. ### What is Denormalization in Databases? • Denormalization is a database optimization technique in which we add redundant data to one or more tables."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "It adds redundancies in the database though. In this article, we’ll explore Denormalization and how it impacts database design. This method can help us to avoid costly joins in a relational database made during normalization. ### What is Denormalization in Databases? • Denormalization is a database optimization technique in which we add redundant data to one or more tables."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "• \n• \n• \n\nDenormalization focuses on combining multiple tables to make queries execute quickly. • Denormalization is a database optimization technique in which we add redundant data to one or more tables. • Basically, The process of taking a normalized schema and making it non-normalized is called denormalization, and designers use it to tune the performance of systems to support time-critical operations.In a traditional normalized database, we store data in separate logical tables and attempt to minimize redundant data. When we need to retrieve a list of all Courses with the Teacher’s name, we would do a join between these two tables. The drawback is that if tables are large, we may spend an unnecessarily long time doing joins on tables."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nDenormalization focuses on combining multiple tables to make queries execute quickly. • Denormalization is a database optimization technique in which we add redundant data to one or more tables. • Basically, The process of taking a normalized schema and making it non-normalized is called denormalization, and designers use it to tune the performance of systems to support time-critical operations.In a traditional normalized database, we store data in separate logical tables and attempt to minimize redundant data. • For example, in a normalized database, we might have a Courses table and a Teachers table. When we need to retrieve a list of all Courses with the Teacher’s name, we would do a join between these two tables."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "performance",
        "question": "What is performance?",
        "answer": "• Basically, The process of taking a normalized schema and making it non-normalized is called denormalization, and designers use it to tune the performance of systems to support time-critical operations.In a traditional normalized database, we store data in separate logical tables and attempt to minimize redundant data. To optimize performance, we can denormalize the data by combining related tables into a single table. One side normalization is used for reduce or removing the redundancy which means there will be no duplicate data or entries in the same table and also optimizes for data integrity and efficient storage, while Denormalization is used for add the redundancy into normalized table so that enhance the functionality and minimize the running time of database queries (likejoins operation) and optimizes for performance and query simplicity. ### Advantages of Denormalization\n• Improved Query Performance:Denormalization can improve query performance by reducing the number of joins required to retrieve data. • Improved Read Performance:Denormalization can improve read performance by making it easier to access data."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "normalization",
        "question": "What is normalization?",
        "answer": "• \n• \n• \n\nDenormalization focuses on combining multiple tables to make queries execute quickly. In this article, we’ll explore Denormalization and how it impacts database design. This method can help us to avoid costly joins in a relational database made during normalization. ### What is Denormalization in Databases? • Denormalization is a database optimization technique in which we add redundant data to one or more tables."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "redundant",
        "question": "What is redundant?",
        "answer": "• Denormalization is a database optimization technique in which we add redundant data to one or more tables. • Basically, The process of taking a normalized schema and making it non-normalized is called denormalization, and designers use it to tune the performance of systems to support time-critical operations.In a traditional normalized database, we store data in separate logical tables and attempt to minimize redundant data. ### Disadvantages of Denormalization\n• Reduced Data Integrity:By adding redundant data, denormalization can reduce data integrity and increase the risk of inconsistencies. • Increased Complexity:While denormalization can simplify thedatabase schemain some cases, it can also increase complexity by introducing redundant data. • Increased Storage Requirements:By adding redundant data, denormalization can increase storage requirements and increase the cost of maintaining thedatabase."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "normalized",
        "question": "What is normalized?",
        "answer": "• Basically, The process of taking a normalized schema and making it non-normalized is called denormalization, and designers use it to tune the performance of systems to support time-critical operations.In a traditional normalized database, we store data in separate logical tables and attempt to minimize redundant data. • For example, in a normalized database, we might have a Courses table and a Teachers table. ### Step 1: Unnormalized Table\nThis is the starting point where all the data is stored in a single table. ### Step 2: Normalized Structure\nTo eliminate redundancy and avoid anomalies, we split the data into smaller, related tables. ### Step 3: Denormalized Table\nIn some cases, normalization can make querying complex and slow because you need to join multiple tables to get the required information."
    },
    {
        "topic": "denormalization-in-databases",
        "subtopic": "redundancy",
        "question": "What is redundancy?",
        "answer": "Under denormalization, we decide that we’re okay with some redundancy and some extra effort to update the database in order to get the efficiency advantages of fewer joins. • Redundancy:For example, “Alice” and “Math” are repeated multiple times. ### Step 2: Normalized Structure\nTo eliminate redundancy and avoid anomalies, we split the data into smaller, related tables. • No Redundancy:“Mr. One side normalization is used for reduce or removing the redundancy which means there will be no duplicate data or entries in the same table and also optimizes for data integrity and efficient storage, while Denormalization is used for add the redundancy into normalized table so that enhance the functionality and minimize the running time of database queries (likejoins operation) and optimizes for performance and query simplicity."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "entity",
        "question": "What is entity?",
        "answer": "• \n• \n• \n\nThe Entity-Relationship (ER) Model is one of the primary components of Database Management Systems and is very important for designing the logical structure of databases. In as much as discussing the usage of the ER Model such terms as Entity, Entity Set, and Entity Type need to be understood since they explain how data is classified and organized in a database. ### What is Entity? An entity is anything real that has a defined and separate existence. Each of these entities has attributes that help in describing the nature of the entity, distinguishing it from the other entities."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "entities",
        "question": "What is entities?",
        "answer": "It helps define data, and the relationship between the data entities and it makes the system easier to visualize. This is vital in database design since entities are the fundamental components of information that are kept and controlled in a database. Each of these entities has attributes that help in describing the nature of the entity, distinguishing it from the other entities. For instance, a student, a car, and a bank account are all considered entities as each of them has a roll number, registration number, and account number that can identify them respectively. An entity can be of two types :\n\n• Tangible Entity:Entities that exist in the real world physically.Example:Person, car, etc."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "In as much as discussing the usage of the ER Model such terms as Entity, Entity Set, and Entity Type need to be understood since they explain how data is classified and organized in a database. • An entity is represented by a set of attributes. ### What is Entity Set? An entity set is a comprehensive representation of all entities of the same type at a specific time. The use of an entity set helps to aggregate and thus manage similar entities withindatabases."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "student",
        "question": "What is student?",
        "answer": "For instance, a student, a car, and a bank account are all considered entities as each of them has a roll number, registration number, and account number that can identify them respectively. Example :\n\n• A student with a particular roll number is an entity. Note :\n\n• An entity may be concrete like a student, or a book, or abstract like a holiday or a particular concept. For example, for an entity type called Student, there will exist students and their respective attributes such as studentID, name and age. Example :\n\n• A table named student in a university database."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "Entity types are essential parts of creating relations because they determine the values that will be inserted for each row in the table. Example :\n\n• A table named student in a university database. • A table named employee in a company database. • A table named “product” in an e-commerce database is an entity type for all products. • It is represented by the name of the table and its schema."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "example",
        "question": "What is example?",
        "answer": "An entity can be of two types :\n\n• Tangible Entity:Entities that exist in the real world physically.Example:Person, car, etc. • Intangible Entity:Entities that exist only logically and have no physical existence.Example:Bank Account, etc. Example :\n\n• A student with a particular roll number is an entity. For example, for an entity type called Student, there will exist students and their respective attributes such as studentID, name and age. Example :\n\n• A table named student in a university database."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "type",
        "question": "What is type?",
        "answer": "In as much as discussing the usage of the ER Model such terms as Entity, Entity Set, and Entity Type need to be understood since they explain how data is classified and organized in a database. An entity can be of two types :\n\n• Tangible Entity:Entities that exist in the real world physically.Example:Person, car, etc. ### What is Entity Type? Anentity typecan be defined as a framework or a class of entities which are the focal point of this research. Entity types assist in classifying the same kind of entities into one group, which comes in use when dealing with their properties and relations in the database."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nThe Entity-Relationship (ER) Model is one of the primary components of Database Management Systems and is very important for designing the logical structure of databases. This is the reason that the ER Model is commonly employed while designing the structure of relational databases. In as much as discussing the usage of the ER Model such terms as Entity, Entity Set, and Entity Type need to be understood since they explain how data is classified and organized in a database. This is vital in database design since entities are the fundamental components of information that are kept and controlled in a database. Entity types assist in classifying the same kind of entities into one group, which comes in use when dealing with their properties and relations in the database."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "particular",
        "question": "What is particular?",
        "answer": "Example :\n\n• A student with a particular roll number is an entity. • A company with a particular registration number is an entity. Note :\n\n• An entity may be concrete like a student, or a book, or abstract like a holiday or a particular concept. • In a particular relation in RDBMS, a particular record is called an entity. Note :\n\n• The category of a particular entity in the relation in RDBMS is called the entity type."
    },
    {
        "topic": "difference-between-entity-entity-set-and-entity-type",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nThe Entity-Relationship (ER) Model is one of the primary components of Database Management Systems and is very important for designing the logical structure of databases. It helps define data, and the relationship between the data entities and it makes the system easier to visualize. This is the reason that the ER Model is commonly employed while designing the structure of relational databases. Through the use of the ER Model, hierarchies such as how data will be stored, accessed, or even managed can easily be constructed. In as much as discussing the usage of the ER Model such terms as Entity, Entity Set, and Entity Type need to be understood since they explain how data is classified and organized in a database."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "entity",
        "question": "What is entity?",
        "answer": "• \n• \n• \n\nAn entity is a “thing” or “object” in the real world. An entity contains attributes, which describe that entity. So anything about which we store information is called an entity. ### What is a Strong Entity? A strong entity is not dependent on any other entity in theschema."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "strong",
        "question": "What is strong?",
        "answer": "In this article, we will see the difference between strong and weak entities. ### What is a Strong Entity? A strong entity is not dependent on any other entity in theschema. A strong entity will always have a primary key. Strong entities are represented by a single rectangle."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "entities",
        "question": "What is entities?",
        "answer": "Entities are recorded in the database and must be distinguishable, i.e., easily recognized from the group. In this article, we will see the difference between strong and weak entities. Strong entities are represented by a single rectangle. The relationship of two strong entities is represented by a single diamond. Various strong entities, when combined together, create a strong entity set."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "weak",
        "question": "What is weak?",
        "answer": "In this article, we will see the difference between strong and weak entities. ### What is a Weak Entity? A weak entity is dependent on a strong entity to ensure its existence. Unlike a strong entity, a weak entity does not have any primary key. Aweak entityis represented by a double rectangle."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "represented",
        "question": "What is represented?",
        "answer": "Strong entities are represented by a single rectangle. The relationship of two strong entities is represented by a single diamond. Aweak entityis represented by a double rectangle. The relation between one strong and one weak entity is represented by a double diamond."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "difference",
        "question": "What is difference?",
        "answer": "In this article, we will see the difference between strong and weak entities. In ER models,strong entities can exist independently, whereasweak entities depend on strong entities.If you want to solidify your understanding of ER diagrams and entity relationships, theGATE CS Self-Paced Coursecovers database concepts in-depth, including practical exercises on ER modeling\n\n\n### Difference Between Strong and Weak Entity\n\n### Conclusion\nIt is important while designing a database to comprehend the difference between strong and weak entities. • DBMS\n• Difference Between\n• GATE CS"
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "relationship",
        "question": "What is relationship?",
        "answer": "The relationship of two strong entities is represented by a single diamond. This relationship is also known as anidentifying relationship. In ER models,strong entities can exist independently, whereasweak entities depend on strong entities.If you want to solidify your understanding of ER diagrams and entity relationships, theGATE CS Self-Paced Coursecovers database concepts in-depth, including practical exercises on ER modeling\n\n\n### Difference Between Strong and Weak Entity\n\n### Conclusion\nIt is important while designing a database to comprehend the difference between strong and weak entities."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "Entities are recorded in the database and must be distinguishable, i.e., easily recognized from the group. In ER models,strong entities can exist independently, whereasweak entities depend on strong entities.If you want to solidify your understanding of ER diagrams and entity relationships, theGATE CS Self-Paced Coursecovers database concepts in-depth, including practical exercises on ER modeling\n\n\n### Difference Between Strong and Weak Entity\n\n### Conclusion\nIt is important while designing a database to comprehend the difference between strong and weak entities. Its also facilitates help in placing these entities in the right category and defining them properly so that thedatabasecreated can have the best structure that fits and are efficient in making real-world scenarios."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "A strong entity will always have a primary key. Unlike a strong entity, a weak entity does not have any primary key. It instead has a partial discriminator key."
    },
    {
        "topic": "difference-between-strong-and-weak-entity",
        "subtopic": "attributes",
        "question": "What is attributes?",
        "answer": "An entity contains attributes, which describe that entity. That is, strong entities have all the necessaryattributesfor their existence and have unique attributes while weak entities have at least one attribute that depends on the attributes of their related strong entities to form an identification."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "fd1",
        "question": "What is fd1?",
        "answer": "Let FD1 and FD2 be two FD sets for a relation R.\n\n• If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. • If all FDs of FD2 can be derived from FDs present in FD1, we can say that FD1 ⊃ FD2. • If 1 and 2 both are true, FD1=FD2. A relation R(A,B,C,D) having two FD sets FD1 = {A->B, B->C, AB->D} and FD2 = {A->B, B->C, A->C, A->D}\n\nStep 1:Checking whether all FDs of FD1 are present in FD2\n\n• A->B in set FD1 is present in set FD2. • B->C in set FD1 is also present in set FD2."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "fd2",
        "question": "What is fd2?",
        "answer": "Let FD1 and FD2 be two FD sets for a relation R.\n\n• If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. • If all FDs of FD2 can be derived from FDs present in FD1, we can say that FD1 ⊃ FD2. • If 1 and 2 both are true, FD1=FD2. A relation R(A,B,C,D) having two FD sets FD1 = {A->B, B->C, AB->D} and FD2 = {A->B, B->C, A->C, A->D}\n\nStep 1:Checking whether all FDs of FD1 are present in FD2\n\n• A->B in set FD1 is present in set FD2. • B->C in set FD1 is also present in set FD2."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "• \n• \n• \n\nPre-Requisite:Functional Dependency,Finding Attribute Closure, and Candidate Keys using Functional Dependency\n\nFor understanding the equivalence of Functional Dependencies Sets (FD sets), the basic idea about Attribute Closure is given in this articleGiven a Relation with different FD sets for that relation, we have to find out whether one FD set is a subset of another or both are equal. ### How To Find the Relationship Between Two Functional Dependency Sets? Let FD1 and FD2 be two FD sets for a relation R.\n\n• If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. Now those two engineers give two different sets of functional dependencies. So, being an administrator we need to ensure that we must have a good set of Functional Dependencies."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "functional",
        "question": "What is functional?",
        "answer": "• \n• \n• \n\nPre-Requisite:Functional Dependency,Finding Attribute Closure, and Candidate Keys using Functional Dependency\n\nFor understanding the equivalence of Functional Dependencies Sets (FD sets), the basic idea about Attribute Closure is given in this articleGiven a Relation with different FD sets for that relation, we have to find out whether one FD set is a subset of another or both are equal. ### How To Find the Relationship Between Two Functional Dependency Sets? All these three cases can be shown using the Venn diagram:\n\nEquivalence of Functional Dependency\n\n\n### Why We Need to Compare Functional Dependencies? Now those two engineers give two different sets of functional dependencies. So, being an administrator we need to ensure that we must have a good set of Functional Dependencies."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "present",
        "question": "What is present?",
        "answer": "Let FD1 and FD2 be two FD sets for a relation R.\n\n• If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. • If all FDs of FD2 can be derived from FDs present in FD1, we can say that FD1 ⊃ FD2. A relation R(A,B,C,D) having two FD sets FD1 = {A->B, B->C, AB->D} and FD2 = {A->B, B->C, A->C, A->D}\n\nStep 1:Checking whether all FDs of FD1 are present in FD2\n\n• A->B in set FD1 is present in set FD2. • B->C in set FD1 is also present in set FD2. • AB->D is present in set FD1 but not directly in FD2 but we will check whether we can derive it or not."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "sets",
        "question": "What is sets?",
        "answer": "• \n• \n• \n\nPre-Requisite:Functional Dependency,Finding Attribute Closure, and Candidate Keys using Functional Dependency\n\nFor understanding the equivalence of Functional Dependencies Sets (FD sets), the basic idea about Attribute Closure is given in this articleGiven a Relation with different FD sets for that relation, we have to find out whether one FD set is a subset of another or both are equal. ### How To Find the Relationship Between Two Functional Dependency Sets? Let FD1 and FD2 be two FD sets for a relation R.\n\n• If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. Now those two engineers give two different sets of functional dependencies. • It can help to optimize database design by identifying equivalent sets of functional dependencies that can be used interchangeably."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "fds",
        "question": "What is fds?",
        "answer": "Let FD1 and FD2 be two FD sets for a relation R.\n\n• If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. • If all FDs of FD2 can be derived from FDs present in FD1, we can say that FD1 ⊃ FD2. A relation R(A,B,C,D) having two FD sets FD1 = {A->B, B->C, AB->D} and FD2 = {A->B, B->C, A->C, A->D}\n\nStep 1:Checking whether all FDs of FD1 are present in FD2\n\n• A->B in set FD1 is present in set FD2. As all FDs in set FD1 also hold in set FD2,FD2 ⊃ FD1is true. Step 2:Checking whether all FDs of FD2 are present in FD1\n\n• A->B in set FD2 is present in set FD1."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "dependencies",
        "question": "What is dependencies?",
        "answer": "• \n• \n• \n\nPre-Requisite:Functional Dependency,Finding Attribute Closure, and Candidate Keys using Functional Dependency\n\nFor understanding the equivalence of Functional Dependencies Sets (FD sets), the basic idea about Attribute Closure is given in this articleGiven a Relation with different FD sets for that relation, we have to find out whether one FD set is a subset of another or both are equal. All these three cases can be shown using the Venn diagram:\n\nEquivalence of Functional Dependency\n\n\n### Why We Need to Compare Functional Dependencies? Now those two engineers give two different sets of functional dependencies. So, being an administrator we need to ensure that we must have a good set of Functional Dependencies. To ensure this we require to study theequivalence of Functional Dependencies."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "fd",
        "question": "What is fd?",
        "answer": "• \n• \n• \n\nPre-Requisite:Functional Dependency,Finding Attribute Closure, and Candidate Keys using Functional Dependency\n\nFor understanding the equivalence of Functional Dependencies Sets (FD sets), the basic idea about Attribute Closure is given in this articleGiven a Relation with different FD sets for that relation, we have to find out whether one FD set is a subset of another or both are equal. Let FD1 and FD2 be two FD sets for a relation R.\n\n• If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. • If all FDs of FD2 can be derived from FDs present in FD1, we can say that FD1 ⊃ FD2. • If 1 and 2 both are true, FD1=FD2. ### Sample Questions\nQ.1 Let us take an example to show the relationship between two FD sets."
    },
    {
        "topic": "equivalence-of-functional-dependencies-sets",
        "subtopic": "hold",
        "question": "What is hold?",
        "answer": "It means that AB can functionally determine A, B, C, and D. So AB->D will also hold in set FD2. As all FDs in set FD1 also hold in set FD2,FD2 ⊃ FD1is true. It means that A can functionally determine A, B, C, and D. SO A->C will also hold in set FD1. It means that A can functionally determine A, B, C, and D. SO A->D will also hold in set FD1. As all FDs in set FD2 also hold in set FD1,FD1 ⊃ FD2is true."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "There are mainly three types of extended operators in Relational Algebra:\n\n• Join\n• Intersection (∩)\n• Divide(÷)\n\nExtended Operators\n\nWe will be explaining these types using the following tables:\n\nTable R:\n\nA\n\nB\n\n1\n\nx\n\n2\n\ny\n\n3\n\nz\n\nTable S:\n\nB\n\nC\n\nx\n\n10\n\ny\n\n20\n\nw\n\n30\n\n\n### Join\nJoinoperators inDBMSare used to combine data from two or more tables based on a related column between them. The most common types of Join operators are Inner Join and Outer Join. Inner Join\nInner joinreturns rows when there is a match in both tables. It is the most frequently used join in relational databases and ensures that only matching records from both tables are included. Inner joins can be categorized into more specific types based on how the join condition is defined:\n\n1."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "There are mainly three types of extended operators in Relational Algebra:\n\n• Join\n• Intersection (∩)\n• Divide(÷)\n\nExtended Operators\n\nWe will be explaining these types using the following tables:\n\nTable R:\n\nA\n\nB\n\n1\n\nx\n\n2\n\ny\n\n3\n\nz\n\nTable S:\n\nB\n\nC\n\nx\n\n10\n\ny\n\n20\n\nw\n\n30\n\n\n### Join\nJoinoperators inDBMSare used to combine data from two or more tables based on a related column between them. Inner Join\nInner joinreturns rows when there is a match in both tables. It is the most frequently used join in relational databases and ensures that only matching records from both tables are included. Example:Join tables R and S based on a condition θ. R⋈R.B=S.B∧R.A>1S\n\nOutput Table:\n\nA\n\nR.B\n\nS.B\n\nC\n\n2\n\ny\n\ny\n\n20\n\nNote:The selection operator only selects the required tuples but does not display them."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "outer",
        "question": "What is outer?",
        "answer": "The most common types of Join operators are Inner Join and Outer Join. Outer Join\nTheOuter Joinreturns all records from one table and the matched records from the other table. Outer joins can be further classified intoLeft Outer Join, Right Outer Join and Full Outer Join, based on which table’s records are prioritized in case of non-matching rows. Left Outer Join(⟕):A Left Outer Join in DBMS returns all records from the left table and the matching records from the right table. Left Outer Join\n\nExample:Join tables R and S on R.B = S.B and include all rows from R even if there is no match in S.\n\nR⟕S\n\nOutput Table:\n\n2."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "There are mainly three types of extended operators in Relational Algebra:\n\n• Join\n• Intersection (∩)\n• Divide(÷)\n\nExtended Operators\n\nWe will be explaining these types using the following tables:\n\nTable R:\n\nA\n\nB\n\n1\n\nx\n\n2\n\ny\n\n3\n\nz\n\nTable S:\n\nB\n\nC\n\nx\n\n10\n\ny\n\n20\n\nw\n\n30\n\n\n### Join\nJoinoperators inDBMSare used to combine data from two or more tables based on a related column between them. Inner Join\nInner joinreturns rows when there is a match in both tables. It is the most frequently used join in relational databases and ensures that only matching records from both tables are included. Example:Join tables R and S based on a condition θ. Example:Join tables R and S where R.B = S.B."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "records",
        "question": "What is records?",
        "answer": "It is the most frequently used join in relational databases and ensures that only matching records from both tables are included. Outer Join\nTheOuter Joinreturns all records from one table and the matched records from the other table. Outer joins can be further classified intoLeft Outer Join, Right Outer Join and Full Outer Join, based on which table’s records are prioritized in case of non-matching rows. Left Outer Join(⟕):A Left Outer Join in DBMS returns all records from the left table and the matching records from the right table. Right Outer Join(⟖):A Right Outer Join retrieves all records from the right table and the matching records from the left table."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "right",
        "question": "What is right?",
        "answer": "Outer joins can be further classified intoLeft Outer Join, Right Outer Join and Full Outer Join, based on which table’s records are prioritized in case of non-matching rows. Left Outer Join(⟕):A Left Outer Join in DBMS returns all records from the left table and the matching records from the right table. If there is no match in the right table, it still includes all rows from the left table with NULL values for the columns of the right table. Right Outer Join(⟖):A Right Outer Join retrieves all records from the right table and the matching records from the left table. If there is no match in the left table, the result will still include all rows from the right table, with NULL values for the left table’s columns."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "match",
        "question": "What is match?",
        "answer": "Inner Join\nInner joinreturns rows when there is a match in both tables. If there is no match, the row is excluded from the result. It is the most frequently used join in relational databases and ensures that only matching records from both tables are included. Natural Join(⋈):ANatural Joinautomatically combines two tables based on matching column names and data type, eliminating duplicate columns and providing a seamless result set. Outer Join\nTheOuter Joinreturns all records from one table and the matched records from the other table."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "rows",
        "question": "What is rows?",
        "answer": "Inner Join\nInner joinreturns rows when there is a match in both tables. Outer joins can be further classified intoLeft Outer Join, Right Outer Join and Full Outer Join, based on which table’s records are prioritized in case of non-matching rows. If there is no match in the right table, it still includes all rows from the left table with NULL values for the columns of the right table. Left Outer Join\n\nExample:Join tables R and S on R.B = S.B and include all rows from R even if there is no match in S.\n\nR⟕S\n\nOutput Table:\n\n2. If there is no match in the left table, the result will still include all rows from the right table, with NULL values for the left table’s columns."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "left",
        "question": "What is left?",
        "answer": "Outer joins can be further classified intoLeft Outer Join, Right Outer Join and Full Outer Join, based on which table’s records are prioritized in case of non-matching rows. Left Outer Join(⟕):A Left Outer Join in DBMS returns all records from the left table and the matching records from the right table. If there is no match in the right table, it still includes all rows from the left table with NULL values for the columns of the right table. Left Outer Join\n\nExample:Join tables R and S on R.B = S.B and include all rows from R even if there is no match in S.\n\nR⟕S\n\nOutput Table:\n\n2. Right Outer Join(⟖):A Right Outer Join retrieves all records from the right table and the matching records from the left table."
    },
    {
        "topic": "extended-operators-in-relational-algebra",
        "subtopic": "result",
        "question": "What is result?",
        "answer": "If there is no match, the row is excluded from the result. As values of two attributes will be equal in result of equijoin, only one attribute will be appeared in result. Natural Join(⋈):ANatural Joinautomatically combines two tables based on matching column names and data type, eliminating duplicate columns and providing a seamless result set. Natural Join will also return the similar attributes only once as their value will be same in resulting relation. R ⋈ S\n\nOutput Table:\n\nA\n\nB\n\nC\n\n1\n\nx\n\n10\n\n2\n\ny\n\n20\n\nNatural Join is by default inner join because the tuples which does not satisfy the conditions of join does not appear in result set."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "normal",
        "question": "What is normal?",
        "answer": "• \n• \n• \n\nNormalization in database management is the process of organizing data to minimize redundancy and dependency, ensuring efficiency, consistency, and integrity. Normal Forms are a set of guidelines in database normalization that define how to structure data in tables to reduce redundancy and improve integrity. Each normal form builds on the previous one, progressively organizing data more efficiently. ### Levels of Normalization\nThere are various levels of normalization. These are some of them:\n\n• First Normal Form (1NF)\n• Second Normal Form (2NF)\n• Third Normal Form (3NF)\n• Boyce-Codd Normal Form (BCNF)\n• Fourth Normal Form (4NF)\n• Fifth Normal Form (5NF)\n\nIn this article, we will discuss the First Normal Form (1NF)."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "form",
        "question": "What is form?",
        "answer": "Normal Forms are a set of guidelines in database normalization that define how to structure data in tables to reduce redundancy and improve integrity. Each normal form builds on the previous one, progressively organizing data more efficiently. These are some of them:\n\n• First Normal Form (1NF)\n• Second Normal Form (2NF)\n• Third Normal Form (3NF)\n• Boyce-Codd Normal Form (BCNF)\n• Fourth Normal Form (4NF)\n• Fifth Normal Form (5NF)\n\nIn this article, we will discuss the First Normal Form (1NF). ### First Normal Form\nIf a relation contains a composite or multi-valued attribute, it violates the first normal form, or the relation is in the first normal form if it does not contain any composite ormulti-valued attribute. A relation is in first normal form if every attribute in that relation is single-valued attribute."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nNormalization in database management is the process of organizing data to minimize redundancy and dependency, ensuring efficiency, consistency, and integrity. This involves structuring data into smaller, logically related tables and defining relationships between them to streamline data storage and retrieval. Normal Forms are a set of guidelines in database normalization that define how to structure data in tables to reduce redundancy and improve integrity. Each normal form builds on the previous one, progressively organizing data more efficiently. • The order in which data is stored does not matter."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "1nf",
        "question": "What is 1nf?",
        "answer": "These are some of them:\n\n• First Normal Form (1NF)\n• Second Normal Form (2NF)\n• Third Normal Form (3NF)\n• Boyce-Codd Normal Form (BCNF)\n• Fourth Normal Form (4NF)\n• Fifth Normal Form (5NF)\n\nIn this article, we will discuss the First Normal Form (1NF). ### Rules for First Normal Form (1NF) in DBMS\nTo follow the First Normal Form (1NF) in a database, these simple rules must be followed:\n\n1. If a cell contains more than one value, the table does not follow 1NF. • Example:A table with columns like [Writer 1], [Writer 2], and [Writer 3] for the same book ID is not in 1NF because it repeats the same type of information (writers). The Order of Data Doesn’t MatterIn 1NF, the order in which data is stored in a table doesn’t affect how the table works."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "column",
        "question": "What is column?",
        "answer": "• There is a unique name for every Attribute/Column. Every Column Should Have Single ValuesEach column in a table must contain only one value in a cell. • Example:A table with columns like [Writer 1], [Writer 2], and [Writer 3] for the same book ID is not in 1NF because it repeats the same type of information (writers). All Values in a Column Should Be of the Same TypeEach column must store the same type of data. You cannot mix different types of information in the same column."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "This involves structuring data into smaller, logically related tables and defining relationships between them to streamline data storage and retrieval. Normal Forms are a set of guidelines in database normalization that define how to structure data in tables to reduce redundancy and improve integrity. A table is in 1 NF if:\n\n• There are only Single Valued Attributes. Every Column Should Have Single ValuesEach column in a table must contain only one value in a cell. If a cell contains more than one value, the table does not follow 1NF."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "attribute",
        "question": "What is attribute?",
        "answer": "### First Normal Form\nIf a relation contains a composite or multi-valued attribute, it violates the first normal form, or the relation is in the first normal form if it does not contain any composite ormulti-valued attribute. A relation is in first normal form if every attribute in that relation is single-valued attribute. A table is in 1 NF if:\n\n• There are only Single Valued Attributes. • Attribute Domain does not change. • There is a unique name for every Attribute/Column."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "valued",
        "question": "What is valued?",
        "answer": "### First Normal Form\nIf a relation contains a composite or multi-valued attribute, it violates the first normal form, or the relation is in the first normal form if it does not contain any composite ormulti-valued attribute. A relation is in first normal form if every attribute in that relation is single-valued attribute. A table is in 1 NF if:\n\n• There are only Single Valued Attributes. ### Example:\nConsider the below COURSES Relation :\n\n\n\n• In the above table, Courses has a multi-valued attribute, so it is not in 1NF. The Below Table is in 1NF as there is no multi-valued attribute."
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "normalization",
        "question": "What is normalization?",
        "answer": "• \n• \n• \n\nNormalization in database management is the process of organizing data to minimize redundancy and dependency, ensuring efficiency, consistency, and integrity. Normal Forms are a set of guidelines in database normalization that define how to structure data in tables to reduce redundancy and improve integrity. ### Levels of Normalization\nThere are various levels of normalization. 1NF establishes the foundation for more complexnormalizationstrategies that further improve the correctness and efficiency of database systems by imposing atomic values and forbidding recurring groupings inside rows. • DBMS\n• GATE CS\n• DBMS-Normalization"
    },
    {
        "topic": "first-normal-form-1nf",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nNormalization in database management is the process of organizing data to minimize redundancy and dependency, ensuring efficiency, consistency, and integrity. Normal Forms are a set of guidelines in database normalization that define how to structure data in tables to reduce redundancy and improve integrity. ### Rules for First Normal Form (1NF) in DBMS\nTo follow the First Normal Form (1NF) in a database, these simple rules must be followed:\n\n1. • Example:If two columns have the same name, the database system may not know which one to use. ### Conclusion\nIn Conclusion, First Normal Form (1NF) is a key idea in relationaldatabasearchitecture."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "### Functional Dependency Set\nFunctional Dependency set or FD set of a relation is the set of all FDs present in the relation. For Example, FD set for relation STUDENT shown in table 1 is:\n\n\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, \n  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```\n\n### Attribute Closure\nAttribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it. How to find attribute closure of an attribute set? To find attribute closure of an attribute set:\n\n• Add elements of attribute set to the result set. • Recursively add elements to the result set which can be functionally determined from the elements of the result set."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "attribute",
        "question": "What is attribute?",
        "answer": "• \n• \n• \n\nFunctional dependency and attribute closure are essential for maintaining data integrity and building effective, organized, and normalized databases. ### Functional Dependency\nA functional dependency A->B in a relation holds if two tuples having the same value of attribute A must have the same value for attribute B. For Example, FD set for relation STUDENT shown in table 1 is:\n\n\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, \n  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```\n\n### Attribute Closure\nAttribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it. How to find attribute closure of an attribute set? To find attribute closure of an attribute set:\n\n• Add elements of attribute set to the result set."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "stud_no",
        "question": "What is stud_no?",
        "answer": "For Example, in relation to STUDENT shown in Table 1, Functional Dependencies\n\n\n```python\nSTUD_NO -> STUD_NAMEandSTUD_NO -> STUD_PHONEholdNote: A STUD_NO uniquely identifies a STUD_NAME and STUD_PHONE\n```\nbut\n\n\n```python\nSTUD_NAME->STUD_STATEdoes not holdNote :Two students can have same name (Like RAM in the below table) and hence same state\n```\nStudent Table\n\nHow to find Functional Dependencies for a Relation? • We know that STUD_NO is unique for each student. So STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY and STUD_NO -> STUD_AGE all will be true. For Example, FD set for relation STUDENT shown in table 1 is:\n\n\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, \n  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```\n\n### Attribute Closure\nAttribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it. Using FD set of table 1,attribute closurecan be determined as:\n\n\n```python\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_STATE)+ = {STUD_STATE, STUD_COUNTRY}\n```\n\n### Important Points About Attribute Closure\n• Helps to identify all possible attributes that can be derived from a set of given attributes."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "### Functional Dependency\nA functional dependency A->B in a relation holds if two tuples having the same value of attribute A must have the same value for attribute B. For Example, in relation to STUDENT shown in Table 1, Functional Dependencies\n\n\n```python\nSTUD_NO -> STUD_NAMEandSTUD_NO -> STUD_PHONEholdNote: A STUD_NO uniquely identifies a STUD_NAME and STUD_PHONE\n```\nbut\n\n\n```python\nSTUD_NAME->STUD_STATEdoes not holdNote :Two students can have same name (Like RAM in the below table) and hence same state\n```\nStudent Table\n\nHow to find Functional Dependencies for a Relation? Functional Dependencies in a relation are dependent on the domain of the relation. Consider the STUDENT relation given in Table 1. • For relation STUDENT_COURSE, COURSE_NO->COURSE_NAME will be true as two records with same COURSE_NO will have same COURSE_NAME."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "attributes",
        "question": "What is attributes?",
        "answer": "For Example, FD set for relation STUDENT shown in table 1 is:\n\n\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, \n  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```\n\n### Attribute Closure\nAttribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it. Using FD set of table 1,attribute closurecan be determined as:\n\n\n```python\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_STATE)+ = {STUD_STATE, STUD_COUNTRY}\n```\n\n### Important Points About Attribute Closure\n• Helps to identify all possible attributes that can be derived from a set of given attributes. • Helps in database design by showing how attributes and tables are related, which can improve query performance. • Become complex to manage as the number of attributes and tables increases. • If attribute closure of an attribute set contains all attributes of relation, the attribute set will besuper keyof the relation."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "functional",
        "question": "What is functional?",
        "answer": "• \n• \n• \n\nFunctional dependency and attribute closure are essential for maintaining data integrity and building effective, organized, and normalized databases. ### Functional Dependency\nA functional dependency A->B in a relation holds if two tuples having the same value of attribute A must have the same value for attribute B. For Example, in relation to STUDENT shown in Table 1, Functional Dependencies\n\n\n```python\nSTUD_NO -> STUD_NAMEandSTUD_NO -> STUD_PHONEholdNote: A STUD_NO uniquely identifies a STUD_NAME and STUD_PHONE\n```\nbut\n\n\n```python\nSTUD_NAME->STUD_STATEdoes not holdNote :Two students can have same name (Like RAM in the below table) and hence same state\n```\nStudent Table\n\nHow to find Functional Dependencies for a Relation? Functional Dependencies in a relation are dependent on the domain of the relation. ### Important Points About Functional Dependencies\n• Ensure data consistency and integrity across the database."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "fd",
        "question": "What is fd?",
        "answer": "### Functional Dependency Set\nFunctional Dependency set or FD set of a relation is the set of all FDs present in the relation. For Example, FD set for relation STUDENT shown in table 1 is:\n\n\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, \n  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```\n\n### Attribute Closure\nAttribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it. Using FD set of table 1,attribute closurecan be determined as:\n\n\n```python\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_STATE)+ = {STUD_STATE, STUD_COUNTRY}\n```\n\n### Important Points About Attribute Closure\n• Helps to identify all possible attributes that can be derived from a set of given attributes. For Example, using FD set of table 1\n\n(STUD_NO, STUD_NAME)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n\n(STUD_NO, STUD_NAME) will be super key but not candidate key because its subset (STUD_NO)+ is equal to all attributes of the relation. ### Q.2:How to check whether an FD can be derived from a given FD set?"
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "dependencies",
        "question": "What is dependencies?",
        "answer": "For Example, in relation to STUDENT shown in Table 1, Functional Dependencies\n\n\n```python\nSTUD_NO -> STUD_NAMEandSTUD_NO -> STUD_PHONEholdNote: A STUD_NO uniquely identifies a STUD_NAME and STUD_PHONE\n```\nbut\n\n\n```python\nSTUD_NAME->STUD_STATEdoes not holdNote :Two students can have same name (Like RAM in the below table) and hence same state\n```\nStudent Table\n\nHow to find Functional Dependencies for a Relation? Functional Dependencies in a relation are dependent on the domain of the relation. ### Important Points About Functional Dependencies\n• Ensure data consistency and integrity across the database. • Identifying dependencies can be complex for large databases. • Overly restrictive dependencies may slow queries or cause inconsistencies."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "closure",
        "question": "What is closure?",
        "answer": "• \n• \n• \n\nFunctional dependency and attribute closure are essential for maintaining data integrity and building effective, organized, and normalized databases. For Example, FD set for relation STUDENT shown in table 1 is:\n\n\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, \n  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```\n\n### Attribute Closure\nAttribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it. How to find attribute closure of an attribute set? To find attribute closure of an attribute set:\n\n• Add elements of attribute set to the result set. Using FD set of table 1,attribute closurecan be determined as:\n\n\n```python\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_STATE)+ = {STUD_STATE, STUD_COUNTRY}\n```\n\n### Important Points About Attribute Closure\n• Helps to identify all possible attributes that can be derived from a set of given attributes."
    },
    {
        "topic": "functional-dependency-and-attribute-closure",
        "subtopic": "stud_state",
        "question": "What is stud_state?",
        "answer": "For Example, in relation to STUDENT shown in Table 1, Functional Dependencies\n\n\n```python\nSTUD_NO -> STUD_NAMEandSTUD_NO -> STUD_PHONEholdNote: A STUD_NO uniquely identifies a STUD_NAME and STUD_PHONE\n```\nbut\n\n\n```python\nSTUD_NAME->STUD_STATEdoes not holdNote :Two students can have same name (Like RAM in the below table) and hence same state\n```\nStudent Table\n\nHow to find Functional Dependencies for a Relation? So STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY and STUD_NO -> STUD_AGE all will be true. • Similarly, STUD_STATE->STUD_COUNTRY will be true as if two records have same STUD_STATE, they will have same STUD_COUNTRY as well. For Example, FD set for relation STUDENT shown in table 1 is:\n\n\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, \n  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```\n\n### Attribute Closure\nAttribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it. Using FD set of table 1,attribute closurecan be determined as:\n\n\n```python\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_STATE)+ = {STUD_STATE, STUD_COUNTRY}\n```\n\n### Important Points About Attribute Closure\n• Helps to identify all possible attributes that can be derived from a set of given attributes."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "entity",
        "question": "What is entity?",
        "answer": "### Generalization\nGeneralization is the process of extracting common properties from a set of entities and creating a generalized entity from it. It is a bottom-up approach in which two or more entities can be generalized to a higher-level entity if they have some attributes in common. For Example, STUDENT and FACULTY can be generalized to a higher-level entity called PERSON as shown in Figure 1. In this case, common attributes like P_NAME, and P_ADD become part of a higherentity(PERSON), and specializedattributeslike S_FEE become part of a specialized entity (STUDENT). Generalization\n\n\n### Specialization\nIn specialization, an entity is divided into sub-entities based on its characteristics."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "relationship",
        "question": "What is relationship?",
        "answer": "It ensures that subclasses adhere to the same participation rules in relationships, although attributes and relationships themselves are inherited differently. In diagram Vehicle entity has an relationship with Cycle entity, but it would not automatically acquire the relationship itself with the Vehicle entity. Participation inheritance only refers to the inheritance of participation constraints, not the actual relationships between entities. Example of Relation\n\n\n### Aggregation\nAn ER diagram is not capable of representing the relationship between an entity and a relationship which may be required in some scenarios. In those cases, a relationship with its corresponding entities is aggregated into a higher-level entity."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "level",
        "question": "What is level?",
        "answer": "It is a bottom-up approach in which two or more entities can be generalized to a higher-level entity if they have some attributes in common. For Example, STUDENT and FACULTY can be generalized to a higher-level entity called PERSON as shown in Figure 1. It is a top-down approach where the higher-level entity is specialized into two or more lower-levelentities. Specialization\n\nInheritance:It is an important feature of generalization and specialization\n\n• Attribute inheritance: It allows lower level entities to inherit the attributes of higher level entities and vice versa. • Participation inheritance:Participation inheritance in ER modeling refers to the inheritance of participation constraints from a higher-level entity (superclass) to a lower-level entity (subclass)."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "inheritance",
        "question": "What is inheritance?",
        "answer": "Specialization\n\nInheritance:It is an important feature of generalization and specialization\n\n• Attribute inheritance: It allows lower level entities to inherit the attributes of higher level entities and vice versa. In diagramCarentity is an inheritance ofVehicleentity ,So Car can acquire attributes ofVehicle.Example:car can acquireModelattribute ofVehicle. • Participation inheritance:Participation inheritance in ER modeling refers to the inheritance of participation constraints from a higher-level entity (superclass) to a lower-level entity (subclass). Participation inheritance only refers to the inheritance of participation constraints, not the actual relationships between entities."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "aggregation",
        "question": "What is aggregation?",
        "answer": "• \n• \n• \n\nUsing the ER model for bigger data creates a lot of complexity while designing a database model, So in order to minimize the complexity Generalization, Specialization, and Aggregation were introduced in the ER model. In this article we will cover the concept of Generalization, Specialization, and Aggregation with example. Example of Relation\n\n\n### Aggregation\nAn ER diagram is not capable of representing the relationship between an entity and a relationship which may be required in some scenarios. Aggregation is an abstraction through which we can represent relationships as higher-level entity sets. Using aggregation, WORKS_FOR relationship with its entities EMPLOYEE and PROJECT is aggregated into a single entity and relationship REQUIRE is created between the aggregated entity and MACHINERY."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "entities",
        "question": "What is entities?",
        "answer": "### Generalization\nGeneralization is the process of extracting common properties from a set of entities and creating a generalized entity from it. It is a bottom-up approach in which two or more entities can be generalized to a higher-level entity if they have some attributes in common. Generalization\n\n\n### Specialization\nIn specialization, an entity is divided into sub-entities based on its characteristics. It is a top-down approach where the higher-level entity is specialized into two or more lower-levelentities. Specialization\n\nInheritance:It is an important feature of generalization and specialization\n\n• Attribute inheritance: It allows lower level entities to inherit the attributes of higher level entities and vice versa."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "higher",
        "question": "What is higher?",
        "answer": "It is a bottom-up approach in which two or more entities can be generalized to a higher-level entity if they have some attributes in common. For Example, STUDENT and FACULTY can be generalized to a higher-level entity called PERSON as shown in Figure 1. In this case, common attributes like P_NAME, and P_ADD become part of a higherentity(PERSON), and specializedattributeslike S_FEE become part of a specialized entity (STUDENT). It is a top-down approach where the higher-level entity is specialized into two or more lower-levelentities. become part of a higher entity (EMPLOYEE), and specialized attributes like TES_TYPE become part of a specialized entity (TESTER)."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "generalization",
        "question": "What is generalization?",
        "answer": "• \n• \n• \n\nUsing the ER model for bigger data creates a lot of complexity while designing a database model, So in order to minimize the complexity Generalization, Specialization, and Aggregation were introduced in the ER model. In this article we will cover the concept of Generalization, Specialization, and Aggregation with example. ### Generalization\nGeneralization is the process of extracting common properties from a set of entities and creating a generalized entity from it. Generalization is also called as ‘ Bottom-up approach”. Generalization\n\n\n### Specialization\nIn specialization, an entity is divided into sub-entities based on its characteristics."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "attributes",
        "question": "What is attributes?",
        "answer": "It is a bottom-up approach in which two or more entities can be generalized to a higher-level entity if they have some attributes in common. In this case, common attributes like P_NAME, and P_ADD become part of a higherentity(PERSON), and specializedattributeslike S_FEE become part of a specialized entity (STUDENT). In this case, common attributes like E_NAME, E_SAL, etc. become part of a higher entity (EMPLOYEE), and specialized attributes like TES_TYPE become part of a specialized entity (TESTER). Specialization\n\nInheritance:It is an important feature of generalization and specialization\n\n• Attribute inheritance: It allows lower level entities to inherit the attributes of higher level entities and vice versa."
    },
    {
        "topic": "generalization-specialization-and-aggregation-in-er-model",
        "subtopic": "specialization",
        "question": "What is specialization?",
        "answer": "• \n• \n• \n\nUsing the ER model for bigger data creates a lot of complexity while designing a database model, So in order to minimize the complexity Generalization, Specialization, and Aggregation were introduced in the ER model. In this article we will cover the concept of Generalization, Specialization, and Aggregation with example. Generalization\n\n\n### Specialization\nIn specialization, an entity is divided into sub-entities based on its characteristics. Specialization is also called as ” Top-Down approch”. Specialization\n\nInheritance:It is an important feature of generalization and specialization\n\n• Attribute inheritance: It allows lower level entities to inherit the attributes of higher level entities and vice versa."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nIn SQL, grouping and aggregating data are essential techniques for analyzing datasets. When dealing with large volumes of data, we often need to summarize or categorize it into meaningful groups. In this article, we will explain how togroupandaggregatedata inSQLto make our queries more efficient and insightful. ### Grouping and Aggregating Data\nGrouping Data: TheGROUP BYclause in SQL is used to arrangeidentical datainto groups based ononeormore columns. Once data is grouped, aggregate functions can be used to summarize the information within those groups."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "price",
        "question": "What is price?",
        "answer": "This table containssales datafor different places, where each sale is associated with alocationand a price. TheOrderedtablestores data onproducts sold, including thelocationandpriceofeach item sold. we will use theSUM()function along with theGROUP BYclauseto calculate thetotal sales price for each place. Query:\n\n\n```python\nSELECT place, SUM(price) AS Total_RevenueFROM OrderedGROUP BY place;\n```\nOutput:\n\n\n\n\n### Example 3: Using Multiple Aggregate Functions\nSQL allows us to use multipleaggregate functionsin a single query. In this example, we will use theAVG(),MAX(), andMIN()functions to calculate theaverage,maximum, andminimum pricefor sales in each place."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "functions",
        "question": "What is functions?",
        "answer": "The combination of theGROUP BYclause and aggregate functions likeCOUNT(),SUM(),AVG(),MIN(), andMAX()makes it easy to perform such tasks. Once data is grouped, aggregate functions can be used to summarize the information within those groups. Aggregating Data: Aggregate functions perform calculations onmultiple rowsof data and return a single result. Commonaggregate functionsincludeCOUNT(),SUM(),AVG(),MIN(), andMAX(). Query:\n\n\n```python\nSELECT place, SUM(price) AS Total_RevenueFROM OrderedGROUP BY place;\n```\nOutput:\n\n\n\n\n### Example 3: Using Multiple Aggregate Functions\nSQL allows us to use multipleaggregate functionsin a single query."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nIn SQL, grouping and aggregating data are essential techniques for analyzing datasets. In this article, we will explain how togroupandaggregatedata inSQLto make our queries more efficient and insightful. ### Grouping and Aggregating Data\nGrouping Data: TheGROUP BYclause in SQL is used to arrangeidentical datainto groups based ononeormore columns. Query:\n\n\n```python\nSELECT place, SUM(price) AS Total_RevenueFROM OrderedGROUP BY place;\n```\nOutput:\n\n\n\n\n### Example 3: Using Multiple Aggregate Functions\nSQL allows us to use multipleaggregate functionsin a single query. Query:\n\n\n```python\nSELECT place,AVG(price) AS Avg_Price,MAX(price) AS Max_Price,MIN(price) AS Min_PriceFROM OrderedGROUP BY place;\n```\nOutput:\n\n\n### Conclusion\nGroupingandaggregatingdata inSQLare powerful techniques for summarizinglarge datasets."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "place",
        "question": "What is place?",
        "answer": "This table containssales datafor different places, where each sale is associated with alocationand a price. ORDERED Table\n\nLet’s say we want to calculate the total revenue from sales in different places. we will use theSUM()function along with theGROUP BYclauseto calculate thetotal sales price for each place. Query:\n\n\n```python\nSELECT place, SUM(price) AS Total_RevenueFROM OrderedGROUP BY place;\n```\nOutput:\n\n\n\n\n### Example 3: Using Multiple Aggregate Functions\nSQL allows us to use multipleaggregate functionsin a single query. In this example, we will use theAVG(),MAX(), andMIN()functions to calculate theaverage,maximum, andminimum pricefor sales in each place."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "aggregate",
        "question": "What is aggregate?",
        "answer": "The combination of theGROUP BYclause and aggregate functions likeCOUNT(),SUM(),AVG(),MIN(), andMAX()makes it easy to perform such tasks. In this article, we will explain how togroupandaggregatedata inSQLto make our queries more efficient and insightful. Once data is grouped, aggregate functions can be used to summarize the information within those groups. Aggregating Data: Aggregate functions perform calculations onmultiple rowsof data and return a single result. Commonaggregate functionsincludeCOUNT(),SUM(),AVG(),MIN(), andMAX()."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "These help us get summaries liketotals,averages, andcountsfor different categories or groups\n\nSyntax:\n\nSELECT column1, column2, …, AGGREGATE_FUNCTION(column3)FROM table_nameWHERE conditionGROUP BY column1, column2, …HAVING conditionORDER BY column1;\n\n\n### Example 1: Grouping Data and Counting Occurrences\nLet’s consider theSales_Ordertable in aSalesdatabase. This table stores information aboutsales orders, including theclient number,order date, and order status.TheSales_Ordertable contains details about orders made byclients, including theirorder status. Sales_Order Table\n\n\n\nLet’s say we want to count how many orders are still “In Process” for each client. ### Example 2: Summing Values in Groups\nNow, let’s move to another table calledOrdered. This table containssales datafor different places, where each sale is associated with alocationand a price."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "groups",
        "question": "What is groups?",
        "answer": "When dealing with large volumes of data, we often need to summarize or categorize it into meaningful groups. ### Grouping and Aggregating Data\nGrouping Data: TheGROUP BYclause in SQL is used to arrangeidentical datainto groups based ononeormore columns. Once data is grouped, aggregate functions can be used to summarize the information within those groups. These help us get summaries liketotals,averages, andcountsfor different categories or groups\n\nSyntax:\n\nSELECT column1, column2, …, AGGREGATE_FUNCTION(column3)FROM table_nameWHERE conditionGROUP BY column1, column2, …HAVING conditionORDER BY column1;\n\n\n### Example 1: Grouping Data and Counting Occurrences\nLet’s consider theSales_Ordertable in aSalesdatabase. ### Example 2: Summing Values in Groups\nNow, let’s move to another table calledOrdered."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "process",
        "question": "What is process?",
        "answer": "Sales_Order Table\n\n\n\nLet’s say we want to count how many orders are still “In Process” for each client. To do this, we use theCOUNT()function along withGROUP BY\n\nQuery:\n\n\n```python\nSELECT CLIENTNO, COUNT(ORDERSTATUS)AS Order_In_Processfrom Sales_Order WHEREORDERSTATUS='In Process' GROUP BY CLIENTNO;\n```\nOutput:\n\nExplanation:\n\nIn this case, we grouped the data byCLIENTNOand counted how many orders are in the “In Process” status for each client. From this output, we can easily see that clientsC00001andC00006each have one order that is still “In Process“."
    },
    {
        "topic": "how-to-group-and-aggregate-data-using-sql",
        "subtopic": "sum",
        "question": "What is sum?",
        "answer": "When dealing with large volumes of data, we often need to summarize or categorize it into meaningful groups. The combination of theGROUP BYclause and aggregate functions likeCOUNT(),SUM(),AVG(),MIN(), andMAX()makes it easy to perform such tasks. Once data is grouped, aggregate functions can be used to summarize the information within those groups. Commonaggregate functionsincludeCOUNT(),SUM(),AVG(),MIN(), andMAX(). These help us get summaries liketotals,averages, andcountsfor different categories or groups\n\nSyntax:\n\nSELECT column1, column2, …, AGGREGATE_FUNCTION(column3)FROM table_nameWHERE conditionGROUP BY column1, column2, …HAVING conditionORDER BY column1;\n\n\n### Example 1: Grouping Data and Counting Occurrences\nLet’s consider theSales_Ordertable in aSalesdatabase."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "If two or more independent relations are kept in a single relation or we can say multivalue dependency occurs when the presence of one or more rows in a table implies the presence of one or more other rows in that same table. Put another way, two attributes (or columns) in a table are independent of one another, but both depend on a third attribute. For a dependency A -> B, if for a single value of A, multiple values of B exist, then the table may have a multi-valued dependency. The table should have at least 3 attributes and B and C should be independent for A ->> B multivalued dependency. The table should not have any Multi-valued Dependency."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "Multivalued dependencies are handled by 4NF, whereas join dependencies are handled by 5NF. Table R1 X R2\n\nMultivalued dependencies (MVD) are:\n\n\n```python\nSID->->CID; SID->->CNAME; SNAME->->CNAME\n```\n\n### Join Dependency\nJoin decomposition is a further generalization of Multivalued dependencies. If the join of R1 and R2 over C is equal to relation R then we can say that a join dependency (JD) exists, where R1 and R2 are the decomposition R1(A, B, C) and R2(C, D) of a given relations R (A, B, C, D). Alternatively, R1 and R2 are a lossless decomposition of R. A JD ⋈ {R1, R2, …, Rn} is said to hold over a relation R if R1, R2, ….., Rn is a lossless-join decomposition. The *(A, B, C, D), (C, D) will be a JD of R if the join of joins attribute is equal to the relation R. Here, *(R1, R2, R3) is used to indicate that relation R1, R2, R3 and so on are a JD of R. Let R is a relation schema R1, R2, R3……..Rn be the decomposition of R. r( R ) is said to satisfy join dependency if and only if\n\nJoint Dependency\n\nExample:\n\nTable R1\n\n\n```python\nCompany->->Product\n```\nTable R2\n\n\n```python\nAgent->->Company\n```\nTable R3\n\n\n```python\nAgent->->Product\n```\nTable R1⋈R2⋈R3\n\n\n```python\nAgent->->Product\n```\n\n### Fifth Normal Form/Projected Normal Form (5NF)\nA relation R is inFifth Normal Formif and only if everyone joins dependency in R is implied by the candidate keys of R. A relation decomposed into two relations must havelossless joinProperty, which ensures that no spurious or extra tuples are generated when relations are reunited through a natural join."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "dependency",
        "question": "What is dependency?",
        "answer": "If two or more independent relations are kept in a single relation or we can say multivalue dependency occurs when the presence of one or more rows in a table implies the presence of one or more other rows in that same table. Amultivalued dependencyalways requires at least three attributes because it consists of at least two attributes that are dependent on a third. For a dependency A -> B, if for a single value of A, multiple values of B exist, then the table may have a multi-valued dependency. The table should have at least 3 attributes and B and C should be independent for A ->> B multivalued dependency. Example:\n\n\n```python\nPerson->-> mobile,Person ->-> food_likes\n```\nThis is read as “person multi determines mobile” and “person multi determines food_likes.”Note that a functional dependency is a special case of multivalued dependency."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "r2",
        "question": "What is r2?",
        "answer": "Example:Consider the database table of a class that has two relations R1 contains student ID(SID) and student name (SNAME) and R2 contains course id(CID) and course name (CNAME). Table R1\n\nTable R2\n\nWhen their cross-product is done it resulted in multivalued dependencies. Table R1 X R2\n\nMultivalued dependencies (MVD) are:\n\n\n```python\nSID->->CID; SID->->CNAME; SNAME->->CNAME\n```\n\n### Join Dependency\nJoin decomposition is a further generalization of Multivalued dependencies. If the join of R1 and R2 over C is equal to relation R then we can say that a join dependency (JD) exists, where R1 and R2 are the decomposition R1(A, B, C) and R2(C, D) of a given relations R (A, B, C, D). Alternatively, R1 and R2 are a lossless decomposition of R. A JD ⋈ {R1, R2, …, Rn} is said to hold over a relation R if R1, R2, ….., Rn is a lossless-join decomposition."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "r1",
        "question": "What is r1?",
        "answer": "Example:Consider the database table of a class that has two relations R1 contains student ID(SID) and student name (SNAME) and R2 contains course id(CID) and course name (CNAME). Table R1\n\nTable R2\n\nWhen their cross-product is done it resulted in multivalued dependencies. Table R1 X R2\n\nMultivalued dependencies (MVD) are:\n\n\n```python\nSID->->CID; SID->->CNAME; SNAME->->CNAME\n```\n\n### Join Dependency\nJoin decomposition is a further generalization of Multivalued dependencies. If the join of R1 and R2 over C is equal to relation R then we can say that a join dependency (JD) exists, where R1 and R2 are the decomposition R1(A, B, C) and R2(C, D) of a given relations R (A, B, C, D). Alternatively, R1 and R2 are a lossless decomposition of R. A JD ⋈ {R1, R2, …, Rn} is said to hold over a relation R if R1, R2, ….., Rn is a lossless-join decomposition."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "If two or more independent relations are kept in a single relation or we can say multivalue dependency occurs when the presence of one or more rows in a table implies the presence of one or more other rows in that same table. ### Properties\nA relation R is in 4NF if and only if the following conditions are satisfied:\n\n\n```python\n1. Example:Consider the database table of a class that has two relations R1 contains student ID(SID) and student name (SNAME) and R2 contains course id(CID) and course name (CNAME). If the join of R1 and R2 over C is equal to relation R then we can say that a join dependency (JD) exists, where R1 and R2 are the decomposition R1(A, B, C) and R2(C, D) of a given relations R (A, B, C, D). Alternatively, R1 and R2 are a lossless decomposition of R. A JD ⋈ {R1, R2, …, Rn} is said to hold over a relation R if R1, R2, ….., Rn is a lossless-join decomposition."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "normal",
        "question": "What is normal?",
        "answer": "• \n• \n• \n\nTwo of the highest levels of database normalization are the fourth normal form (4NF) and the fifth normal form (5NF). ### Fourth Normal Form (4NF)\nThe Fourth Normal Form (4NF) is a level of database normalization where there are no non-trivial multivalued dependencies other than a candidate key. It builds on the first three normal forms (1NF, 2NF, and 3NF) and theBoyce-Codd Normal Form (BCNF). It should be in the Boyce-Codd Normal Form (BCNF).2. ```\nA table with a multivalued dependency violates the normalization standard of the Fourth Normal Form (4NF) because it creates unnecessary redundancies and can contribute to inconsistent data."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "4nf",
        "question": "What is 4nf?",
        "answer": "• \n• \n• \n\nTwo of the highest levels of database normalization are the fourth normal form (4NF) and the fifth normal form (5NF). Multivalued dependencies are handled by 4NF, whereas join dependencies are handled by 5NF. ### Fourth Normal Form (4NF)\nThe Fourth Normal Form (4NF) is a level of database normalization where there are no non-trivial multivalued dependencies other than a candidate key. ### Properties\nA relation R is in 4NF if and only if the following conditions are satisfied:\n\n\n```python\n1. ```\nA table with a multivalued dependency violates the normalization standard of the Fourth Normal Form (4NF) because it creates unnecessary redundancies and can contribute to inconsistent data."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "form",
        "question": "What is form?",
        "answer": "• \n• \n• \n\nTwo of the highest levels of database normalization are the fourth normal form (4NF) and the fifth normal form (5NF). ### Fourth Normal Form (4NF)\nThe Fourth Normal Form (4NF) is a level of database normalization where there are no non-trivial multivalued dependencies other than a candidate key. It builds on the first three normal forms (1NF, 2NF, and 3NF) and theBoyce-Codd Normal Form (BCNF). It should be in the Boyce-Codd Normal Form (BCNF).2. ```\nA table with a multivalued dependency violates the normalization standard of the Fourth Normal Form (4NF) because it creates unnecessary redundancies and can contribute to inconsistent data."
    },
    {
        "topic": "introduction-of-4th-and-5th-normal-form-in-dbms",
        "subtopic": "multivalued",
        "question": "What is multivalued?",
        "answer": "Multivalued dependencies are handled by 4NF, whereas join dependencies are handled by 5NF. Amultivalued dependencyalways requires at least three attributes because it consists of at least two attributes that are dependent on a third. The table should have at least 3 attributes and B and C should be independent for A ->> B multivalued dependency. Example:\n\n\n```python\nPerson->-> mobile,Person ->-> food_likes\n```\nThis is read as “person multi determines mobile” and “person multi determines food_likes.”Note that a functional dependency is a special case of multivalued dependency. ### Fourth Normal Form (4NF)\nThe Fourth Normal Form (4NF) is a level of database normalization where there are no non-trivial multivalued dependencies other than a candidate key."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nNormalization is an important process in database design that helps improve the database’s efficiency, consistency, and accuracy. It makes it easier to manage and maintain the data and ensures that the database is adaptable to changing business needs. • Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places). • Data redundancy unnecessarily increases the size of the database as the same data is repeated in many places. • In the relational model, there exist standard methods to quantify how efficient a databases is."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nNormalization is an important process in database design that helps improve the database’s efficiency, consistency, and accuracy. It makes it easier to manage and maintain the data and ensures that the database is adaptable to changing business needs. • Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places). • Data redundancy unnecessarily increases the size of the database as the same data is repeated in many places. • In the relational model, there exist standard methods to quantify how efficient a databases is."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "normalization",
        "question": "What is normalization?",
        "answer": "• \n• \n• \n\nNormalization is an important process in database design that helps improve the database’s efficiency, consistency, and accuracy. • Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places). • Normalization generally involves splitting a table into multiple ones which must be linked each time a query is made requiring data from the split tables. ### Why do we need Normalization? Normalization consists of a set of procedures that assist you in developing an effective database structure."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "normal",
        "question": "What is normal?",
        "answer": "• \n• \n• \n\nNormalization is an important process in database design that helps improve the database’s efficiency, consistency, and accuracy. • Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places). These methods are callednormal formsand there are algorithms to covert a given database into normal forms. • Normalization generally involves splitting a table into multiple ones which must be linked each time a query is made requiring data from the split tables. ### Why do we need Normalization?"
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "anomalies",
        "question": "What is anomalies?",
        "answer": "The primary objective for normalizing the relations is to eliminate the below anomalies. Failure to reduce anomalies results in data redundancy, which may threaten data integrity and cause additional issues as the database increases. • Insertion Anomalies:Insertion anomalies occur when it is not possible to insert data into a database because the required fields are missing or because the data is incomplete. • Deletion anomalies:Deletion anomalies occur when deleting a record from a database and can result in the unintentional loss of data. • Updation anomalies:Updation anomalies occur when modifying data in a database and can result in inconsistencies or errors."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "• Normalization generally involves splitting a table into multiple ones which must be linked each time a query is made requiring data from the split tables. Before Normalization: The table is prone to redundancy and anomalies (insertion, update, and deletion).After Normalization: The data is divided into logical tables to ensure consistency, avoid redundancy and remove anomalies making the database efficient and reliable. Once we figure out dependencies, we split tables to make sure that only closely related data is together in a table. When we split tables, we need to ensure that we do not loose information. By breaking down a complex data structure into simpler tables, normalization makes it easier to manage the data, update it, and retrieve it."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "redundancy",
        "question": "What is redundancy?",
        "answer": "• Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places). • Data redundancy unnecessarily increases the size of the database as the same data is repeated in many places. Failure to reduce anomalies results in data redundancy, which may threaten data integrity and cause additional issues as the database increases. Before Normalization: The table is prone to redundancy and anomalies (insertion, update, and deletion).After Normalization: The data is divided into logical tables to ensure consistency, avoid redundancy and remove anomalies making the database efficient and reliable. Dependency Preserving DecompositionLossless Decomposition in DBMS\n\n\n### Features of Database Normalization\n• Elimination of Data Redundancy:One of the main features of normalization is to eliminate the data redundancy that can occur in a database."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "form",
        "question": "What is form?",
        "answer": "These methods are callednormal formsand there are algorithms to covert a given database into normal forms. For example, if a database contains information about customers and orders, deleting a customer record may also delete all the orders associated with that customer. For example, if a database contains information about employees and their salaries, updating an employee’s salary in one record but not in all related records could lead to incorrect calculations and reporting. ### Prerequisites for Understanding Database Normalization\nIn database normalization, we mainly put only tightly related information together. Without keys, it would be hard to tell one record apart from another, especially if some information (like names) is the same."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "helps",
        "question": "What is helps?",
        "answer": "• \n• \n• \n\nNormalization is an important process in database design that helps improve the database’s efficiency, consistency, and accuracy. Functional dependencyhelps define the relationships between data in a table. Functional dependency helps us understand these rules and connections, which are crucial for organizing data properly. Normalization helps in reducing or eliminating this redundancy, which can improve the efficiency and consistency of the database. • Ensuring Data Consistency:Normalization helps in ensuring that the data in the database is consistent and accurate."
    },
    {
        "topic": "introduction-of-database-normalization",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "It makes it easier to manage and maintain the data and ensures that the database is adaptable to changing business needs. • Normalization generally involves splitting a table into multiple ones which must be linked each time a query is made requiring data from the split tables. Before Normalization: The table is prone to redundancy and anomalies (insertion, update, and deletion).After Normalization: The data is divided into logical tables to ensure consistency, avoid redundancy and remove anomalies making the database efficient and reliable. Keysare like unique identifiers in a table. For example, in a table of students, the student ID is a key because it uniquely identifies each student."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nADatabase Management System (DBMS)is a software solution designed to efficientlymanage,organize, andretrieve datain a structured manner. It serves as a critical component inmodern computing,enablingorganizations tostore,manipulate, and secure their data effectively. From small applications to enterprise systems, DBMS plays a vital role in supportingdata-driven decision-makingand operational efficiency. ADBMSis a system that allows users tocreate,modify, and query databases while ensuringdata integrity,security, and efficient data access. Unliketraditional file systems, DBMS minimizesdata redundancy, prevents inconsistencies, and simplifies data management with features like concurrent access andbackup mechanisms."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "dbms",
        "question": "What is dbms?",
        "answer": "• \n• \n• \n\nADatabase Management System (DBMS)is a software solution designed to efficientlymanage,organize, andretrieve datain a structured manner. From small applications to enterprise systems, DBMS plays a vital role in supportingdata-driven decision-makingand operational efficiency. ### What is a DBMS? ADBMSis a system that allows users tocreate,modify, and query databases while ensuringdata integrity,security, and efficient data access. Unliketraditional file systems, DBMS minimizesdata redundancy, prevents inconsistencies, and simplifies data management with features like concurrent access andbackup mechanisms."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nADatabase Management System (DBMS)is a software solution designed to efficientlymanage,organize, andretrieve datain a structured manner. ADBMSis a system that allows users tocreate,modify, and query databases while ensuringdata integrity,security, and efficient data access. A university database can store and manage student information, faculty records, and administrative data, allowing seamless retrieval, insertion, and deletion of information as required. ### Key Features of DBMS\n• Data Modeling: Tools to create and modify data models, defining the structure and relationships within the database. • Concurrency Control: Ensures multiple users can access the database simultaneously without conflicts."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "access",
        "question": "What is access?",
        "answer": "ADBMSis a system that allows users tocreate,modify, and query databases while ensuringdata integrity,security, and efficient data access. Unliketraditional file systems, DBMS minimizesdata redundancy, prevents inconsistencies, and simplifies data management with features like concurrent access andbackup mechanisms. • Concurrency Control: Ensures multiple users can access the database simultaneously without conflicts. • Data Integrity and Security: Enforces rules to maintain accurate and secure data, including access controls and encryption. • SELECT:retrieve data from a database\n• INSERT:insert data into a table\n• UPDATE:updates existing data within a table\n• DELETE:Delete all records from a database table\n• MERGE:UPSERT operation (insert or update)\n• CALL:call a PL/SQL or Java subprogram\n• EXPLAIN PLAN:interpretation of the data access path\n• LOCK TABLE:concurrency Control\n\n\n### 3."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "file",
        "question": "What is file?",
        "answer": "Unliketraditional file systems, DBMS minimizesdata redundancy, prevents inconsistencies, and simplifies data management with features like concurrent access andbackup mechanisms. ### Paradigm Shift from File System to DBMS\nBefore the advent ofmodern Database Management Systems(DBMS), data was managed using basic file systems onhard drives. While this approach allowed users tostore,retrieve, andupdate filesas needed, it came with numerous challenges. A typical example can be seen in a file-baseduniversity management system, where data was stored in separate sections such as Departments, Academics, Results, Accounts, and Hostels. Certain information like student names and phone numbers was repeated acrossmultiple files, leading to the following issues:\n\n\n### 1."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "management",
        "question": "What is management?",
        "answer": "• \n• \n• \n\nADatabase Management System (DBMS)is a software solution designed to efficientlymanage,organize, andretrieve datain a structured manner. Unliketraditional file systems, DBMS minimizesdata redundancy, prevents inconsistencies, and simplifies data management with features like concurrent access andbackup mechanisms. It organizes data intotables,views,schemas, and reports, providing a structured approach to data management. ### Types of DBMS\nThere are several types of Database Management Systems (DBMS), each tailored to different data structures, scalability requirements, and application needs. Relational Database Management System (RDBMS)\nRDBMSorganizes data into tables (relations) composed of rows and columns."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "systems",
        "question": "What is systems?",
        "answer": "From small applications to enterprise systems, DBMS plays a vital role in supportingdata-driven decision-makingand operational efficiency. Unliketraditional file systems, DBMS minimizesdata redundancy, prevents inconsistencies, and simplifies data management with features like concurrent access andbackup mechanisms. ### Types of DBMS\nThere are several types of Database Management Systems (DBMS), each tailored to different data structures, scalability requirements, and application needs. NoSQL DBMS\nNoSQL systemsare designed to handlelarge-scale dataand provide high performance for scenarios whererelational modelsmight be restrictive. ### Paradigm Shift from File System to DBMS\nBefore the advent ofmodern Database Management Systems(DBMS), data was managed using basic file systems onhard drives."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "security",
        "question": "What is security?",
        "answer": "ADBMSis a system that allows users tocreate,modify, and query databases while ensuringdata integrity,security, and efficient data access. • Data Integrity and Security: Enforces rules to maintain accurate and secure data, including access controls and encryption. Each language type plays a distinct role in database management, ensuring efficientstorage,retrieval, and security of data. Data Control Language (DCL)\nDCLcommands manage access permissions, ensuring data security by controlling who can perform certain actions on the database. Lack of Security\nFile systems provided limited control over who could access certain data."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "student",
        "question": "What is student?",
        "answer": "A university database can store and manage student information, faculty records, and administrative data, allowing seamless retrieval, insertion, and deletion of information as required. Certain information like student names and phone numbers was repeated acrossmultiple files, leading to the following issues:\n\n\n### 1. For instance, if a student changes their phone number, it must be updated across all sections. If the user wants to search the student hostel allotment number of a student from 10000 unsorted students’ records, how difficult it can be. A student who gained access to a file with grades might easily alter it without proper authorization, compromising data integrity."
    },
    {
        "topic": "introduction-of-dbms-database-management-system-set-1",
        "subtopic": "language",
        "question": "What is language?",
        "answer": "Queries are written inSQL (Structured Query Language), which allows for efficient data manipulation and retrieval. ### Database Languages\nDatabase languages are specialized sets ofcommandsandinstructionsused to define, manipulate, and control data within a database. Each language type plays a distinct role in database management, ensuring efficientstorage,retrieval, and security of data. The primary database languages include:\n\n\n### 1. Data Definition Language (DDL)\nDDLis the short name for Data Definition Language, which deals with database schemas and descriptions, of how the data should reside in the database."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "entity",
        "question": "What is entity?",
        "answer": "• \n• \n• \n\nThe Entity Relationship Model is a model for identifying entities (like student, car or company) to be represented in the database and representation of how those entities are related. • Lines:Lines represent attributes to entities and entity sets with other relationship types. • Double Rectangle:Double rectangle represents a weak entity. Components of ER Diagram\n\n\n### What is an Entity\nAn Entity may be an object with a physical existence: a particular person, car, house, or employee or it may be an object with a conceptual existence – a company, a job, or a university course. ### What is an Entity Set\nAn entity refers to an individual object of an entity type, and the collection of all entities of a particular type is called an entity set."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "relationship",
        "question": "What is relationship?",
        "answer": "• \n• \n• \n\nThe Entity Relationship Model is a model for identifying entities (like student, car or company) to be represented in the database and representation of how those entities are related. • Diamond:Diamonds represent relationships among Entities. • Lines:Lines represent attributes to entities and entity sets with other relationship types. Symbols used in ER Diagram\n\n\n### Components of ER Diagram\nER Model consists of Entities, Attributes, and Relationships among Entities in a Database System. The relationship between the weak entity type and its identifying strong entity type is called identifying relationship and it is represented by a double diamond."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "• Lines:Lines represent attributes to entities and entity sets with other relationship types. ### What is an Entity Set\nAn entity refers to an individual object of an entity type, and the collection of all entities of a particular type is called an entity set. For example, E1 is an entity that belongs to the entity type “Student,” and the group of all students forms the entity set. In the ER diagram below, the entity type is represented as:\n\nEntity Set\n\nWe can represent the entity set in ER Diagram but can’t represent entity in ER Diagram because entity is row and column in the relation and ER Diagram is graphical representation of data. Weak Entity\nAn Entity type has a key attribute that uniquely identifies each entity in the entity set."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "er",
        "question": "What is er?",
        "answer": "The ER data model specifies enterprise schema that represents the overall logical structure of a database graphically. • Gather the requirements (functional and data) by asking questions to the database users. This is whereER modelplays a role. • After this, focus on Physical Database Design (like indexing) and external design (like views)\n\n\n### Why Use ER Diagrams In DBMS\n• ER diagrams represent the E-R model in a database, making them easy to convert into relations (tables). • ER diagrams serve the purpose of real-world modeling of objects which makes them intently useful."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "attribute",
        "question": "What is attribute?",
        "answer": "• Ellipses:Ellipses represent attributes in the ER Model. • Lines:Lines represent attributes to entities and entity sets with other relationship types. • Double Ellipse:Double ellipses represent multi-valued Attributes. Symbols used in ER Diagram\n\n\n### Components of ER Diagram\nER Model consists of Entities, Attributes, and Relationships among Entities in a Database System. Strong Entity\nAStrong Entityis a type of entity that has a key Attribute."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "type",
        "question": "What is type?",
        "answer": "• Lines:Lines represent attributes to entities and entity sets with other relationship types. ### What is an Entity Set\nAn entity refers to an individual object of an entity type, and the collection of all entities of a particular type is called an entity set. For example, E1 is an entity that belongs to the entity type “Student,” and the group of all students forms the entity set. In the ER diagram below, the entity type is represented as:\n\nEntity Set\n\nWe can represent the entity set in ER Diagram but can’t represent entity in ER Diagram because entity is row and column in the relation and ER Diagram is graphical representation of data. ### Types of Entity\nThere are two types of entity:\n\n\n### 1."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "entities",
        "question": "What is entities?",
        "answer": "• \n• \n• \n\nThe Entity Relationship Model is a model for identifying entities (like student, car or company) to be represented in the database and representation of how those entities are related. ### Symbols Used in ER Model\nER Model is used to model the logical view of the system from a data perspective which consists of these symbols:\n\n• Rectangles:Rectangles represent entities in the ER Model. • Diamond:Diamonds represent relationships among Entities. • Lines:Lines represent attributes to entities and entity sets with other relationship types. Symbols used in ER Diagram\n\n\n### Components of ER Diagram\nER Model consists of Entities, Attributes, and Relationships among Entities in a Database System."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "student",
        "question": "What is student?",
        "answer": "• \n• \n• \n\nThe Entity Relationship Model is a model for identifying entities (like student, car or company) to be represented in the database and representation of how those entities are related. For example, E1 is an entity that belongs to the entity type “Student,” and the group of all students forms the entity set. For example, Roll_No, Name, DOB, Age, Address, and Mobile_No are the attributes that define entity type Student. For example, Roll_No will be unique for each student. For example, the Address attribute of the student Entity type consists of Street, City, State, and Country."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "represented",
        "question": "What is represented?",
        "answer": "• \n• \n• \n\nThe Entity Relationship Model is a model for identifying entities (like student, car or company) to be represented in the database and representation of how those entities are related. In the ER diagram below, the entity type is represented as:\n\nEntity Set\n\nWe can represent the entity set in ER Diagram but can’t represent entity in ER Diagram because entity is row and column in the relation and ER Diagram is graphical representation of data. It has a primary key, that helps in identifying it uniquely, and it is represented by a rectangle. A weak entity type is represented by a double rectangle. The relationship between the weak entity type and its identifying strong entity type is called identifying relationship and it is represented by a double diamond."
    },
    {
        "topic": "introduction-of-er-model",
        "subtopic": "diagram",
        "question": "What is diagram?",
        "answer": "• After this, focus on Physical Database Design (like indexing) and external design (like views)\n\n\n### Why Use ER Diagrams In DBMS\n• ER diagrams represent the E-R model in a database, making them easy to convert into relations (tables). • ER diagrams serve the purpose of real-world modeling of objects which makes them intently useful. • ER diagrams require no technical knowledge of the underlying DBMS used. Symbols used in ER Diagram\n\n\n### Components of ER Diagram\nER Model consists of Entities, Attributes, and Relationships among Entities in a Database System. Components of ER Diagram\n\n\n### What is an Entity\nAn Entity may be an object with a physical existence: a particular person, car, house, or employee or it may be an object with a conceptual existence – a company, a job, or a university course."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "relational",
        "question": "What is relational?",
        "answer": "• \n• \n• \n\nRelational Algebra is a formal language used to query and manipulate relational databases, consisting of a set of operations like selection, projection, union, and join. Relational algebra serves as the mathematical foundation for query SQL. • SQL queries are based on relational algebra operations, making it essential for learning SQL. Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format. It represents a single data entry or record in arelational table."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "• \n• \n• \n\nRelational Algebra is a formal language used to query and manipulate relational databases, consisting of a set of operations like selection, projection, union, and join. Relational algebra serves as the mathematical foundation for query SQL. • SQL queries are based on relational algebra operations, making it essential for learning SQL. Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format. Each relation has a unique name and is made up oftuples."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nRelational Algebra is a formal language used to query and manipulate relational databases, consisting of a set of operations like selection, projection, union, and join. • Enables complex queries, like joins and nested queries, that are critical for working with large datasets. The fundamental operators in relational algebra, such as selection, projection, and join, are essential for querying and transforming data efficiently within a relational database. It’s mostly used as a precursor to more complex operation like joins. ### Derived Operators\nDerived operatorsare built using basic operators and include operations like join, intersection, and division."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format. It represents a single data entry or record in arelational table. ### Operators in Relational Algebra\nRelational algebra consists of various operators that help us fetch and manipulate data from relational tables in the database to perform certain operations on relational data. Selection(σ):Selection Operationis basically used to filter out rows from a given table based on certain given condition. Output Table:\n\nNote:The selection operator only selects the required tuples but does not display them."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "• \n• \n• \n\nRelational Algebra is a formal language used to query and manipulate relational databases, consisting of a set of operations like selection, projection, union, and join. • Enables complex queries, like joins and nested queries, that are critical for working with large datasets. • Tuples: A tuple is a single row in a relation, which contains a set of values for each attribute. • Domains: A domain is the set of possible values that an attribute can have. Operators in Relational Algebra\n\n\n### Basic Operators\nBasic operatorsare fundamental operations that includeselection (σ),projection (π),union (U),set difference (−),Cartesian product (×), andrename (ρ)."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "algebra",
        "question": "What is algebra?",
        "answer": "• \n• \n• \n\nRelational Algebra is a formal language used to query and manipulate relational databases, consisting of a set of operations like selection, projection, union, and join. Relational algebra serves as the mathematical foundation for query SQL. • SQL queries are based on relational algebra operations, making it essential for learning SQL. Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format. ### Operators in Relational Algebra\nRelational algebra consists of various operators that help us fetch and manipulate data from relational tables in the database to perform certain operations on relational data."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "columns",
        "question": "What is columns?",
        "answer": "Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format. • Attributes: Attributes are the columns in a relation, each representing a specific characteristic or property of the data. Projection(π):While Selection operation works on rows, similarly projection operation of relational algebra works on columns. It basically allows you to pick specific columns from a given relational table based on the given condition and ignoring all the other remaining columns. Example:Suppose we want columns B and C from Relation R.\n\nπ(B,C)(R)will show following columns."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nRelational Algebra is a formal language used to query and manipulate relational databases, consisting of a set of operations like selection, projection, union, and join. It provides a mathematical framework for querying databases, ensuring efficient data retrieval and manipulation. • It provides a clear, structured approach for formulating database queries. • Enables complex queries, like joins and nested queries, that are critical for working with large datasets. Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "rows",
        "question": "What is rows?",
        "answer": "Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format. Selection(σ):Selection Operationis basically used to filter out rows from a given table based on certain given condition. It basically allows you to retrieve only those rows that match the condition as per condition passed duringSQL Query. Projection(π):While Selection operation works on rows, similarly projection operation of relational algebra works on columns. Set Difference(-):Set difference basically provides the rows that are present in one table, but not in another tables."
    },
    {
        "topic": "introduction-of-relational-algebra-in-dbms",
        "subtopic": "relations",
        "question": "What is relations?",
        "answer": "Key Concepts in Relational Algebra:\n\n• Relations: In relational algebra, a relation is a table that consists of rows and columns, representing data in a structured format. FRENCH\n\nGERMAN\n\nFor the above relations, the query:\n\nπ(Student_Name)(FRENCH) U π(Student_Name)(GERMAN)\n\nwill give usoutput table:\n\nNote:The only constraint in the union of two relations is that both relations must have the same set of Attributes. Example:From the above table of FRENCH and GERMAN, Set Difference is used as follows:\n\nπ(Student_Name)(FRENCH) – π(Student_Name)(GERMAN)\n\nNote:The only constraint in the Set Difference between two relations is that both relations must have the same set of Attributes. Example:Cross-product between two relations. Join Operators: Join operations in relational algebra combine data from two or more relations based on a related attribute, allowing for more complex queries and data retrieval."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "relational",
        "question": "What is relational?",
        "answer": "• \n• \n• \n\nTheRelational Modelis a fundamental concept in Database Management Systems (DBMS) that organizes data into tables, also known as relations. This model simplifies data storage, retrieval, and management by using rows and columns.Codd’s Rules, introduced by Dr. Edgar F. Codd, define the principles a database must follow to qualify as a true relational database. • Data Processing: It utilizes Relational Algebra and Relational Calculus for manipulation of these relations. Many database languages have been developed having special features for handling relational data models. ### What is Relational Model?"
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nTheRelational Modelis a fundamental concept in Database Management Systems (DBMS) that organizes data into tables, also known as relations. This model simplifies data storage, retrieval, and management by using rows and columns.Codd’s Rules, introduced by Dr. Edgar F. Codd, define the principles a database must follow to qualify as a true relational database. These rules ensure data consistency, integrity, and ease of access, making them essential for efficient database design and management. Its other key features are as follows:\n\n• Simplicity: Conveying simplicity in implementation, simplifies the operations that one will want to perform on data. • Normalization: It utilizes the concept of normalization theory for designing non-redundant and efficient object-based data models."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "• \n• \n• \n\nTheRelational Modelis a fundamental concept in Database Management Systems (DBMS) that organizes data into tables, also known as relations. This model simplifies data storage, retrieval, and management by using rows and columns.Codd’s Rules, introduced by Dr. Edgar F. Codd, define the principles a database must follow to qualify as a true relational database. • Data Processing: It utilizes Relational Algebra and Relational Calculus for manipulation of these relations. Many database languages have been developed having special features for handling relational data models. ### What is Relational Model?"
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nTheRelational Modelis a fundamental concept in Database Management Systems (DBMS) that organizes data into tables, also known as relations. This model simplifies data storage, retrieval, and management by using rows and columns.Codd’s Rules, introduced by Dr. Edgar F. Codd, define the principles a database must follow to qualify as a true relational database. These rules ensure data consistency, integrity, and ease of access, making them essential for efficient database design and management. Many database languages have been developed having special features for handling relational data models. Relational Model is a key concept in Database Management Systems (DBMS) that organizes data in a structured and efficient way."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "algebra",
        "question": "What is algebra?",
        "answer": "• Data Processing: It utilizes Relational Algebra and Relational Calculus for manipulation of these relations. ### Relational Algebra\nIt is a procedural Language. It consists of a set of operators that can be performed on relations.Relational Algebraforms the basis for many other high-level data sub-languages likeSQLandQBE.Relational algebra has mainly 9 types of operators. In general SELECT operation is denoted by\n\n(σ)θ(R)\n\n(σ)(Sigma): SELECT operator\n\nθ: Selection condition\n\nR: Relation or relational algebra expression. ### Advantages of Relational Algebra\nRelational Algebra is a formal language used to specify queries to retrieve data from a relational database."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "rule",
        "question": "What is rule?",
        "answer": "This model simplifies data storage, retrieval, and management by using rows and columns.Codd’s Rules, introduced by Dr. Edgar F. Codd, define the principles a database must follow to qualify as a true relational database. These rules ensure data consistency, integrity, and ease of access, making them essential for efficient database design and management. ```\n\n### Features of the Relational Model and Codd’s Rules\n• Tables/Relations:The basic building block of the relational model is the table or relation, which represents a collection of related data. • Codd’s Rules:Codd’s Rules are a set of 12 rules that define the characteristics of a true relational DBMS. These rules ensure that the DBMS is consistent, reliable, and easy to use."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "rules",
        "question": "What is rules?",
        "answer": "This model simplifies data storage, retrieval, and management by using rows and columns.Codd’s Rules, introduced by Dr. Edgar F. Codd, define the principles a database must follow to qualify as a true relational database. These rules ensure data consistency, integrity, and ease of access, making them essential for efficient database design and management. ```\n\n### Features of the Relational Model and Codd’s Rules\n• Tables/Relations:The basic building block of the relational model is the table or relation, which represents a collection of related data. • Codd’s Rules:Codd’s Rules are a set of 12 rules that define the characteristics of a true relational DBMS. These rules ensure that the DBMS is consistent, reliable, and easy to use."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "used",
        "question": "What is used?",
        "answer": "The relational model is widely used because it simplifies database management and ensures data accuracy. SQL is widely used because it offers a consistent and efficient way to interact with relational databases. NoSQL databases, although not part of the relational model, are often used as an alternative for managing unstructured or semi-structured data. Here are some of the most popular ones:\n\n• Oracle:Oracle Database is one of the most widely used RDBMS products in the market. It is used by many large enterprises and is particularly well-suited for data warehousing and transaction processing."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "clerk",
        "question": "What is clerk?",
        "answer": "Syntax:\n\nA UNION B (or) A U B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A UNION B = {clerk, manager, salesman, president}\n```\n2. Syntax:\n\nA INTERSECT B (or) A ∩ B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A INTERSECT B = { clerk, manager}\n```\n3. It displays elements in relation A not in relation B.\n\nSyntax:\n\nA MINUS B (OR) A ─ B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A MINUS B = {salesman}\n```\n4. Syntax:\n\nA TIMES B (OR) A X B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A TIMES B = { (clerk, president),(clerk, clerk),(clerk, manager),(manager, president), (manager, clerk),(manager, manager),(salesman, president),(salesman, clerk), (salesman, manager) }\n```\n5. DIVIDE (÷):It divides the tuple from one relation to another relation\n\nSyntax:\n\nA DIVIDE B (OR) A ÷ B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { clerk, manager}A DIVIDE B = {salesman}\n```\n9."
    },
    {
        "topic": "introduction-of-relational-model-and-codd-rules-in-dbms",
        "subtopic": "manager",
        "question": "What is manager?",
        "answer": "Syntax:\n\nA UNION B (or) A U B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A UNION B = {clerk, manager, salesman, president}\n```\n2. Syntax:\n\nA INTERSECT B (or) A ∩ B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A INTERSECT B = { clerk, manager}\n```\n3. It displays elements in relation A not in relation B.\n\nSyntax:\n\nA MINUS B (OR) A ─ B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A MINUS B = {salesman}\n```\n4. Syntax:\n\nA TIMES B (OR) A X B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A TIMES B = { (clerk, president),(clerk, clerk),(clerk, manager),(manager, president), (manager, clerk),(manager, manager),(salesman, president),(salesman, clerk), (salesman, manager) }\n```\n5. DIVIDE (÷):It divides the tuple from one relation to another relation\n\nSyntax:\n\nA DIVIDE B (OR) A ÷ B\n\nExample:\n\n\n```python\nA = { clerk, manager, salesman}B = { clerk, manager}A DIVIDE B = {salesman}\n```\n9."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "decomposition",
        "question": "What is decomposition?",
        "answer": "• \n• \n• \n\nThe original relation and relation reconstructed from joining decomposed relations must contain the same number of tuples if the number is increased or decreased then it is Lossy Join decomposition. Lossless join decomposition ensures that never get the situation where spurious tuples are generated in relation, for every value on the join attributes there will be a unique tuple in one of the relations. ### What is Lossless Decomposition? Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. In other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "lossless",
        "question": "What is lossless?",
        "answer": "Lossless join decomposition ensures that never get the situation where spurious tuples are generated in relation, for every value on the join attributes there will be a unique tuple in one of the relations. ### What is Lossless Decomposition? Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. In other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins. Only1NF,2NF,3NF,andBCNFare valid for lossless join decomposition."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "• \n• \n• \n\nThe original relation and relation reconstructed from joining decomposed relations must contain the same number of tuples if the number is increased or decreased then it is Lossy Join decomposition. Lossless join decomposition ensures that never get the situation where spurious tuples are generated in relation, for every value on the join attributes there will be a unique tuple in one of the relations. Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. In other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins. In Lossless Decomposition, we select the common attribute and the criteria for selecting a common attribute is that the common attribute must be a candidate key or super key in either relation R1, R2, or both."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nThe original relation and relation reconstructed from joining decomposed relations must contain the same number of tuples if the number is increased or decreased then it is Lossy Join decomposition. Lossless join decomposition ensures that never get the situation where spurious tuples are generated in relation, for every value on the join attributes there will be a unique tuple in one of the relations. Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. In other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins. Only1NF,2NF,3NF,andBCNFare valid for lossless join decomposition."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "relations",
        "question": "What is relations?",
        "answer": "• \n• \n• \n\nThe original relation and relation reconstructed from joining decomposed relations must contain the same number of tuples if the number is increased or decreased then it is Lossy Join decomposition. Lossless join decomposition ensures that never get the situation where spurious tuples are generated in relation, for every value on the join attributes there will be a unique tuple in one of the relations. Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. – Employee_desc (Employee_Id, Ename, Salary)– Department_desc (Department_Id, Dname)\n\n\n```python\nR1 ∩ R2 → R1ORR1 ∩ R2 → R2\n```\nIn adatabase management system (DBMS), a lossless decomposition is a process of decomposing a relation schema into multiple relations in such a way that it preserves the information contained in the original relation. Specifically, a lossless decomposition is one in which the original relation can be reconstructed by joining the decomposed relations."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "original",
        "question": "What is original?",
        "answer": "• \n• \n• \n\nThe original relation and relation reconstructed from joining decomposed relations must contain the same number of tuples if the number is increased or decreased then it is Lossy Join decomposition. Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. Decomposition of a relation R into R1 and R2 is a lossless-join decomposition if at least one of the following functional dependencies is in F+ (Closure of functional dependencies)\n\n\n### Example of Lossless Decomposition\n— Employee (Employee_Id, Ename, Salary, Department_Id, Dname)\n\nCan be decomposed using lossless decomposition as,\n\n— Employee_desc (Employee_Id, Ename, Salary, Department_Id)— Department_desc (Department_Id, Dname)Alternatively the lossy decomposition would be as joining these tables is not possible so not possible to get back original data. – Employee_desc (Employee_Id, Ename, Salary)– Department_desc (Department_Id, Dname)\n\n\n```python\nR1 ∩ R2 → R1ORR1 ∩ R2 → R2\n```\nIn adatabase management system (DBMS), a lossless decomposition is a process of decomposing a relation schema into multiple relations in such a way that it preserves the information contained in the original relation. Specifically, a lossless decomposition is one in which the original relation can be reconstructed by joining the decomposed relations."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "r2",
        "question": "What is r2?",
        "answer": "Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. In other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins. In Lossless Decomposition, we select the common attribute and the criteria for selecting a common attribute is that the common attribute must be a candidate key or super key in either relation R1, R2, or both. Decomposition of a relation R into R1 and R2 is a lossless-join decomposition if at least one of the following functional dependencies is in F+ (Closure of functional dependencies)\n\n\n### Example of Lossless Decomposition\n— Employee (Employee_Id, Ename, Salary, Department_Id, Dname)\n\nCan be decomposed using lossless decomposition as,\n\n— Employee_desc (Employee_Id, Ename, Salary, Department_Id)— Department_desc (Department_Id, Dname)Alternatively the lossy decomposition would be as joining these tables is not possible so not possible to get back original data. – Employee_desc (Employee_Id, Ename, Salary)– Department_desc (Department_Id, Dname)\n\n\n```python\nR1 ∩ R2 → R1ORR1 ∩ R2 → R2\n```\nIn adatabase management system (DBMS), a lossless decomposition is a process of decomposing a relation schema into multiple relations in such a way that it preserves the information contained in the original relation."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. Decomposition of a relation R into R1 and R2 is a lossless-join decomposition if at least one of the following functional dependencies is in F+ (Closure of functional dependencies)\n\n\n### Example of Lossless Decomposition\n— Employee (Employee_Id, Ename, Salary, Department_Id, Dname)\n\nCan be decomposed using lossless decomposition as,\n\n— Employee_desc (Employee_Id, Ename, Salary, Department_Id)— Department_desc (Department_Id, Dname)Alternatively the lossy decomposition would be as joining these tables is not possible so not possible to get back original data. – Employee_desc (Employee_Id, Ename, Salary)– Department_desc (Department_Id, Dname)\n\n\n```python\nR1 ∩ R2 → R1ORR1 ∩ R2 → R2\n```\nIn adatabase management system (DBMS), a lossless decomposition is a process of decomposing a relation schema into multiple relations in such a way that it preserves the information contained in the original relation. ### Advantages of Lossless Decomposition\n• Reduced Data Redundancy:Lossless decomposition helps in reducing the data redundancy that exists in the original relation. This helps in improving the efficiency of the database system by reducing storage requirements and improving query performance."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "r1",
        "question": "What is r1?",
        "answer": "Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data. In other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins. In Lossless Decomposition, we select the common attribute and the criteria for selecting a common attribute is that the common attribute must be a candidate key or super key in either relation R1, R2, or both. Decomposition of a relation R into R1 and R2 is a lossless-join decomposition if at least one of the following functional dependencies is in F+ (Closure of functional dependencies)\n\n\n### Example of Lossless Decomposition\n— Employee (Employee_Id, Ename, Salary, Department_Id, Dname)\n\nCan be decomposed using lossless decomposition as,\n\n— Employee_desc (Employee_Id, Ename, Salary, Department_Id)— Department_desc (Department_Id, Dname)Alternatively the lossy decomposition would be as joining these tables is not possible so not possible to get back original data. – Employee_desc (Employee_Id, Ename, Salary)– Department_desc (Department_Id, Dname)\n\n\n```python\nR1 ∩ R2 → R1ORR1 ∩ R2 → R2\n```\nIn adatabase management system (DBMS), a lossless decomposition is a process of decomposing a relation schema into multiple relations in such a way that it preserves the information contained in the original relation."
    },
    {
        "topic": "lossless-decomposition-in-dbms",
        "subtopic": "decomposed",
        "question": "What is decomposed?",
        "answer": "• \n• \n• \n\nThe original relation and relation reconstructed from joining decomposed relations must contain the same number of tuples if the number is increased or decreased then it is Lossy Join decomposition. In other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins. Decomposition of a relation R into R1 and R2 is a lossless-join decomposition if at least one of the following functional dependencies is in F+ (Closure of functional dependencies)\n\n\n### Example of Lossless Decomposition\n— Employee (Employee_Id, Ename, Salary, Department_Id, Dname)\n\nCan be decomposed using lossless decomposition as,\n\n— Employee_desc (Employee_Id, Ename, Salary, Department_Id)— Department_desc (Department_Id, Dname)Alternatively the lossy decomposition would be as joining these tables is not possible so not possible to get back original data. Specifically, a lossless decomposition is one in which the original relation can be reconstructed by joining the decomposed relations. These conditions ensure that the decomposed relations will retain all the information present in the original relation."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "r1",
        "question": "What is r1?",
        "answer": "### Lossless Join Decomposition\nIf we decompose a relation R into relations R1 and R2,\n\n\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:\n\n1. The Union of Attributes of R1 and R2 must be equal to the attribute of R. Each attribute of R must be either in R1 or in R2. ```python\nAtt(R1) U Att(R2) = Att(R)\n```\n2. The intersection of Attributes of R1 and R2 must not be NULL. ```python\nAtt(R1) ∩ Att(R2) ≠ Φ\n```\n3."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "r2",
        "question": "What is r2?",
        "answer": "### Lossless Join Decomposition\nIf we decompose a relation R into relations R1 and R2,\n\n\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:\n\n1. The Union of Attributes of R1 and R2 must be equal to the attribute of R. Each attribute of R must be either in R1 or in R2. ```python\nAtt(R1) U Att(R2) = Att(R)\n```\n2. The intersection of Attributes of R1 and R2 must not be NULL. ```python\nAtt(R1) ∩ Att(R2) ≠ Φ\n```\n3."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "att",
        "question": "What is att?",
        "answer": "The Union of Attributes of R1 and R2 must be equal to the attribute of R. Each attribute of R must be either in R1 or in R2. ```python\nAtt(R1) U Att(R2) = Att(R)\n```\n2. The intersection of Attributes of R1 and R2 must not be NULL. ```python\nAtt(R1) ∩ Att(R2) ≠ Φ\n```\n3. The common attribute must be a key for at least one relation (R1 or R2)\n\n\n```python\nAtt(R1) ∩ Att(R2) -> Att(R1) or Att(R1) ∩ Att(R2) -> Att(R2)\n```\nFor Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is a lossless join decomposition as:\n\n• First condition holds true as Att(R1) U Att(R2) = (ABC) U (AD) = (ABCD) = Att(R)."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "decomposition",
        "question": "What is decomposition?",
        "answer": "• \n• \n• \n\nDecomposition of a relation is done when a relation in arelational modelis not in appropriate normal form. Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving. ### Lossless Join Decomposition\nIf we decompose a relation R into relations R1 and R2,\n\n\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:\n\n1. The common attribute must be a key for at least one relation (R1 or R2)\n\n\n```python\nAtt(R1) ∩ Att(R2) -> Att(R1) or Att(R1) ∩ Att(R2) -> Att(R2)\n```\nFor Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is a lossless join decomposition as:\n\n• First condition holds true as Att(R1) U Att(R2) = (ABC) U (AD) = (ABCD) = Att(R). ### Dependency Preserving Decomposition\nIf we decompose a relation R into relations R1 and R2, All dependencies of R either must be a part of R1 or R2 or must be derivable from a combination offunctional dependencyof R1 and R2."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "lossless",
        "question": "What is lossless?",
        "answer": "Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving. ### Lossless Join Decomposition\nIf we decompose a relation R into relations R1 and R2,\n\n\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:\n\n1. The common attribute must be a key for at least one relation (R1 or R2)\n\n\n```python\nAtt(R1) ∩ Att(R2) -> Att(R1) or Att(R1) ∩ Att(R2) -> Att(R2)\n```\nFor Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is a lossless join decomposition as:\n\n• First condition holds true as Att(R1) U Att(R2) = (ABC) U (AD) = (ABCD) = Att(R). ### Advantages of Lossless Join and Dependency Preserving Decomposition\n• Improved Data Integrity:Lossless join and dependency preserving decomposition help to maintain the data integrity of the original relation by ensuring that all dependencies are preserved. • Better Flexibility:Lossless join and dependency preserving decomposition can improve the flexibility of the database system by allowing for easier modification of the schema."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving. ### Lossless Join Decomposition\nIf we decompose a relation R into relations R1 and R2,\n\n\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:\n\n1. The common attribute must be a key for at least one relation (R1 or R2)\n\n\n```python\nAtt(R1) ∩ Att(R2) -> Att(R1) or Att(R1) ∩ Att(R2) -> Att(R2)\n```\nFor Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is a lossless join decomposition as:\n\n• First condition holds true as Att(R1) U Att(R2) = (ABC) U (AD) = (ABCD) = Att(R). ### Advantages of Lossless Join and Dependency Preserving Decomposition\n• Improved Data Integrity:Lossless join and dependency preserving decomposition help to maintain the data integrity of the original relation by ensuring that all dependencies are preserved. • Better Flexibility:Lossless join and dependency preserving decomposition can improve the flexibility of the database system by allowing for easier modification of the schema."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "preserving",
        "question": "What is preserving?",
        "answer": "Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving. ### Dependency Preserving Decomposition\nIf we decompose a relation R into relations R1 and R2, All dependencies of R either must be a part of R1 or R2 or must be derivable from a combination offunctional dependencyof R1 and R2. For Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is dependency preserving because FD A->BC is a part of R1(ABC). ### Advantages of Lossless Join and Dependency Preserving Decomposition\n• Improved Data Integrity:Lossless join and dependency preserving decomposition help to maintain the data integrity of the original relation by ensuring that all dependencies are preserved. • Better Flexibility:Lossless join and dependency preserving decomposition can improve the flexibility of the database system by allowing for easier modification of the schema."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "dependency",
        "question": "What is dependency?",
        "answer": "Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving. ### Dependency Preserving Decomposition\nIf we decompose a relation R into relations R1 and R2, All dependencies of R either must be a part of R1 or R2 or must be derivable from a combination offunctional dependencyof R1 and R2. For Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is dependency preserving because FD A->BC is a part of R1(ABC). ### Advantages of Lossless Join and Dependency Preserving Decomposition\n• Improved Data Integrity:Lossless join and dependency preserving decomposition help to maintain the data integrity of the original relation by ensuring that all dependencies are preserved. • Better Flexibility:Lossless join and dependency preserving decomposition can improve the flexibility of the database system by allowing for easier modification of the schema."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "• \n• \n• \n\nDecomposition of a relation is done when a relation in arelational modelis not in appropriate normal form. Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving. ### Lossless Join Decomposition\nIf we decompose a relation R into relations R1 and R2,\n\n\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:\n\n1. The common attribute must be a key for at least one relation (R1 or R2)\n\n\n```python\nAtt(R1) ∩ Att(R2) -> Att(R1) or Att(R1) ∩ Att(R2) -> Att(R2)\n```\nFor Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is a lossless join decomposition as:\n\n• First condition holds true as Att(R1) U Att(R2) = (ABC) U (AD) = (ABCD) = Att(R). ### Dependency Preserving Decomposition\nIf we decompose a relation R into relations R1 and R2, All dependencies of R either must be a part of R1 or R2 or must be derivable from a combination offunctional dependencyof R1 and R2."
    },
    {
        "topic": "lossless-join-and-dependency-preserving-decomposition",
        "subtopic": "relations",
        "question": "What is relations?",
        "answer": "Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving. ### Lossless Join Decomposition\nIf we decompose a relation R into relations R1 and R2,\n\n\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:\n\n1. ### Dependency Preserving Decomposition\nIf we decompose a relation R into relations R1 and R2, All dependencies of R either must be a part of R1 or R2 or must be derivable from a combination offunctional dependencyof R1 and R2. • Reduced Data Redundancy:These techniques help to reducedata redundancyby breaking down a relation into smaller, more manageable relations. • Improved Query Performance:By breaking down a relation into smaller, more focused relations, query performance can be improved."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "First Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. Similarly Passport table corresponds to Passport Entity with key as Pass-No. Has Table represents relationship between Person and Passport (Which person has which passport). Table 1\n\nAs we can see from Table 1, each Per-Id and Pass-No has only one entry in  Has Table. So we can merge all three tables into 1 with attributes shown in Table 2."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "id",
        "question": "What is id?",
        "answer": "First Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. So it will take attribute Per-Id from Person and Pass-No from Passport. Table 1\n\nAs we can see from Table 1, each Per-Id and Pass-No has only one entry in  Has Table. Each Per-Id will be unique and not null. Male table corresponds to Male Entity with key as M-Id."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "entity",
        "question": "What is entity?",
        "answer": "• \n• \n• \n\nConverting an Entity-Relationship (ER) diagram to a Relational Model is a crucial step in database design. Case 1:  Binary Relationship with 1:1 cardinality with total participation of an entity\n\n\n\nA person has 0 or 1 passport number and Passport is always owned by 1 person. First Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. Similarly Passport table corresponds to Passport Entity with key as Pass-No. First Convert each entity and relationship to tables."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "First Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. Similarly Passport table corresponds to Passport Entity with key as Pass-No. So it will be the key. Pass-No can’t be key because for some person, it can be NULL. Male table corresponds to Male Entity with key as M-Id."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "relationship",
        "question": "What is relationship?",
        "answer": "• \n• \n• \n\nConverting an Entity-Relationship (ER) diagram to a Relational Model is a crucial step in database design. In this article, we will explore how to convert an ER diagram to a Relational Model for different scenarios, including binary relationships with various cardinalities and participation constraints. Case 1:  Binary Relationship with 1:1 cardinality with total participation of an entity\n\n\n\nA person has 0 or 1 passport number and Passport is always owned by 1 person. First Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. Has Table represents relationship between Person and Passport (Which person has which passport)."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "First Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. So we can merge all three tables into 1 with attributes shown in Table 2. First Convert each entity and relationship to tables. If we merge 3 tables into 1, for some M-Id, F-Id will be NULL. So we can’t merge all three tables into 1."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "student",
        "question": "What is student?",
        "answer": "Case 3: Binary Relationship with n: 1 cardinality\n\n\n\nIn this scenario, every student can enroll only in one elective course but for an elective course there can be more than one student. Student table corresponds to Student Entity with key as S-Id. Enrolls Table represents relationship between Student and Elective_Course (Which student enrolls in which course). So it will take attribute S-Id from Student and E-Id from Elective_Course. Both Student and Enrolls Table’s key is same."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "relational",
        "question": "What is relational?",
        "answer": "• \n• \n• \n\nConverting an Entity-Relationship (ER) diagram to a Relational Model is a crucial step in database design. The ER model represents the conceptual structure of a database, while the Relational Model is a physical representation that can be directly implemented using a Relational Database Management System (RDBMS) like Oracle or MySQL. In this article, we will explore how to convert an ER diagram to a Relational Model for different scenarios, including binary relationships with various cardinalities and participation constraints. Table 11\n\n\n### Conclusion\nConverting anER diagramto a Relational Model is a crucial step in database design. The ER model represents the conceptual structure, while the Relational Model is a physical representation that can be directly implemented using a Relational Database Management System (RDBMS) like Oracle or MySQL."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "model",
        "question": "What is model?",
        "answer": "• \n• \n• \n\nConverting an Entity-Relationship (ER) diagram to a Relational Model is a crucial step in database design. The ER model represents the conceptual structure of a database, while the Relational Model is a physical representation that can be directly implemented using a Relational Database Management System (RDBMS) like Oracle or MySQL. In this article, we will explore how to convert an ER diagram to a Relational Model for different scenarios, including binary relationships with various cardinalities and participation constraints. Table 11\n\n\n### Conclusion\nConverting anER diagramto a Relational Model is a crucial step in database design. The ER model represents the conceptual structure, while the Relational Model is a physical representation that can be directly implemented using a Relational Database Management System (RDBMS) like Oracle or MySQL."
    },
    {
        "topic": "mapping-from-er-model-to-relational-model",
        "subtopic": "corresponds",
        "question": "What is corresponds?",
        "answer": "First Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. Similarly Passport table corresponds to Passport Entity with key as Pass-No. Male table corresponds to Male Entity with key as M-Id. Similarly Female table corresponds to Female Entity with key as F-Id. Student table corresponds to Student Entity with key as S-Id."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "normal",
        "question": "What is normal?",
        "answer": "• \n• \n• \n\nNormal forms are the essential principles used to organize data efficiently and eliminate redundancy. By breaking down data into smaller, related tables and defining clear relationships between them, normal forms reduce duplication and improve data integrity. Normalization is the process of minimizing redundancy from a relation or set of relations. ### Normalization\nNormalization is a systematic approach to organize data in a database to eliminate redundancy, avoid anomalies and ensure data consistency. Normal Forms\n\n• A relation in BCNF is also in 3NF , a relation in 3NF is also in 2NF and a relation in 2NF is also in 1NF."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "form",
        "question": "What is form?",
        "answer": "• \n• \n• \n\nNormal forms are the essential principles used to organize data efficiently and eliminate redundancy. They help to ensure that the database structure is logical, consistent and optimized for performance. By breaking down data into smaller, related tables and defining clear relationships between them, normal forms reduce duplication and improve data integrity. Normal Forms\n\n• A relation in BCNF is also in 3NF , a relation in 3NF is also in 2NF and a relation in 2NF is also in 1NF. By following a series of rules called normal forms (such as 1NF, 2NF, 3NF and BCNF) normalization ensures that the data is logically organized and maintains its integrity."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nNormal forms are the essential principles used to organize data efficiently and eliminate redundancy. They help to ensure that the database structure is logical, consistent and optimized for performance. By breaking down data into smaller, related tables and defining clear relationships between them, normal forms reduce duplication and improve data integrity. This process is crucial for creating databases that are easy to maintain, update, and query making them a fundamental concept for anyone working with databases. ### Normalization\nNormalization is a systematic approach to organize data in a database to eliminate redundancy, avoid anomalies and ensure data consistency."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "By breaking down data into smaller, related tables and defining clear relationships between them, normal forms reduce duplication and improve data integrity. Normalization is the process of minimizing redundancy from a relation or set of relations. Redundancy in relation may cause insertion, deletion and update anomalies. The process involves breaking down large tables into smaller, well-structured ones and defining relationships between them. Normal Forms\n\n• A relation in BCNF is also in 3NF , a relation in 3NF is also in 2NF and a relation in 2NF is also in 1NF."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "The first normal form helps to eliminate duplicate data and simplify queries.Second Normal Form (2NF):2NF eliminates redundant data by requiring that each non-key attribute be dependent on the primary key. This means that each column should be directly related to the primary key, and not to other columns.Third Normal Form (3NF):3NF builds on 2NF by requiring that all non-key attributes are independent of each other. This means that each column should be directly related to the primary key, and not to any other columns in the same table.Boyce-Codd Normal Form (BCNF):BCNF is a stricter form of 3NF that ensures that each determinant in a table is a candidate key. In other words, BCNF ensures that each non-key attribute is dependent only on the candidate key.Fourth Normal Form (4NF):4NF is a further refinement of BCNF that ensures that a table does not contain any multi-valued dependencies.Fifth Normal Form (5NF):5NF is the highest level of normalization and involves decomposing a table into smaller tables to remove data redundancy and improve data integrity. ### Second Normal Form\nA relation is in 2NF if it is in 1NF and any non-prime attribute (attributes which are not part of any candidate key) is not partially dependent on any proper subset of any candidate key of the table."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "They help to ensure that the database structure is logical, consistent and optimized for performance. This process is crucial for creating databases that are easy to maintain, update, and query making them a fundamental concept for anyone working with databases. ### Normalization\nNormalization is a systematic approach to organize data in a database to eliminate redundancy, avoid anomalies and ensure data consistency. This not only reduces the chances of storing duplicate data but also improves the overall efficiency of the database. Normal forms reduce duplicate data, make data more consistent and improve how a database works."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "bcnf",
        "question": "What is bcnf?",
        "answer": "Normal Forms\n\n• A relation in BCNF is also in 3NF , a relation in 3NF is also in 2NF and a relation in 2NF is also in 1NF. • A relation in BCNF is considered fully normalized. By following a series of rules called normal forms (such as 1NF, 2NF, 3NF and BCNF) normalization ensures that the data is logically organized and maintains its integrity. This means that each column should be directly related to the primary key, and not to any other columns in the same table.Boyce-Codd Normal Form (BCNF):BCNF is a stricter form of 3NF that ensures that each determinant in a table is a candidate key. In other words, BCNF ensures that each non-key attribute is dependent only on the candidate key.Fourth Normal Form (4NF):4NF is a further refinement of BCNF that ensures that a table does not contain any multi-valued dependencies.Fifth Normal Form (5NF):5NF is the highest level of normalization and involves decomposing a table into smaller tables to remove data redundancy and improve data integrity."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "forms",
        "question": "What is forms?",
        "answer": "• \n• \n• \n\nNormal forms are the essential principles used to organize data efficiently and eliminate redundancy. By breaking down data into smaller, related tables and defining clear relationships between them, normal forms reduce duplication and improve data integrity. Normal Forms\n\n• A relation in BCNF is also in 3NF , a relation in 3NF is also in 2NF and a relation in 2NF is also in 1NF. By following a series of rules called normal forms (such as 1NF, 2NF, 3NF and BCNF) normalization ensures that the data is logically organized and maintains its integrity. ### Important Points Regarding Normal Forms in DBMS\n• Purpose of Normal Forms:To organize data efficiently, eliminate redundancy, and prevent anomalies during data operations like insertion, deletion and updates."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "candidate",
        "question": "What is candidate?",
        "answer": "This means that each column should be directly related to the primary key, and not to any other columns in the same table.Boyce-Codd Normal Form (BCNF):BCNF is a stricter form of 3NF that ensures that each determinant in a table is a candidate key. In other words, BCNF ensures that each non-key attribute is dependent only on the candidate key.Fourth Normal Form (4NF):4NF is a further refinement of BCNF that ensures that a table does not contain any multi-valued dependencies.Fifth Normal Form (5NF):5NF is the highest level of normalization and involves decomposing a table into smaller tables to remove data redundancy and improve data integrity. ### Second Normal Form\nA relation is in 2NF if it is in 1NF and any non-prime attribute (attributes which are not part of any candidate key) is not partially dependent on any proper subset of any candidate key of the table. In other words, we can say that, every non-prime attribute must be fully dependent on each candidate key.A functional dependency X->Y (where X and Y are set of attributes) is said to be inpartial dependency, if Y can be determined by any proper subset of X. ### Third Normal Form\nA relation is in Third Normal Form (3NF) if it is already in Second Normal Form (2NF) and does not have transitive dependencies for non-prime attributes.Below mentioned is the basic condition that must be hold in the non-trivial functional dependency X -> Y:\n\n\n```python\nX is a super key.orY is a prime attribute (each element of Y is part of some candidate key)."
    },
    {
        "topic": "normal-forms-in-dbms",
        "subtopic": "redundancy",
        "question": "What is redundancy?",
        "answer": "• \n• \n• \n\nNormal forms are the essential principles used to organize data efficiently and eliminate redundancy. Normalization is the process of minimizing redundancy from a relation or set of relations. Redundancy in relation may cause insertion, deletion and update anomalies. ### Normalization\nNormalization is a systematic approach to organize data in a database to eliminate redundancy, avoid anomalies and ensure data consistency. ### Important Points Regarding Normal Forms in DBMS\n• Purpose of Normal Forms:To organize data efficiently, eliminate redundancy, and prevent anomalies during data operations like insertion, deletion and updates."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "employee",
        "question": "What is employee?",
        "answer": "• For example, in an organizational chart, an employee can have a relationship with other employees who are also in a managerial position. For example, in an organizational chart, an employee can have many subordinates, but each subordinate can only have one manager. This is represented as a one-to-many (1:N) relationship between the employee entity and itself. Example:\n\n\n\nLet us suppose that we have an employee table. Every employee can have a supervisor except the CEO and there can be at most one boss for each employee."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "relationship",
        "question": "What is relationship?",
        "answer": "• \n• \n• \n\nA relationship between two entities of the same entity set is called a recursive relationship or repeated relationship. Here the same entity set participates more than once in a relationship type with a different role for each instance. • Recursive relationships are often used to represent hierarchies or networks, where an entity can be connected to other entities of the same type. • For example, in an organizational chart, an employee can have a relationship with other employees who are also in a managerial position. Similarly, in a social network, a user can have a relationship with other users who are their friends."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "manager",
        "question": "What is manager?",
        "answer": "• For example, in an organizational chart, an employee can have a relationship with other employees who are also in a managerial position. For example, in an organizational chart, an employee can have many subordinates, but each subordinate can only have one manager. A manager supervises a subordinate. • Themaximum cardinalityis 1, as a subordinate can have only one manager. Therefore, the relationship is represented with asingle line(not a double line) in the ER diagram\n\n\n### Implementing a Recursive Relationship\nTo implement a recursive relationship, a foreign key of the employee’s manager number would be held in each employee record."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "entity",
        "question": "What is entity?",
        "answer": "• \n• \n• \n\nA relationship between two entities of the same entity set is called a recursive relationship or repeated relationship. Here the same entity set participates more than once in a relationship type with a different role for each instance. • Recursive relationships are often used to represent hierarchies or networks, where an entity can be connected to other entities of the same type. In other words, we create a relationship between the same entity type. The self-join involves creating two instances of the same entity and connecting them with a relationship."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "subordinate",
        "question": "What is subordinate?",
        "answer": "For example, in an organizational chart, an employee can have many subordinates, but each subordinate can only have one manager. A manager supervises a subordinate. • Supervisor\n• Subordinate\n\n\n\nHere, “Supervisor” and “Subordinate” are referred to asrole names. The degree of theREPORTS_TOrelationship is 1 (i.e., a unary relationship\n\n• Theminimum cardinalityof theSupervisorrole is 0 because the lowest-level employee (e.g., a subordinate) may not manage anyone. • Themaximum cardinalityof theSupervisorrole is N, as an employee can manage many subordinates."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• To represent a recursive relationship in an ER diagram, we use a self-join, which is a join between a table and itself. Example:\n\n\n\nLet us suppose that we have an employee table. A Sample table would look something like this:-\n\n\n```python\nEmp_entity( Emp_no,Emp_Fname, Emp_Lname, Emp_DOB, Emp_NI_Number, Manager_no);Manager no - (this is the employee no of the employee's manager)\n```\nExample:\n\n\n```python\nCREATE TABLE employee (id INT PRIMARY KEY,name VARCHAR(50),manager_id INT,FOREIGN KEY (manager_id) REFERENCES employee(id));\n```\nHere, the employee table has a foreign key column calledmanager_idthat references theidcolumn of the sameemployeetable. ### Sample Employee Table Structure:\nIn this table:\n\n• Manager_norefers to theEmp_noof the employee’s manager."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "recursive",
        "question": "What is recursive?",
        "answer": "• \n• \n• \n\nA relationship between two entities of the same entity set is called a recursive relationship or repeated relationship. • Recursive relationships are often used to represent hierarchies or networks, where an entity can be connected to other entities of the same type. • To represent a recursive relationship in an ER diagram, we use a self-join, which is a join between a table and itself. Let’s suppose that REPORTS_TO is a recursive relationship on the Employee entity type where each Employee plays two roles. Therefore, the relationship is represented with asingle line(not a double line) in the ER diagram\n\n\n### Implementing a Recursive Relationship\nTo implement a recursive relationship, a foreign key of the employee’s manager number would be held in each employee record."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "example",
        "question": "What is example?",
        "answer": "• For example, in an organizational chart, an employee can have a relationship with other employees who are also in a managerial position. For example, in an organizational chart, an employee can have many subordinates, but each subordinate can only have one manager. Example:\n\n\n\nLet us suppose that we have an employee table. For the Subordinate role:\n\n• Theminimum cardinalityis 0, as the CEO, for example, is not a subordinate to anyone. A Sample table would look something like this:-\n\n\n```python\nEmp_entity( Emp_no,Emp_Fname, Emp_Lname, Emp_DOB, Emp_NI_Number, Manager_no);Manager no - (this is the employee no of the employee's manager)\n```\nExample:\n\n\n```python\nCREATE TABLE employee (id INT PRIMARY KEY,name VARCHAR(50),manager_id INT,FOREIGN KEY (manager_id) REFERENCES employee(id));\n```\nHere, the employee table has a foreign key column calledmanager_idthat references theidcolumn of the sameemployeetable."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "Therefore, the relationship is represented with asingle line(not a double line) in the ER diagram\n\n\n### Implementing a Recursive Relationship\nTo implement a recursive relationship, a foreign key of the employee’s manager number would be held in each employee record. A Sample table would look something like this:-\n\n\n```python\nEmp_entity( Emp_no,Emp_Fname, Emp_Lname, Emp_DOB, Emp_NI_Number, Manager_no);Manager no - (this is the employee no of the employee's manager)\n```\nExample:\n\n\n```python\nCREATE TABLE employee (id INT PRIMARY KEY,name VARCHAR(50),manager_id INT,FOREIGN KEY (manager_id) REFERENCES employee(id));\n```\nHere, the employee table has a foreign key column calledmanager_idthat references theidcolumn of the sameemployeetable."
    },
    {
        "topic": "recursive-relationships-in-er-diagrams",
        "subtopic": "type",
        "question": "What is type?",
        "answer": "Here the same entity set participates more than once in a relationship type with a different role for each instance. • Recursive relationships are often used to represent hierarchies or networks, where an entity can be connected to other entities of the same type. In other words, we create a relationship between the same entity type. Let’s suppose that REPORTS_TO is a recursive relationship on the Employee entity type where each Employee plays two roles."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "dependency",
        "question": "What is dependency?",
        "answer": "### Second Normal Form\nSecond Normal Form (2NF) is based on the concept of fully functional dependency. Note –If the proper subset of the candidate key determines a non-prime attribute, it is called  partial dependency. If a partial dependency exists, we remove the partially dependent attribute(s) from the relation by placing them in a new relation along with a copy of their determinant. • Therefore, Non-prime attribute COURSE_FEE is dependent on a proper subset of the candidate key, which is a partial dependency and so this relation is not in 2NF. ### Example-2:Consider following functional dependencies in relation  R (A,  B , C,  D )\n\n```python\nAB -> C  [A and B together determine C]BC -> D  [B and C together determine D]\n```\nIn the above relation, AB is the only candidate key and there is no partial dependency, i.e., any proper subset of AB doesn’t determine any non-prime attribute."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nNormalization is a structural method whereby tables are broken down in a controlled manner with an aim of reducing data redundancy. It is a way to organize a database table so that it reduces redundancy and ensures data consistency. For a table to be in 2NF, it must first meet the requirements of First Normal Form (1NF), meaning all columns should contain single, indivisible values without any repeating groups. Additionally, the table should not have partial dependencies. Example-1:Consider the table below."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "2nf",
        "question": "What is 2nf?",
        "answer": "The First Normal Form (1NF) and Second Normal Form (2NF) are very important towards the achievement of a normalized database. Where 1NF is centered on the removal of multiple values in an attribute, 2NF is associated with the issue ofpartial dependencies. ### Second Normal Form\nSecond Normal Form (2NF) is based on the concept of fully functional dependency. For a table to be in 2NF, it must first meet the requirements of First Normal Form (1NF), meaning all columns should contain single, indivisible values without any repeating groups. In other words,\n\nA relation that is in First Normal Form and every non-prime attribute is fully functionally dependent on the candidate key, then the relation is in Second Normal Form (2NF)."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "partial",
        "question": "What is partial?",
        "answer": "Where 1NF is centered on the removal of multiple values in an attribute, 2NF is associated with the issue ofpartial dependencies. Additionally, the table should not have partial dependencies. Note –If the proper subset of the candidate key determines a non-prime attribute, it is called  partial dependency. Thenormalizationof 1NF relations to 2NF involves theremoval of partial dependencies. If a partial dependency exists, we remove the partially dependent attribute(s) from the relation by placing them in a new relation along with a copy of their determinant."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "normal",
        "question": "What is normal?",
        "answer": "• \n• \n• \n\nNormalization is a structural method whereby tables are broken down in a controlled manner with an aim of reducing data redundancy. Normalization is usually a sequence of steps which are also called normal forms (NF). The First Normal Form (1NF) and Second Normal Form (2NF) are very important towards the achievement of a normalized database. ### Second Normal Form\nSecond Normal Form (2NF) is based on the concept of fully functional dependency. For a table to be in 2NF, it must first meet the requirements of First Normal Form (1NF), meaning all columns should contain single, indivisible values without any repeating groups."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "attribute",
        "question": "What is attribute?",
        "answer": "It refers to the process of arranging the attributes and relations of a database in order to minimize data anomalies such as update, insert and delete anomalies. Where 1NF is centered on the removal of multiple values in an attribute, 2NF is associated with the issue ofpartial dependencies. In other words,\n\nA relation that is in First Normal Form and every non-prime attribute is fully functionally dependent on the candidate key, then the relation is in Second Normal Form (2NF). Note –If the proper subset of the candidate key determines a non-prime attribute, it is called  partial dependency. If a partial dependency exists, we remove the partially dependent attribute(s) from the relation by placing them in a new relation along with a copy of their determinant."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "form",
        "question": "What is form?",
        "answer": "Normalization is usually a sequence of steps which are also called normal forms (NF). The First Normal Form (1NF) and Second Normal Form (2NF) are very important towards the achievement of a normalized database. ### Second Normal Form\nSecond Normal Form (2NF) is based on the concept of fully functional dependency. For a table to be in 2NF, it must first meet the requirements of First Normal Form (1NF), meaning all columns should contain single, indivisible values without any repeating groups. In other words,\n\nA relation that is in First Normal Form and every non-prime attribute is fully functionally dependent on the candidate key, then the relation is in Second Normal Form (2NF)."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "relation",
        "question": "What is relation?",
        "answer": "It refers to the process of arranging the attributes and relations of a database in order to minimize data anomalies such as update, insert and delete anomalies. In other words,\n\nA relation that is in First Normal Form and every non-prime attribute is fully functionally dependent on the candidate key, then the relation is in Second Normal Form (2NF). Thenormalizationof 1NF relations to 2NF involves theremoval of partial dependencies. If a partial dependency exists, we remove the partially dependent attribute(s) from the relation by placing them in a new relation along with a copy of their determinant. • Therefore, Non-prime attribute COURSE_FEE is dependent on a proper subset of the candidate key, which is a partial dependency and so this relation is not in 2NF."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "course_no",
        "question": "What is course_no?",
        "answer": "Here, COURSE_FEE cannot alone decide the value of COURSE_NO or STUD_NO. • COURSE_FEE together with STUD_NO cannot decide the value of COURSE_NO. • COURSE_FEE together with COURSE_NO cannot decide the value of STUD_NO. • Thecandidate keyfor this table is{STUD_NO, COURSE_NO}because the combination of these two columns uniquely identifies each row in the table. • COURSE_FEE is a non-prime attribute because it is not part of the candidate key{STUD_NO, COURSE_NO}."
    },
    {
        "topic": "second-normal-form-2nf",
        "subtopic": "course_fee",
        "question": "What is course_fee?",
        "answer": "Here, COURSE_FEE cannot alone decide the value of COURSE_NO or STUD_NO. • COURSE_FEE together with STUD_NO cannot decide the value of COURSE_NO. • COURSE_FEE together with COURSE_NO cannot decide the value of STUD_NO. • COURSE_FEE is a non-prime attribute because it is not part of the candidate key{STUD_NO, COURSE_NO}. • But, COURSE_NO -> COURSE_FEE, i.e., COURSE_FEE is dependent on COURSE_NO, which is a proper subset of the candidate key."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nIn SQL, theCROSS JOINis a unique join operation that returns theCartesian productof two or more tables. In this article, we will learn the CROSS JOIN operation, itssyntax, andpractical examplesto clarify how and when to use it effectively. ### What is SQL CROSS JOIN? Cross Join in SQLproduces a result set that contains the cartesian product of two or more tables. Cross join is also called aCartesian Join."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "cross",
        "question": "What is cross?",
        "answer": "• \n• \n• \n\nIn SQL, theCROSS JOINis a unique join operation that returns theCartesian productof two or more tables. In this article, we will learn the CROSS JOIN operation, itssyntax, andpractical examplesto clarify how and when to use it effectively. ### What is SQL CROSS JOIN? Cross Join in SQLproduces a result set that contains the cartesian product of two or more tables. Cross join is also called aCartesian Join."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "• \n• \n• \n\nIn SQL, theCROSS JOINis a unique join operation that returns theCartesian productof two or more tables. Cross Join in SQLproduces a result set that contains the cartesian product of two or more tables. In this CROSS JOIN tutorial, we will use the following two tables in examples:\n\nTable 1- Customer\n\nTable 2- Orders\n\nTo create both these tables on your system, you can write the following code:\n\n\n### Example 1: CROSS JOIN\nIn this example, we will use the CROSS JOIN command to match the data of the Customer and Orders table. Query:\n\n\n```python\nSELECT*FROMCUSTOMERCROSS JOINORDERS;\n```\nOutput:\n\nCross Join\n\nAs we can see, whether the other table matches or not, the CROSS JOIN keyword returns all similar records from both tables. ### Important Points About CROSS JOIN\n• CROSS JOIN performs the cross-product of records from two or more joined tables."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nIn SQL, theCROSS JOINis a unique join operation that returns theCartesian productof two or more tables. This means it matches each row from the left table with every row from the right table, resulting in a combination of all possible pairs of records. Cross Join in SQLproduces a result set that contains the cartesian product of two or more tables. CROSS JOIN is the best choice when we need to match each row of one table to every other row of another table. Cross Join B/W Two Sets\n\nSyntax:\n\nSELECT*FROMtable1\n\nCROSS JOINtable2;\n\n\n### Examples of SQL CROSS JOIN\nLet’s look at some examples of CROSS JOIN statement inSQLto understand it’s working."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nIn SQL, theCROSS JOINis a unique join operation that returns theCartesian productof two or more tables. ### What is SQL CROSS JOIN? Cross Join in SQLproduces a result set that contains the cartesian product of two or more tables. Cross Join B/W Two Sets\n\nSyntax:\n\nSELECT*FROMtable1\n\nCROSS JOINtable2;\n\n\n### Examples of SQL CROSS JOIN\nLet’s look at some examples of CROSS JOIN statement inSQLto understand it’s working. • SQL CROSS JOIN with condition of WHERE Clause operates as an INNER JOIN; when used without one, it produces the cartesian product of all the rows from all the tables provided in the SQL query."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "rows",
        "question": "What is rows?",
        "answer": "Therefore, if there are rows in “Customers” or “Orders” that do not match any entries in either table, those rows will also be listed. • It is used when we want every possible combination of rows to be present in a database’s tables. • SQL CROSS JOIN with condition of WHERE Clause operates as an INNER JOIN; when used without one, it produces the cartesian product of all the rows from all the tables provided in the SQL query. ### Conclusion\nThe SQL CROSS JOIN is a powerful tool for generating all possible combinations of rows from two or more tables."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "records",
        "question": "What is records?",
        "answer": "This means it matches each row from the left table with every row from the right table, resulting in a combination of all possible pairs of records. It is helpful in many applications where we need to obtain paired combinations of records. Query:\n\n\n```python\nSELECT*FROMCUSTOMERCROSS JOINORDERS;\n```\nOutput:\n\nCross Join\n\nAs we can see, whether the other table matches or not, the CROSS JOIN keyword returns all similar records from both tables. ### Important Points About CROSS JOIN\n• CROSS JOIN performs the cross-product of records from two or more joined tables."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "row",
        "question": "What is row?",
        "answer": "This means it matches each row from the left table with every row from the right table, resulting in a combination of all possible pairs of records. CROSS JOIN is the best choice when we need to match each row of one table to every other row of another table. Therefore, if there are rows in “Customers” or “Orders” that do not match any entries in either table, those rows will also be listed. • It is used when we want every possible combination of rows to be present in a database’s tables. • SQL CROSS JOIN with condition of WHERE Clause operates as an INNER JOIN; when used without one, it produces the cartesian product of all the rows from all the tables provided in the SQL query."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "use",
        "question": "What is use?",
        "answer": "In this article, we will learn the CROSS JOIN operation, itssyntax, andpractical examplesto clarify how and when to use it effectively. When CROSS JOIN is used with aWHERE clause, it behaves likeINNER JOIN, filtering the results based on specific conditions. In this CROSS JOIN tutorial, we will use the following two tables in examples:\n\nTable 1- Customer\n\nTable 2- Orders\n\nTo create both these tables on your system, you can write the following code:\n\n\n### Example 1: CROSS JOIN\nIn this example, we will use the CROSS JOIN command to match the data of the Customer and Orders table. • It is used when we want every possible combination of rows to be present in a database’s tables. • SQL CROSS JOIN with condition of WHERE Clause operates as an INNER JOIN; when used without one, it produces the cartesian product of all the rows from all the tables provided in the SQL query."
    },
    {
        "topic": "sql-cross-join",
        "subtopic": "used",
        "question": "What is used?",
        "answer": "When CROSS JOIN is used with aWHERE clause, it behaves likeINNER JOIN, filtering the results based on specific conditions. • It is used when we want every possible combination of rows to be present in a database’s tables. • SQL CROSS JOIN with condition of WHERE Clause operates as an INNER JOIN; when used without one, it produces the cartesian product of all the rows from all the tables provided in the SQL query. However, it should be used with caution, especially with large datasets, as it can quickly result in huge result sets that could impact performance."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nInSQL, theFULL JOIN(orFULL OUTER JOIN) is a powerful technique used to combine records from two or more tables. Unlike an INNER JOIN, which only returns rows where there are matches in both tables, aFULL JOIN retrieves all rows from both tables, filling inNULLvalues where matches do not exist. In this article, We will learn aboutSQL FULL JOINby understanding various examples in detail. In this article, we will delve into the concept of SQL FULL JOIN, understand its syntax, and explore practical examples to help you master its use in SQL queries. ### SQL FULL JOIN\n• TheFULL JOINorFULL OUTER JOINinSQLis used to retrieve all rows from both tables involved in thejoin, regardless of whether there is a match between the rows in the two tables."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "• \n• \n• \n\nInSQL, theFULL JOIN(orFULL OUTER JOIN) is a powerful technique used to combine records from two or more tables. Unlike an INNER JOIN, which only returns rows where there are matches in both tables, aFULL JOIN retrieves all rows from both tables, filling inNULLvalues where matches do not exist. ### SQL FULL JOIN\n• TheFULL JOINorFULL OUTER JOINinSQLis used to retrieve all rows from both tables involved in thejoin, regardless of whether there is a match between the rows in the two tables. Tip: We can useFULL JOINto combine multiple tables, by sequentially performingFULL JOINon two tables at a time. • ON table1.column = table2.column: Defines the condition to match rows between the two tables."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nInSQL, theFULL JOIN(orFULL OUTER JOIN) is a powerful technique used to combine records from two or more tables. In this article, We will learn aboutSQL FULL JOINby understanding various examples in detail. In this article, we will delve into the concept of SQL FULL JOIN, understand its syntax, and explore practical examples to help you master its use in SQL queries. ### SQL FULL JOIN\n• TheFULL JOINorFULL OUTER JOINinSQLis used to retrieve all rows from both tables involved in thejoin, regardless of whether there is a match between the rows in the two tables. ### Examples of SQL FULL JOIN\nLet's look at some examples of the FULL JOIN in SQL and understand it's working."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "rows",
        "question": "What is rows?",
        "answer": "Unlike an INNER JOIN, which only returns rows where there are matches in both tables, aFULL JOIN retrieves all rows from both tables, filling inNULLvalues where matches do not exist. ### SQL FULL JOIN\n• TheFULL JOINorFULL OUTER JOINinSQLis used to retrieve all rows from both tables involved in thejoin, regardless of whether there is a match between the rows in the two tables. • ON table1.column = table2.column: Defines the condition to match rows between the two tables. ### Conclusion\nTheFULL JOINin SQL is an essential tool when you need to combine data from multiple tables while ensuring that no rows are omitted, even if there are no matches between the tables."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "book_id",
        "question": "What is book_id?",
        "answer": "Query:\n\n\n```python\nSELECTb.BOOK_ID,b.BOOK_NAME,a.AUTHOR_NAME,p.PUBLISHER_NAMEFROMBooks bFULL JOIN Authors a ON b.BOOK_ID = a.AUTHOR_IDFULL JOIN Publishers p ON b.BOOK_ID = p.PUBLISHER_ID;\n```\nOutput:\n\nExplanation:\n\nIn this query, we usedFULL JOINto join three tables:Books,Authors, andPublishers. Query:\n\n\n```python\nSELECTb.BOOK_ID,b.BOOK_NAME,a.AUTHOR_NAME,p.PUBLISHER_NAMEFROMBooks bFULL JOIN Authors a ON b.BOOK_ID = a.AUTHOR_IDFULL JOIN Publishers p ON b.BOOK_ID = p.PUBLISHER_IDWHEREb.BOOK_NAME LIKE '%Sharma%';\n```\nOutput:\n\nExplanation:\n\nIn this example, theWHEREclause filters out all books that do not contain the word \"Sharma\" in their name."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nInSQL, theFULL JOIN(orFULL OUTER JOIN) is a powerful technique used to combine records from two or more tables. Unlike an INNER JOIN, which only returns rows where there are matches in both tables, aFULL JOIN retrieves all rows from both tables, filling inNULLvalues where matches do not exist. ### SQL FULL JOIN\n• TheFULL JOINorFULL OUTER JOINinSQLis used to retrieve all rows from both tables involved in thejoin, regardless of whether there is a match between the rows in the two tables. • When there is no match, the result will includeNULLsfor the columns of the table that do not have a matching row. Tip: We can useFULL JOINto combine multiple tables, by sequentially performingFULL JOINon two tables at a time."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "columns",
        "question": "What is columns?",
        "answer": "• When there is no match, the result will includeNULLsfor the columns of the table that do not have a matching row. Syntax:\n\n\n```python\nSELECT columnsFROM table1FULL JOIN table2ON table1.column = table2.column;\n```\nExplanation:\n\n• SELECT columns: Specifies the columns to retrieve. ### Table 1- Students\n\n### Table 2- Library\n\n### Example 1: Joining Multiple Tables with Full Join\nWe want to demonstrate how to useFULL JOINto combine two or more tables based on common columns. If any book didn't have an author or publisher, the result would still include that row withNULLin the respective columns."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "column",
        "question": "What is column?",
        "answer": "• When there is no match, the result will includeNULLsfor the columns of the table that do not have a matching row. Syntax:\n\n\n```python\nSELECT columnsFROM table1FULL JOIN table2ON table1.column = table2.column;\n```\nExplanation:\n\n• SELECT columns: Specifies the columns to retrieve. • ON table1.column = table2.column: Defines the condition to match rows between the two tables. ### Table 1- Students\n\n### Table 2- Library\n\n### Example 1: Joining Multiple Tables with Full Join\nWe want to demonstrate how to useFULL JOINto combine two or more tables based on common columns. If any book didn't have an author or publisher, the result would still include that row withNULLin the respective columns."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "thefull",
        "question": "What is thefull?",
        "answer": "• \n• \n• \n\nInSQL, theFULL JOIN(orFULL OUTER JOIN) is a powerful technique used to combine records from two or more tables. ### SQL FULL JOIN\n• TheFULL JOINorFULL OUTER JOINinSQLis used to retrieve all rows from both tables involved in thejoin, regardless of whether there is a match between the rows in the two tables. TheFULL JOINensures that all records from both tables are included, whether or not they match. ### Conclusion\nTheFULL JOINin SQL is an essential tool when you need to combine data from multiple tables while ensuring that no rows are omitted, even if there are no matches between the tables."
    },
    {
        "topic": "sql-full-join",
        "subtopic": "matches",
        "question": "What is matches?",
        "answer": "Unlike an INNER JOIN, which only returns rows where there are matches in both tables, aFULL JOIN retrieves all rows from both tables, filling inNULLvalues where matches do not exist. This query retrieves all records from bothtable1andtable2, returning NULL where there are no matches. ### Conclusion\nTheFULL JOINin SQL is an essential tool when you need to combine data from multiple tables while ensuring that no rows are omitted, even if there are no matches between the tables."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "group",
        "question": "What is group?",
        "answer": "• \n• \n• \n\nTheGROUP BYstatement in SQL is used fororganizingand summarizing data based on identical values in specified columns. By using the GROUP BY clause, users can apply aggregate functions likeSUM, COUNT, AVG, MIN, andMAXto each group, making it easier to perform detailed data analysis. In this article, we will learn the SQL GROUP BY syntax, explore practical examples with single and multiple columns, and demonstrate advanced use cases with theHAVINGclause for conditional grouping. Whether you’re new toSQLor an experienced professional, this article will help you master the GROUP BY clause for efficient data querying. ### GROUP BY Clause in SQL\nTheGROUP BYstatement in SQL is used to arrange identical data into groups based on specified columns."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "clause",
        "question": "What is clause?",
        "answer": "By using the GROUP BY clause, users can apply aggregate functions likeSUM, COUNT, AVG, MIN, andMAXto each group, making it easier to perform detailed data analysis. In this article, we will learn the SQL GROUP BY syntax, explore practical examples with single and multiple columns, and demonstrate advanced use cases with theHAVINGclause for conditional grouping. Whether you’re new toSQLor an experienced professional, this article will help you master the GROUP BY clause for efficient data querying. ### GROUP BY Clause in SQL\nTheGROUP BYstatement in SQL is used to arrange identical data into groups based on specified columns. If a particular column has the same values in multiple rows, theGROUP BYclause will group these rows together."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "output",
        "question": "What is output?",
        "answer": "```python\nINSERT INTO emp (emp_no, name, sal, age) VALUES(1, 'Aarav', 50000.00, 25),(2, 'Aditi', 60000.50, 30),(3, 'Aarav', 75000.75, 35),(4, 'Anjali', 45000.25, 28),(5, 'Chetan', 80000.00, 32),(6, 'Divya', 65000.00, 27),(7, 'Gaurav', 55000.50, 29),(8, 'Divya', 72000.75, 31),(9, 'Gaurav', 48000.25, 26),(10, 'Divya', 83000.00, 33);SELECT * from emp;\n```\nOutput:\n\nEmp TABLE\n\nStudent Table:\n\n\n```python\nCREATE TABLE student (name VARCHAR(50),year INT,subject VARCHAR(50));INSERT INTO student (name, year, subject) VALUES('Alice', 1, 'Mathematics'),('Bob', 2, 'English'),('Charlie', 3, 'Science'),('David', 1, 'Mathematics'),('Emily', 2, 'English'),('Frank', 3, 'Science');\n```\nOutput:\n\nStudent TABLE\n\n\n### Example 1 : Group By Single Column\nGroup By single column means, placing all the rows with the same value of only that particular column in one group. Consider the query as shown below:\n\nQuery:\n\n\n```python\nSELECT name, SUM(sal) FROM empGROUP BY name;\n```\nOutput:\n\nOutput\n\nExplanations:\n\nAs you can see in the above output, the rows with duplicate NAMEs are grouped under the same NAME and their corresponding SALARY is the sum of the SALARY of duplicate rows. Consider the below query:\n\nQuery:\n\n\n```python\nSELECT SUBJECT, YEAR, Count(*)FROM StudentGROUP BY SUBJECT, YEAR;\n```\nOutput:\n\nOutput\n\nExplantions:\n\nAs we can see in the above output the students with both the same SUBJECT and YEAR are placed in the same group. ### Example:\n\n```python\nSELECT NAME, SUM(sal) FROM EmpGROUP BY nameHAVING SUM(sal)>50000;\n```\nOutput:\n\nOutput\n\nExplanation:\n\nIn the result, only employees whose total salary (SUM(sal)) exceeds50,000are displayed. For example, ifAnjalihas a total salary less than50,000, she will be excluded from the output."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "Syntax:\n\nSELECT column1, function_name(column2)\n\nFROM table_name\n\nGROUP BY column1, column2\n\nKey Terms\n\n• function_name: Name of the function used for example, SUM() , AVG(). • table_name: Name of the table. ### Examples of GROUP BY in SQL\nLet’s assume that we have two tablesEmployeeandStudentSample Table is as follows after adding two tables we will do some specific operations to learn about GROUP BY. Employee Table:\n\n\n```python\nCREATE TABLE emp (emp_no INT PRIMARY KEY,name VARCHAR(50),sal DECIMAL(10,2),age INT);\n```\nInsert some random data into a table and then we will perform some operations in GROUP BY. ```python\nINSERT INTO emp (emp_no, name, sal, age) VALUES(1, 'Aarav', 50000.00, 25),(2, 'Aditi', 60000.50, 30),(3, 'Aarav', 75000.75, 35),(4, 'Anjali', 45000.25, 28),(5, 'Chetan', 80000.00, 32),(6, 'Divya', 65000.00, 27),(7, 'Gaurav', 55000.50, 29),(8, 'Divya', 72000.75, 31),(9, 'Gaurav', 48000.25, 26),(10, 'Divya', 83000.00, 33);SELECT * from emp;\n```\nOutput:\n\nEmp TABLE\n\nStudent Table:\n\n\n```python\nCREATE TABLE student (name VARCHAR(50),year INT,subject VARCHAR(50));INSERT INTO student (name, year, subject) VALUES('Alice', 1, 'Mathematics'),('Bob', 2, 'English'),('Charlie', 3, 'Science'),('David', 1, 'Mathematics'),('Emily', 2, 'English'),('Frank', 3, 'Science');\n```\nOutput:\n\nStudent TABLE\n\n\n### Example 1 : Group By Single Column\nGroup By single column means, placing all the rows with the same value of only that particular column in one group."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "used",
        "question": "What is used?",
        "answer": "• \n• \n• \n\nTheGROUP BYstatement in SQL is used fororganizingand summarizing data based on identical values in specified columns. ### GROUP BY Clause in SQL\nTheGROUP BYstatement in SQL is used to arrange identical data into groups based on specified columns. • GROUP BY clause is used with theSELECTstatement. • In the query, the GROUP BY clause is placed before theORDERBY clause if used. Syntax:\n\nSELECT column1, function_name(column2)\n\nFROM table_name\n\nGROUP BY column1, column2\n\nKey Terms\n\n• function_name: Name of the function used for example, SUM() , AVG()."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "sum",
        "question": "What is sum?",
        "answer": "• \n• \n• \n\nTheGROUP BYstatement in SQL is used fororganizingand summarizing data based on identical values in specified columns. By using the GROUP BY clause, users can apply aggregate functions likeSUM, COUNT, AVG, MIN, andMAXto each group, making it easier to perform detailed data analysis. Syntax:\n\nSELECT column1, function_name(column2)\n\nFROM table_name\n\nGROUP BY column1, column2\n\nKey Terms\n\n• function_name: Name of the function used for example, SUM() , AVG(). ### Examples of GROUP BY in SQL\nLet’s assume that we have two tablesEmployeeandStudentSample Table is as follows after adding two tables we will do some specific operations to learn about GROUP BY. Consider the query as shown below:\n\nQuery:\n\n\n```python\nSELECT name, SUM(sal) FROM empGROUP BY name;\n```\nOutput:\n\nOutput\n\nExplanations:\n\nAs you can see in the above output, the rows with duplicate NAMEs are grouped under the same NAME and their corresponding SALARY is the sum of the SALARY of duplicate rows."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nTheGROUP BYstatement in SQL is used fororganizingand summarizing data based on identical values in specified columns. By using the GROUP BY clause, users can apply aggregate functions likeSUM, COUNT, AVG, MIN, andMAXto each group, making it easier to perform detailed data analysis. Whether you’re new toSQLor an experienced professional, this article will help you master the GROUP BY clause for efficient data querying. ### GROUP BY Clause in SQL\nTheGROUP BYstatement in SQL is used to arrange identical data into groups based on specified columns. Employee Table:\n\n\n```python\nCREATE TABLE emp (emp_no INT PRIMARY KEY,name VARCHAR(50),sal DECIMAL(10,2),age INT);\n```\nInsert some random data into a table and then we will perform some operations in GROUP BY."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "columns",
        "question": "What is columns?",
        "answer": "• \n• \n• \n\nTheGROUP BYstatement in SQL is used fororganizingand summarizing data based on identical values in specified columns. In this article, we will learn the SQL GROUP BY syntax, explore practical examples with single and multiple columns, and demonstrate advanced use cases with theHAVINGclause for conditional grouping. ### GROUP BY Clause in SQL\nTheGROUP BYstatement in SQL is used to arrange identical data into groups based on specified columns. ### Example 2 : Group By Multiple Columns\nGroup by multiple columns is say, for example,GROUP BY column1, column2. This means placing all the rows with the same values of columnscolumn 1andcolumn 2in one group."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "query",
        "question": "What is query?",
        "answer": "Whether you’re new toSQLor an experienced professional, this article will help you master the GROUP BY clause for efficient data querying. • In the query, the GROUP BY clause is placed after theWHEREclause. • In the query, the GROUP BY clause is placed before theORDERBY clause if used. • In the query, the Group BY clause is placed before the Having clause. Consider the query as shown below:\n\nQuery:\n\n\n```python\nSELECT name, SUM(sal) FROM empGROUP BY name;\n```\nOutput:\n\nOutput\n\nExplanations:\n\nAs you can see in the above output, the rows with duplicate NAMEs are grouped under the same NAME and their corresponding SALARY is the sum of the SALARY of duplicate rows."
    },
    {
        "topic": "sql-group-by",
        "subtopic": "subject",
        "question": "What is subject?",
        "answer": "```python\nINSERT INTO emp (emp_no, name, sal, age) VALUES(1, 'Aarav', 50000.00, 25),(2, 'Aditi', 60000.50, 30),(3, 'Aarav', 75000.75, 35),(4, 'Anjali', 45000.25, 28),(5, 'Chetan', 80000.00, 32),(6, 'Divya', 65000.00, 27),(7, 'Gaurav', 55000.50, 29),(8, 'Divya', 72000.75, 31),(9, 'Gaurav', 48000.25, 26),(10, 'Divya', 83000.00, 33);SELECT * from emp;\n```\nOutput:\n\nEmp TABLE\n\nStudent Table:\n\n\n```python\nCREATE TABLE student (name VARCHAR(50),year INT,subject VARCHAR(50));INSERT INTO student (name, year, subject) VALUES('Alice', 1, 'Mathematics'),('Bob', 2, 'English'),('Charlie', 3, 'Science'),('David', 1, 'Mathematics'),('Emily', 2, 'English'),('Frank', 3, 'Science');\n```\nOutput:\n\nStudent TABLE\n\n\n### Example 1 : Group By Single Column\nGroup By single column means, placing all the rows with the same value of only that particular column in one group. Consider the below query:\n\nQuery:\n\n\n```python\nSELECT SUBJECT, YEAR, Count(*)FROM StudentGROUP BY SUBJECT, YEAR;\n```\nOutput:\n\nOutput\n\nExplantions:\n\nAs we can see in the above output the students with both the same SUBJECT and YEAR are placed in the same group. And those whose only SUBJECT is the same but not YEAR belong to different groups. The Grouped subject and years are(English,2),(Mathematics,1)and(Science,3)."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "having",
        "question": "What is having?",
        "answer": "• \n• \n• \n\nTheHAVINGclause in SQL is used to filter query results based on aggregate functions. Unlike theWHEREclause, which filters individual rows before grouping, theHAVINGclause filters groups of data after aggregation. In this article, we will learn the concept of the HAVING clause, and its syntax, and provide several practical examples\n\n\n### What is the SQL HAVING Clause? The HAVING clause is used to filter the result of theGROUP BYstatement based on the specified conditions. When we need to filter aggregated results, theHAVINGclause is the appropriate choice."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "salary",
        "question": "What is salary?",
        "answer": "Query:\n\n\n```python\n-- Create the Employee table with appropriate data typesCREATE TABLE Employee (EmployeeId int,Name varchar(50),Gender varchar(10),Salary int,Department varchar(20),Experience int -- Changed to int for years of experience);-- Insert multiple rows into the Employee table in a single queryINSERT INTO Employee (EmployeeId, Name, Gender, Salary, Department, Experience)VALUES(5, 'Priya Sharma', 'Female', 45000, 'IT', 2),(6, 'Rahul Patel', 'Male', 65000, 'Sales', 5),(7, 'Nisha Gupta', 'Female', 55000, 'Marketing', 4),(8, 'Vikram Singh', 'Male', 75000, 'Finance', 7),(9, 'Aarti Desai', 'Female', 50000, 'IT', 3);SELECT * FROM Employee;\n```\nOutput:\n\n\n\n\n### Example 1 : Using HAVING to Filter Aggregated Results\nThis employee table will help us understand the HAVING Clause. It contains employee IDs, Name, Gender, department, and salary. To Know the sum of salaries, we will write the query:\n\nQuery:\n\n\n```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY department;\n```\nOutput:\n\n\n\nNow if we need to display the departments where the sum of salaries is 50,000 or more. ```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY departmentHAVING SUM(Salary) >= 50000;\n```\nOutput:\n\n\n\n\n### Example 2:Using HAVING with Multiple Conditions\nIf we want to find the departments where the total salary is greater than or equal to $50,000, and the average salary is greater than $55,000. Query\n\n\n```python\nSELECT Department, SUM(Salary) AS Total_Salary, AVG(Salary) AS Average_SalaryFROM EmployeeGROUP BY DepartmentHAVING SUM(Salary) >= 50000 AND AVG(Salary) > 55000;\n```\nOutput:\n\n\n### Example 3:Using HAVING with COUNT()\nIf we want to find departments where there are more than two employees."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "clause",
        "question": "What is clause?",
        "answer": "• \n• \n• \n\nTheHAVINGclause in SQL is used to filter query results based on aggregate functions. Unlike theWHEREclause, which filters individual rows before grouping, theHAVINGclause filters groups of data after aggregation. In this article, we will learn the concept of the HAVING clause, and its syntax, and provide several practical examples\n\n\n### What is the SQL HAVING Clause? The HAVING clause is used to filter the result of theGROUP BYstatement based on the specified conditions. It was introduced because theWHEREclausecannot be used with aggregate functions."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "department",
        "question": "What is department?",
        "answer": "Query:\n\n\n```python\n-- Create the Employee table with appropriate data typesCREATE TABLE Employee (EmployeeId int,Name varchar(50),Gender varchar(10),Salary int,Department varchar(20),Experience int -- Changed to int for years of experience);-- Insert multiple rows into the Employee table in a single queryINSERT INTO Employee (EmployeeId, Name, Gender, Salary, Department, Experience)VALUES(5, 'Priya Sharma', 'Female', 45000, 'IT', 2),(6, 'Rahul Patel', 'Male', 65000, 'Sales', 5),(7, 'Nisha Gupta', 'Female', 55000, 'Marketing', 4),(8, 'Vikram Singh', 'Male', 75000, 'Finance', 7),(9, 'Aarti Desai', 'Female', 50000, 'IT', 3);SELECT * FROM Employee;\n```\nOutput:\n\n\n\n\n### Example 1 : Using HAVING to Filter Aggregated Results\nThis employee table will help us understand the HAVING Clause. It contains employee IDs, Name, Gender, department, and salary. To Know the sum of salaries, we will write the query:\n\nQuery:\n\n\n```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY department;\n```\nOutput:\n\n\n\nNow if we need to display the departments where the sum of salaries is 50,000 or more. ```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY departmentHAVING SUM(Salary) >= 50000;\n```\nOutput:\n\n\n\n\n### Example 2:Using HAVING with Multiple Conditions\nIf we want to find the departments where the total salary is greater than or equal to $50,000, and the average salary is greater than $55,000. Query\n\n\n```python\nSELECT Department, SUM(Salary) AS Total_Salary, AVG(Salary) AS Average_SalaryFROM EmployeeGROUP BY DepartmentHAVING SUM(Salary) >= 50000 AND AVG(Salary) > 55000;\n```\nOutput:\n\n\n### Example 3:Using HAVING with COUNT()\nIf we want to find departments where there are more than two employees."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "query",
        "question": "What is query?",
        "answer": "• \n• \n• \n\nTheHAVINGclause in SQL is used to filter query results based on aggregate functions. After creating a table we will execute the query. Query:\n\n\n```python\n-- Create the Employee table with appropriate data typesCREATE TABLE Employee (EmployeeId int,Name varchar(50),Gender varchar(10),Salary int,Department varchar(20),Experience int -- Changed to int for years of experience);-- Insert multiple rows into the Employee table in a single queryINSERT INTO Employee (EmployeeId, Name, Gender, Salary, Department, Experience)VALUES(5, 'Priya Sharma', 'Female', 45000, 'IT', 2),(6, 'Rahul Patel', 'Male', 65000, 'Sales', 5),(7, 'Nisha Gupta', 'Female', 55000, 'Marketing', 4),(8, 'Vikram Singh', 'Male', 75000, 'Finance', 7),(9, 'Aarti Desai', 'Female', 50000, 'IT', 3);SELECT * FROM Employee;\n```\nOutput:\n\n\n\n\n### Example 1 : Using HAVING to Filter Aggregated Results\nThis employee table will help us understand the HAVING Clause. To Know the sum of salaries, we will write the query:\n\nQuery:\n\n\n```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY department;\n```\nOutput:\n\n\n\nNow if we need to display the departments where the sum of salaries is 50,000 or more. Query\n\n\n```python\nSELECT Department, SUM(Salary) AS Total_Salary, AVG(Salary) AS Average_SalaryFROM EmployeeGROUP BY DepartmentHAVING SUM(Salary) >= 50000 AND AVG(Salary) > 55000;\n```\nOutput:\n\n\n### Example 3:Using HAVING with COUNT()\nIf we want to find departments where there are more than two employees."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "sum",
        "question": "What is sum?",
        "answer": "It is commonly used with functions likeSUM(),AVG(),COUNT(),MAX(), andMIN(). • Helps generatesummary reportsfrom large datasets. Syntax:\n\nSELECT column_name, AGGREGATE_FUNCTION(column_name)FROM table_nameGROUP BY column_nameHAVING condition;\n\nHere, the function_name is the name of the function used, for example, SUM(), and AVG(). To Know the sum of salaries, we will write the query:\n\nQuery:\n\n\n```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY department;\n```\nOutput:\n\n\n\nNow if we need to display the departments where the sum of salaries is 50,000 or more. ```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY departmentHAVING SUM(Salary) >= 50000;\n```\nOutput:\n\n\n\n\n### Example 2:Using HAVING with Multiple Conditions\nIf we want to find the departments where the total salary is greater than or equal to $50,000, and the average salary is greater than $55,000."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "employee",
        "question": "What is employee?",
        "answer": "### SQL HAVING Clause Examples\nHere first we create a database name as “Company”, then we will create a table named “Employee” in the database. Query:\n\n\n```python\n-- Create the Employee table with appropriate data typesCREATE TABLE Employee (EmployeeId int,Name varchar(50),Gender varchar(10),Salary int,Department varchar(20),Experience int -- Changed to int for years of experience);-- Insert multiple rows into the Employee table in a single queryINSERT INTO Employee (EmployeeId, Name, Gender, Salary, Department, Experience)VALUES(5, 'Priya Sharma', 'Female', 45000, 'IT', 2),(6, 'Rahul Patel', 'Male', 65000, 'Sales', 5),(7, 'Nisha Gupta', 'Female', 55000, 'Marketing', 4),(8, 'Vikram Singh', 'Male', 75000, 'Finance', 7),(9, 'Aarti Desai', 'Female', 50000, 'IT', 3);SELECT * FROM Employee;\n```\nOutput:\n\n\n\n\n### Example 1 : Using HAVING to Filter Aggregated Results\nThis employee table will help us understand the HAVING Clause. It contains employee IDs, Name, Gender, department, and salary. To Know the sum of salaries, we will write the query:\n\nQuery:\n\n\n```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY department;\n```\nOutput:\n\n\n\nNow if we need to display the departments where the sum of salaries is 50,000 or more. ```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY departmentHAVING SUM(Salary) >= 50000;\n```\nOutput:\n\n\n\n\n### Example 2:Using HAVING with Multiple Conditions\nIf we want to find the departments where the total salary is greater than or equal to $50,000, and the average salary is greater than $55,000."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "avg",
        "question": "What is avg?",
        "answer": "It is commonly used with functions likeSUM(),AVG(),COUNT(),MAX(), andMIN(). Syntax:\n\nSELECT column_name, AGGREGATE_FUNCTION(column_name)FROM table_nameGROUP BY column_nameHAVING condition;\n\nHere, the function_name is the name of the function used, for example, SUM(), and AVG(). Query\n\n\n```python\nSELECT Department, SUM(Salary) AS Total_Salary, AVG(Salary) AS Average_SalaryFROM EmployeeGROUP BY DepartmentHAVING SUM(Salary) >= 50000 AND AVG(Salary) > 55000;\n```\nOutput:\n\n\n### Example 3:Using HAVING with COUNT()\nIf we want to find departments where there are more than two employees. ### Example 4:Using HAVING with AVG()\nIn this example, let’s find out theaverage salaryfor each department and use the HAVING clause to display only those departments where the average salary is greater than $50,000. Query:\n\n\n```python\nSELECT Department, AVG(Salary) AS Average_SalaryFROM EmployeeGROUP BY DepartmentHAVING AVG(Salary) > 50000;\n```\nOutput:\n\n\n### Having vs WHERE\n\n### Conclusion\nTheHAVING clauseis an essential tool in SQL for filtering results based onaggregated data."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "used",
        "question": "What is used?",
        "answer": "• \n• \n• \n\nTheHAVINGclause in SQL is used to filter query results based on aggregate functions. It is commonly used with functions likeSUM(),AVG(),COUNT(),MAX(), andMIN(). The HAVING clause is used to filter the result of theGROUP BYstatement based on the specified conditions. It was introduced because theWHEREclausecannot be used with aggregate functions. Key Features of the HAVING Clause\n\n• Used to filter grouped data based on aggregate functions."
    },
    {
        "topic": "sql-having-clause-with-examples",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "Unlike theWHEREclause, which filters individual rows before grouping, theHAVINGclause filters groups of data after aggregation. It allows filtering grouped data usingBoolean conditions(AND,OR). Similar toWHERE clause, it helps apply conditions but specifically works withgrouped data. Key Features of the HAVING Clause\n\n• Used to filter grouped data based on aggregate functions. • Helps generatesummary reportsfrom large datasets."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "It allows us to combine two or more tables based on a related column, returning only the records that satisfy the join condition\n\nThis article will explore the fundamentals ofINNER JOIN, its syntax, practical examples, and the key differences betweenINNER JOINand other types of joins, such asOUTER JOIN. TheINNER JOINclause in SQL is used tocombine recordsfromtwoormore tables. The result contains only the rows that havematching valuesin both tables based on a specific condition. This makesINNER JOINa valuable tool when we need to work with related data across multiple tables in a database. The key feature of anINNER JOINis that itfilters out rowsfrom the result where there isno matching datain both tables."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nSQL INNER JOINis a powerful and frequently used operation inrelational databases. It allows us to combine two or more tables based on a related column, returning only the records that satisfy the join condition\n\nThis article will explore the fundamentals ofINNER JOIN, its syntax, practical examples, and the key differences betweenINNER JOINand other types of joins, such asOUTER JOIN. ### What is SQL Inner Join? TheINNER JOINclause in SQL is used tocombine recordsfromtwoormore tables. This makesINNER JOINa valuable tool when we need to work with related data across multiple tables in a database."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "inner",
        "question": "What is inner?",
        "answer": "• \n• \n• \n\nSQL INNER JOINis a powerful and frequently used operation inrelational databases. It allows us to combine two or more tables based on a related column, returning only the records that satisfy the join condition\n\nThis article will explore the fundamentals ofINNER JOIN, its syntax, practical examples, and the key differences betweenINNER JOINand other types of joins, such asOUTER JOIN. ### What is SQL Inner Join? TheINNER JOINclause in SQL is used tocombine recordsfromtwoormore tables. This makesINNER JOINa valuable tool when we need to work with related data across multiple tables in a database."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nSQL INNER JOINis a powerful and frequently used operation inrelational databases. This makesINNER JOINa valuable tool when we need to work with related data across multiple tables in a database. The key feature of anINNER JOINis that itfilters out rowsfrom the result where there isno matching datain both tables. Essentially, it returns a “subset” of the data where the condition is satisfied. Theprofessortable contains data aboutprofessors, while theteachestable holds information about thecoursesthat these professors teach."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "records",
        "question": "What is records?",
        "answer": "It allows us to combine two or more tables based on a related column, returning only the records that satisfy the join condition\n\nThis article will explore the fundamentals ofINNER JOIN, its syntax, practical examples, and the key differences betweenINNER JOINand other types of joins, such asOUTER JOIN. TheINNER JOINclause in SQL is used tocombine recordsfromtwoormore tables. TheINNER JOINoperation ensures that only the records where a professor is assigned a course are included in the result. ### Difference Between INNER JOIN and OUTER JOIN\n\n### INNER JOIN\n• Returns records that have matching values in both tables. • Does not include records where there is no match between the tables."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nSQL INNER JOINis a powerful and frequently used operation inrelational databases. ### What is SQL Inner Join? TheINNER JOINclause in SQL is used tocombine recordsfromtwoormore tables. ### Example of SQL INNER JOIN\nConsider two tables:professorandteaches. ### Key Points About SQL INNER JOIN\n1."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "professor",
        "question": "What is professor?",
        "answer": "### Example of SQL INNER JOIN\nConsider two tables:professorandteaches. Theprofessortable contains data aboutprofessors, while theteachestable holds information about thecoursesthat these professors teach. The common column between these tables isIDfrom theprofessortable andprof_idfrom theteachestable. ### professor table\n\n### teacher Table\nNow, we will write a query to retrieve thecourse_id,prof_id,professor's Name, and theirSalaryby joining theprofessorandteachestables usingINNER JOIN. The query joins theprofessortable and theteachestable based on the condition that theIDfrom theprofessortable matches theprof_idin theteachestable."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "condition",
        "question": "What is condition?",
        "answer": "It allows us to combine two or more tables based on a related column, returning only the records that satisfy the join condition\n\nThis article will explore the fundamentals ofINNER JOIN, its syntax, practical examples, and the key differences betweenINNER JOINand other types of joins, such asOUTER JOIN. The result contains only the rows that havematching valuesin both tables based on a specific condition. Essentially, it returns a “subset” of the data where the condition is satisfied. • column_name: The columns from both tables that we want to match based on the join condition. The query joins theprofessortable and theteachestable based on the condition that theIDfrom theprofessortable matches theprof_idin theteachestable."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "match",
        "question": "What is match?",
        "answer": "The result contains only the rows that havematching valuesin both tables based on a specific condition. The key feature of anINNER JOINis that itfilters out rowsfrom the result where there isno matching datain both tables. • column_name: The columns from both tables that we want to match based on the join condition. The query joins theprofessortable and theteachestable based on the condition that theIDfrom theprofessortable matches theprof_idin theteachestable. ### Difference Between INNER JOIN and OUTER JOIN\n\n### INNER JOIN\n• Returns records that have matching values in both tables."
    },
    {
        "topic": "sql-inner-join",
        "subtopic": "multiple",
        "question": "What is multiple?",
        "answer": "This makesINNER JOINa valuable tool when we need to work with related data across multiple tables in a database. Combines Data from Multiple Tables: INNER JOINallows us to combine data from multiple tables based on common columns, making it possible to work with related data stored in different tables. Simplifies Complex Queries: INNER JOINsimplifies complex queries by allowing you to work with multiple tables at once. It reduces the need for multiple subqueries and makes database management more efficient. ### Conclusion\nSQL INNER JOINis an essential tool for combining related data across multiple tables."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nSQLjoinsare the foundation ofdatabase management systems, enabling the combination of data from multiple tables based on relationships between columns. Joins allowefficient data retrieval, which is essential for generating meaningful observations and solvingcomplex business queries. Understanding SQL join types, such asINNER JOIN,LEFT JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN, is critical for working with relational databases. In this article, we will cover thedifferent types of SQL joins,includingINNER JOIN,LEFT OUTER JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN. Each join type will be explained with examples,syntax, and practical use cases to help us understand when and how to use these joins effectively."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "• \n• \n• \n\nSQLjoinsare the foundation ofdatabase management systems, enabling the combination of data from multiple tables based on relationships between columns. SQL JOINclause is used toqueryandaccess datafrom multiple tables by establishinglogical relationshipsbetween them. It can access data from multiple tables simultaneously using common key values shared across different tables. We can useSQL JOINwithmultiple tables. ### Example of SQL JOINS\nConsider the two tables,StudentandStudentCourse, which share a common columnROLL_NO."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nSQLjoinsare the foundation ofdatabase management systems, enabling the combination of data from multiple tables based on relationships between columns. Understanding SQL join types, such asINNER JOIN,LEFT JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN, is critical for working with relational databases. In this article, we will cover thedifferent types of SQL joins,includingINNER JOIN,LEFT OUTER JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN. ### What is SQL Join? SQL JOINclause is used toqueryandaccess datafrom multiple tables by establishinglogical relationshipsbetween them."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nSQLjoinsare the foundation ofdatabase management systems, enabling the combination of data from multiple tables based on relationships between columns. SQL JOINclause is used toqueryandaccess datafrom multiple tables by establishinglogical relationshipsbetween them. It can access data from multiple tables simultaneously using common key values shared across different tables. We can useSQL JOINwithmultiple tables. ### Example of SQL JOINS\nConsider the two tables,StudentandStudentCourse, which share a common columnROLL_NO."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "table1",
        "question": "What is table1?",
        "answer": "Syntax\n\n\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1INNER JOIN table2ON  table1.matching_column = table2.matching_column;\n```\nKey Terms\n\n• table1: First table. Syntax\n\n\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1LEFT JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms\n\n• table1:First table. Syntax\n\n\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1RIGHT JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms\n\n• table1: First table. Syntax\n\n\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1FULL JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms\n\n• table1: First table."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "rows",
        "question": "What is rows?",
        "answer": "SQL INNER JOIN\nTheINNER JOINkeyword selects all rows from both the tables as long as the condition is satisfied. This keyword will create theresult-setby combining all rows from both the tables where thecondition satisfiesi.e value of the common field will be the same. SQL LEFT JOIN\nLEFT JOINreturns all the rows of the table on the left side of the join and matches rows for the table on the right side of the join. For the rows for which there isno matching rowon the right side, the result-set will containnull. ### LEFT JOIN Example\nIn this example, theLEFT JOINretrieves all rows from theStudenttable and the matching rows from theStudentCoursetable based on theROLL_NOcolumn."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "left",
        "question": "What is left?",
        "answer": "Understanding SQL join types, such asINNER JOIN,LEFT JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN, is critical for working with relational databases. In this article, we will cover thedifferent types of SQL joins,includingINNER JOIN,LEFT OUTER JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN. Below, we explain the most commonly used join types with syntax and examples:\n\n• INNER JOIN\n• LEFT JOIN\n• RIGHT JOIN\n• FULL JOIN\n• Natural Join\n\n\n### 1. SQL LEFT JOIN\nLEFT JOINreturns all the rows of the table on the left side of the join and matches rows for the table on the right side of the join. LEFT JOIN is also known asLEFT OUTER JOIN."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "student",
        "question": "What is student?",
        "answer": "### Example of SQL JOINS\nConsider the two tables,StudentandStudentCourse, which share a common columnROLL_NO. Using SQL JOINS, we can combine data from these tables based on theirrelationship, allowing us to retrieve meaningful information like student details along with theirenrolled courses. ### Student Table\n\n### StudentCourseTable\n\n\nBoth these tables are connected by one common key (column) i.eROLL_NO. We can perform a JOIN operation using the given SQL query:\n\nQuery:\n\n\n```python\nSELECT s.roll_no, s.name, s.address, s.phone, s.age, sc.course_idFROM Student sJOIN StudentCourse sc ON s.roll_no = sc.roll_no;\n```\nOutput\n\n\n### Types of JOIN in SQL\nThere are many types of Joins inSQL. This query will show the names and age of students enrolled in different courses."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "common",
        "question": "What is common?",
        "answer": "It can access data from multiple tables simultaneously using common key values shared across different tables. ### Example of SQL JOINS\nConsider the two tables,StudentandStudentCourse, which share a common columnROLL_NO. ### Student Table\n\n### StudentCourseTable\n\n\nBoth these tables are connected by one common key (column) i.eROLL_NO. Below, we explain the most commonly used join types with syntax and examples:\n\n• INNER JOIN\n• LEFT JOIN\n• RIGHT JOIN\n• FULL JOIN\n• Natural Join\n\n\n### 1. This keyword will create theresult-setby combining all rows from both the tables where thecondition satisfiesi.e value of the common field will be the same."
    },
    {
        "topic": "sql-join-set-1-inner-left-right-and-full-joins",
        "subtopic": "table2",
        "question": "What is table2?",
        "answer": "Syntax\n\n\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1INNER JOIN table2ON  table1.matching_column = table2.matching_column;\n```\nKey Terms\n\n• table1: First table. • table2: Second table\n• matching_column: Column common to both the tables. Syntax\n\n\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1LEFT JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms\n\n• table1:First table. • table2: Second table\n• matching_column: Column common to both the tables. Syntax\n\n\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1RIGHT JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms\n\n• table1: First table."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "left",
        "question": "What is left?",
        "answer": "• \n• \n• \n\nIn SQL,LEFT JOINretrieves all records from the left table and only the matching records from the right table. This makes LEFT JOIN extremely useful for queries where you need to retain all records from one table, even if there is no corresponding match in the other table. In this article, we will explore theLEFT JOINcommand in SQL, explain its syntax, provide detailed examples, and discuss common use cases to help you master its application. ### LEFT JOIN in SQL\nLEFT JOIN in SQLis used to combine rows fromtwoormore tables, based on a related column between them. It returns all rows from the left table andmatching recordsfrom the right table."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nIn SQL,LEFT JOINretrieves all records from the left table and only the matching records from the right table. When there is no matching record  found,NULLvalues are returned for columns from the right table. This makes LEFT JOIN extremely useful for queries where you need to retain all records from one table, even if there is no corresponding match in the other table. ### LEFT JOIN in SQL\nLEFT JOIN in SQLis used to combine rows fromtwoormore tables, based on a related column between them. It returns all rows from the left table andmatching recordsfrom the right table."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nIn SQL,LEFT JOINretrieves all records from the left table and only the matching records from the right table. This makes LEFT JOIN extremely useful for queries where you need to retain all records from one table, even if there is no corresponding match in the other table. In this article, we will explore theLEFT JOINcommand in SQL, explain its syntax, provide detailed examples, and discuss common use cases to help you master its application. ### LEFT JOIN in SQL\nLEFT JOIN in SQLis used to combine rows fromtwoormore tables, based on a related column between them. ### SQL LEFT JOIN Venn Diagram\nThis VENN diagram shows how a LEFT JOIN works in SQL."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nIn SQL,LEFT JOINretrieves all records from the left table and only the matching records from the right table. In this article, we will explore theLEFT JOINcommand in SQL, explain its syntax, provide detailed examples, and discuss common use cases to help you master its application. ### LEFT JOIN in SQL\nLEFT JOIN in SQLis used to combine rows fromtwoormore tables, based on a related column between them. ### SQL LEFT JOIN Venn Diagram\nThis VENN diagram shows how a LEFT JOIN works in SQL. LEFT JOIN\n\nSyntax:\n\nSELECT column_name(s)FROM tableALEFT JOIN tableB ON tableA.column_name = tableB.column_name;\n\n\n### Examples of SQL LEFT JOIN\nLet’s look at an example ofLEFT JOIN in SQLto understand it better."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "department",
        "question": "What is department?",
        "answer": "Consider two tables:Emp(employees) anddepartment(departments). TheEmptable contains employee details, while thedepartmenttable holds department details. Employee Table\n\n\n```python\nCREATE TABLEEmp (EmpID INT PRIMARY KEY,Name VARCHAR(50),Country VARCHAR(50),Age INT,Salary INT,department_id INT);INSERT INTOEmp (EmpID, Name, Country, Age, Salary, department_id)VALUES(1, 'Shubham', 'India', 23, 30000, 101),(2, 'Aman', 'Australia', 21, 45000, 102),(3, 'Naveen', 'Sri Lanka', 24, 40000, 103),(4, 'Aditya', 'Austria', 21, 35000, 104),(5, 'Nishant', 'Spain', 22, 25000, 101);\n```\nOutput:\n\nEmployee Table\n\nDepartment Table\n\n\n```python\nCREATE TABLEdepartment (department_id INT PRIMARY KEY,department_name VARCHAR(50),department_head VARCHAR(50),location VARCHAR(50));INSERT INTOdepartment (department_id, department_name, department_head, location)VALUES(101, 'Sales', 'Sarah', 'New York'),(102, 'Marketing', 'Jay', 'London'),(103, 'Finance', 'Lavish', 'San Francisco'),(104, 'Engineering', 'Kabir', 'Bangalore');SELECT*FROMdepartment;\n```\nOutput:\n\nDepartment Table\n\n\n### Example 1: Performing a LEFT JOIN\nTo perform left-join onEmployee and Department Tableswe will use the following SQL query:\n\nQuery:\n\n\n```python\nSELECTEmp.EmpID, Emp.Name, department.department_name, department.department_head,department.locationFROMEmpLEFT JOINdepartmentONEmp.department_id = department.department_id;\n```\nOutput:\n\nLEFT JOIN in SQL Example Output\n\nExplanation:\n\nAs left join gives the matching rows and the rows that are present in the left table but not in the right table. Here in this example, we see that the employees that do not work in a particular department, i.e., having dept no values as [NULL], contain [NULL] values of dept name and location after the left join. ### Example 2: SQL LEFT JOIN with WHERE Clause\nIn this example, we will add aWHERE clausethat specifies to only return results where the “location” column in the department table equals ‘Bangalore‘."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "right",
        "question": "What is right?",
        "answer": "• \n• \n• \n\nIn SQL,LEFT JOINretrieves all records from the left table and only the matching records from the right table. When there is no matching record  found,NULLvalues are returned for columns from the right table. It returns all rows from the left table andmatching recordsfrom the right table. If a certain row is present in the left table but not in the right table, the result will include this row withNULL valuesin each column from the right table. If a record from the right table is not on the left, it will not be included in the result."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "records",
        "question": "What is records?",
        "answer": "• \n• \n• \n\nIn SQL,LEFT JOINretrieves all records from the left table and only the matching records from the right table. This makes LEFT JOIN extremely useful for queries where you need to retain all records from one table, even if there is no corresponding match in the other table. It returns all rows from the left table andmatching recordsfrom the right table. ### Important Points About SQL LEFT JOIN\n• LEFT JOIN inSQLreturns all records from the left table and matching records from the right table. • NULL values are included for unmatched records on the right side."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "example",
        "question": "What is example?",
        "answer": "In this article, we will explore theLEFT JOINcommand in SQL, explain its syntax, provide detailed examples, and discuss common use cases to help you master its application. LEFT JOIN\n\nSyntax:\n\nSELECT column_name(s)FROM tableALEFT JOIN tableB ON tableA.column_name = tableB.column_name;\n\n\n### Examples of SQL LEFT JOIN\nLet’s look at an example ofLEFT JOIN in SQLto understand it better. Employee Table\n\n\n```python\nCREATE TABLEEmp (EmpID INT PRIMARY KEY,Name VARCHAR(50),Country VARCHAR(50),Age INT,Salary INT,department_id INT);INSERT INTOEmp (EmpID, Name, Country, Age, Salary, department_id)VALUES(1, 'Shubham', 'India', 23, 30000, 101),(2, 'Aman', 'Australia', 21, 45000, 102),(3, 'Naveen', 'Sri Lanka', 24, 40000, 103),(4, 'Aditya', 'Austria', 21, 35000, 104),(5, 'Nishant', 'Spain', 22, 25000, 101);\n```\nOutput:\n\nEmployee Table\n\nDepartment Table\n\n\n```python\nCREATE TABLEdepartment (department_id INT PRIMARY KEY,department_name VARCHAR(50),department_head VARCHAR(50),location VARCHAR(50));INSERT INTOdepartment (department_id, department_name, department_head, location)VALUES(101, 'Sales', 'Sarah', 'New York'),(102, 'Marketing', 'Jay', 'London'),(103, 'Finance', 'Lavish', 'San Francisco'),(104, 'Engineering', 'Kabir', 'Bangalore');SELECT*FROMdepartment;\n```\nOutput:\n\nDepartment Table\n\n\n### Example 1: Performing a LEFT JOIN\nTo perform left-join onEmployee and Department Tableswe will use the following SQL query:\n\nQuery:\n\n\n```python\nSELECTEmp.EmpID, Emp.Name, department.department_name, department.department_head,department.locationFROMEmpLEFT JOINdepartmentONEmp.department_id = department.department_id;\n```\nOutput:\n\nLEFT JOIN in SQL Example Output\n\nExplanation:\n\nAs left join gives the matching rows and the rows that are present in the left table but not in the right table. Here in this example, we see that the employees that do not work in a particular department, i.e., having dept no values as [NULL], contain [NULL] values of dept name and location after the left join. ### Example 2: SQL LEFT JOIN with WHERE Clause\nIn this example, we will add aWHERE clausethat specifies to only return results where the “location” column in the department table equals ‘Bangalore‘."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "department_id",
        "question": "What is department_id?",
        "answer": "Employee Table\n\n\n```python\nCREATE TABLEEmp (EmpID INT PRIMARY KEY,Name VARCHAR(50),Country VARCHAR(50),Age INT,Salary INT,department_id INT);INSERT INTOEmp (EmpID, Name, Country, Age, Salary, department_id)VALUES(1, 'Shubham', 'India', 23, 30000, 101),(2, 'Aman', 'Australia', 21, 45000, 102),(3, 'Naveen', 'Sri Lanka', 24, 40000, 103),(4, 'Aditya', 'Austria', 21, 35000, 104),(5, 'Nishant', 'Spain', 22, 25000, 101);\n```\nOutput:\n\nEmployee Table\n\nDepartment Table\n\n\n```python\nCREATE TABLEdepartment (department_id INT PRIMARY KEY,department_name VARCHAR(50),department_head VARCHAR(50),location VARCHAR(50));INSERT INTOdepartment (department_id, department_name, department_head, location)VALUES(101, 'Sales', 'Sarah', 'New York'),(102, 'Marketing', 'Jay', 'London'),(103, 'Finance', 'Lavish', 'San Francisco'),(104, 'Engineering', 'Kabir', 'Bangalore');SELECT*FROMdepartment;\n```\nOutput:\n\nDepartment Table\n\n\n### Example 1: Performing a LEFT JOIN\nTo perform left-join onEmployee and Department Tableswe will use the following SQL query:\n\nQuery:\n\n\n```python\nSELECTEmp.EmpID, Emp.Name, department.department_name, department.department_head,department.locationFROMEmpLEFT JOINdepartmentONEmp.department_id = department.department_id;\n```\nOutput:\n\nLEFT JOIN in SQL Example Output\n\nExplanation:\n\nAs left join gives the matching rows and the rows that are present in the left table but not in the right table. Query:\n\n\n```python\nSELECTe.EmpID, e.Name, d.department_name,d.department_head, d.locationFROMEmp eLEFT JOINdepartment dONe.department_id= d.department_idWHEREd.location = 'Bangalore';\n```\nOutput:\n\nSQL LEFT JOIN with WHERE Clause Example\n\n\n### Example 3: SQL LEFT JOIN as Aliases\nIn this query, we’ll use aliases “e” for the Emp table and “d” for the department table. Query:\n\n\n```python\nSELECTe.EmpID, e.Name, d.department_name,d.department_head, d.locationFROMEmp eLEFT JOINdepartment dONe.department_id = d.department_id;\n```\nOutput:\n\nSQL LEFT JOIN as Aliases Example Output\n\n• eis used as an alias forEmp, anddis used fordepartment."
    },
    {
        "topic": "sql-left-join",
        "subtopic": "output",
        "question": "What is output?",
        "answer": "Employee Table\n\n\n```python\nCREATE TABLEEmp (EmpID INT PRIMARY KEY,Name VARCHAR(50),Country VARCHAR(50),Age INT,Salary INT,department_id INT);INSERT INTOEmp (EmpID, Name, Country, Age, Salary, department_id)VALUES(1, 'Shubham', 'India', 23, 30000, 101),(2, 'Aman', 'Australia', 21, 45000, 102),(3, 'Naveen', 'Sri Lanka', 24, 40000, 103),(4, 'Aditya', 'Austria', 21, 35000, 104),(5, 'Nishant', 'Spain', 22, 25000, 101);\n```\nOutput:\n\nEmployee Table\n\nDepartment Table\n\n\n```python\nCREATE TABLEdepartment (department_id INT PRIMARY KEY,department_name VARCHAR(50),department_head VARCHAR(50),location VARCHAR(50));INSERT INTOdepartment (department_id, department_name, department_head, location)VALUES(101, 'Sales', 'Sarah', 'New York'),(102, 'Marketing', 'Jay', 'London'),(103, 'Finance', 'Lavish', 'San Francisco'),(104, 'Engineering', 'Kabir', 'Bangalore');SELECT*FROMdepartment;\n```\nOutput:\n\nDepartment Table\n\n\n### Example 1: Performing a LEFT JOIN\nTo perform left-join onEmployee and Department Tableswe will use the following SQL query:\n\nQuery:\n\n\n```python\nSELECTEmp.EmpID, Emp.Name, department.department_name, department.department_head,department.locationFROMEmpLEFT JOINdepartmentONEmp.department_id = department.department_id;\n```\nOutput:\n\nLEFT JOIN in SQL Example Output\n\nExplanation:\n\nAs left join gives the matching rows and the rows that are present in the left table but not in the right table. Query:\n\n\n```python\nSELECTe.EmpID, e.Name, d.department_name,d.department_head, d.locationFROMEmp eLEFT JOINdepartment dONe.department_id= d.department_idWHEREd.location = 'Bangalore';\n```\nOutput:\n\nSQL LEFT JOIN with WHERE Clause Example\n\n\n### Example 3: SQL LEFT JOIN as Aliases\nIn this query, we’ll use aliases “e” for the Emp table and “d” for the department table. Query:\n\n\n```python\nSELECTe.EmpID, e.Name, d.department_name,d.department_head, d.locationFROMEmp eLEFT JOINdepartment dONe.department_id = d.department_id;\n```\nOutput:\n\nSQL LEFT JOIN as Aliases Example Output\n\n• eis used as an alias forEmp, anddis used fordepartment."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "limit",
        "question": "What is limit?",
        "answer": "• \n• \n• \n\nTheLIMITclause in SQL is used to control the number of rows returned in a query result. Whether we’re looking topaginate results, find top records, or just display a sample of data, theLIMIT clauseis an essential tool for controlling query output. In this article, we’ll cover the basicsyntaxof the LIMIT clause, explain how to use it withOFFSET, and explore practical examples for common use cases. ### SQL LIMIT Clause\nTheLIMIT clauseallows you to specify themaximum number of recordsreturned by a query. It is commonly used for limiting query results when only a subset of the data is required, such as forpagination, filtering top values, or analyzing asmaller portionof a large table."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "clause",
        "question": "What is clause?",
        "answer": "• \n• \n• \n\nTheLIMITclause in SQL is used to control the number of rows returned in a query result. Whether we’re looking topaginate results, find top records, or just display a sample of data, theLIMIT clauseis an essential tool for controlling query output. In this article, we’ll cover the basicsyntaxof the LIMIT clause, explain how to use it withOFFSET, and explore practical examples for common use cases. ### SQL LIMIT Clause\nTheLIMIT clauseallows you to specify themaximum number of recordsreturned by a query. ### Examples of SQL LIMIT Clause\nLet’s look at some examples of theLIMIT clauseinSQLto understand it’s working."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nTheLIMITclause in SQL is used to control the number of rows returned in a query result. ### SQL LIMIT Clause\nTheLIMIT clauseallows you to specify themaximum number of recordsreturned by a query. ### Examples of SQL LIMIT Clause\nLet’s look at some examples of theLIMIT clauseinSQLto understand it’s working. ### SQL LIMIT OFFSET\nLIMIT OFFSET parameterskips a specified number of rows before returning the result set. ### Example: Skipping First 2 Rows & Fetching 2 Rows\n\n```python\nSELECT *FROM StudentORDER BY ageLIMIT 2 OFFSET 2;\n```\nOutput:\n\nSQL LIMIT OFFSET Example Output\n\n\n### Using LIMIT to Get the nth Highest or Lowest Value\nNow we will look forLIMITuse in findinghighestorlowestvalue we need to retrieve the rows with the nth highest or lowest value."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "offset",
        "question": "What is offset?",
        "answer": "In this article, we’ll cover the basicsyntaxof the LIMIT clause, explain how to use it withOFFSET, and explore practical examples for common use cases. Syntax:\n\nSELECT column1, column2, …FROM table_nameWHERE conditionORDER BY columnLIMIT [offset,] row_count;\n\nKey Terms\n\n• offset:number of rows to skip before returning the result set. ### SQL LIMIT OFFSET\nLIMIT OFFSET parameterskips a specified number of rows before returning the result set. OFFSET can only be used with theORDER BYclause. OFFSET value must begreater thanorequal to zero."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "rows",
        "question": "What is rows?",
        "answer": "• \n• \n• \n\nTheLIMITclause in SQL is used to control the number of rows returned in a query result. It is particularly useful when working with large datasets, allowing you to retrieve only the required number of rows for analysis or display. Syntax:\n\nSELECT column1, column2, …FROM table_nameWHERE conditionORDER BY columnLIMIT [offset,] row_count;\n\nKey Terms\n\n• offset:number of rows to skip before returning the result set. • row_count:number of rows to return in the result set. Query:\n\n\n```python\nCREATE TABLE student (id INT PRIMARY KEY,name VARCHAR(50),age INT);INSERT INTO student (id, name, age)VALUES (1, 'Shubham Thakur', 18),(2, 'Aman Chopra', 19),(3, 'Bhavika uppala', 20),(4,'Anshi Shrivastava',22);\n```\nOutput:\n\nStudent Table\n\n\n### Example 1: Basic LIMIT Usage\nIn this example, we will only retrieve 3 rows from the student table using LIMIT."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "used",
        "question": "What is used?",
        "answer": "• \n• \n• \n\nTheLIMITclause in SQL is used to control the number of rows returned in a query result. It is commonly used for limiting query results when only a subset of the data is required, such as forpagination, filtering top values, or analyzing asmaller portionof a large table. Query:\n\n\n```python\nSELECT*FROMStudentORDER BYGrade DESCLIMIT3;\n```\nOutput:\n\nLIMIT with ORDER BY Clause\n\nExplanation:The LIMIT operator can be used in situations such as the above, where we need to find the top 3 students in a class and do not want to use any conditional statements. OFFSET can only be used with theORDER BYclause. It cannot be used on its own."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "example",
        "question": "What is example?",
        "answer": "In this article, we’ll cover the basicsyntaxof the LIMIT clause, explain how to use it withOFFSET, and explore practical examples for common use cases. ### Examples of SQL LIMIT Clause\nLet’s look at some examples of theLIMIT clauseinSQLto understand it’s working. Query:\n\n\n```python\nCREATE TABLE student (id INT PRIMARY KEY,name VARCHAR(50),age INT);INSERT INTO student (id, name, age)VALUES (1, 'Shubham Thakur', 18),(2, 'Aman Chopra', 19),(3, 'Bhavika uppala', 20),(4,'Anshi Shrivastava',22);\n```\nOutput:\n\nStudent Table\n\n\n### Example 1: Basic LIMIT Usage\nIn this example, we will only retrieve 3 rows from the student table using LIMIT. Query:\n\n\n```python\nSELECT * FROM studentLIMIT 3;\n```\nOutput:\n\nLIMIT Clause Example\n\n\n### Example 2: LIMIT with ORDER BY Clause\nIn this example, we will use the LIMIT clause withORDER BYclause to retrieve the top 3 students sorted by their grade (assuming aGradecolumn exists). ### Example: Skipping First 2 Rows & Fetching 2 Rows\n\n```python\nSELECT *FROM StudentORDER BY ageLIMIT 2 OFFSET 2;\n```\nOutput:\n\nSQL LIMIT OFFSET Example Output\n\n\n### Using LIMIT to Get the nth Highest or Lowest Value\nNow we will look forLIMITuse in findinghighestorlowestvalue we need to retrieve the rows with the nth highest or lowest value."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "select",
        "question": "What is select?",
        "answer": "Syntax:\n\nSELECT column1, column2, …FROM table_nameWHERE conditionORDER BY columnLIMIT [offset,] row_count;\n\nKey Terms\n\n• offset:number of rows to skip before returning the result set. Query:\n\n\n```python\nSELECT * FROM studentLIMIT 3;\n```\nOutput:\n\nLIMIT Clause Example\n\n\n### Example 2: LIMIT with ORDER BY Clause\nIn this example, we will use the LIMIT clause withORDER BYclause to retrieve the top 3 students sorted by their grade (assuming aGradecolumn exists). Query:\n\n\n```python\nSELECT*FROMStudentORDER BYGrade DESCLIMIT3;\n```\nOutput:\n\nLIMIT with ORDER BY Clause\n\nExplanation:The LIMIT operator can be used in situations such as the above, where we need to find the top 3 students in a class and do not want to use any conditional statements. Syntax:\n\nSELECT * FROM table_name ORDER BY column_name LIMIT X OFFSET Y;\n\nOR\n\nSELECT * FROM table_name ORDER BY column_name LIMIT Y,X;\n\n• X→ Number of rows to return. ### Example: Skipping First 2 Rows & Fetching 2 Rows\n\n```python\nSELECT *FROM StudentORDER BY ageLIMIT 2 OFFSET 2;\n```\nOutput:\n\nSQL LIMIT OFFSET Example Output\n\n\n### Using LIMIT to Get the nth Highest or Lowest Value\nNow we will look forLIMITuse in findinghighestorlowestvalue we need to retrieve the rows with the nth highest or lowest value."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "output",
        "question": "What is output?",
        "answer": "Whether we’re looking topaginate results, find top records, or just display a sample of data, theLIMIT clauseis an essential tool for controlling query output. Query:\n\n\n```python\nCREATE TABLE student (id INT PRIMARY KEY,name VARCHAR(50),age INT);INSERT INTO student (id, name, age)VALUES (1, 'Shubham Thakur', 18),(2, 'Aman Chopra', 19),(3, 'Bhavika uppala', 20),(4,'Anshi Shrivastava',22);\n```\nOutput:\n\nStudent Table\n\n\n### Example 1: Basic LIMIT Usage\nIn this example, we will only retrieve 3 rows from the student table using LIMIT. Query:\n\n\n```python\nSELECT * FROM studentLIMIT 3;\n```\nOutput:\n\nLIMIT Clause Example\n\n\n### Example 2: LIMIT with ORDER BY Clause\nIn this example, we will use the LIMIT clause withORDER BYclause to retrieve the top 3 students sorted by their grade (assuming aGradecolumn exists). Query:\n\n\n```python\nSELECT*FROMStudentORDER BYGrade DESCLIMIT3;\n```\nOutput:\n\nLIMIT with ORDER BY Clause\n\nExplanation:The LIMIT operator can be used in situations such as the above, where we need to find the top 3 students in a class and do not want to use any conditional statements. ### Example: Skipping First 2 Rows & Fetching 2 Rows\n\n```python\nSELECT *FROM StudentORDER BY ageLIMIT 2 OFFSET 2;\n```\nOutput:\n\nSQL LIMIT OFFSET Example Output\n\n\n### Using LIMIT to Get the nth Highest or Lowest Value\nNow we will look forLIMITuse in findinghighestorlowestvalue we need to retrieve the rows with the nth highest or lowest value."
    },
    {
        "topic": "sql-limit-clause",
        "subtopic": "number",
        "question": "What is number?",
        "answer": "• \n• \n• \n\nTheLIMITclause in SQL is used to control the number of rows returned in a query result. It is particularly useful when working with large datasets, allowing you to retrieve only the required number of rows for analysis or display. ### SQL LIMIT Clause\nTheLIMIT clauseallows you to specify themaximum number of recordsreturned by a query. Syntax:\n\nSELECT column1, column2, …FROM table_nameWHERE conditionORDER BY columnLIMIT [offset,] row_count;\n\nKey Terms\n\n• offset:number of rows to skip before returning the result set. • row_count:number of rows to return in the result set."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "order",
        "question": "What is order?",
        "answer": "• \n• \n• \n\nTheORDER BYclause in SQL is a powerful feature used tosort query resultsin either ascending or descending order based on one or more columns. In this article, we’ll explain how the ORDER BY clause works, provide itssyntax, and walk through severalpractical examplesusing a table to illustrate its usage. ### ORDER BY in SQL\nTheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. SQL ORDER BY default mode is sorting data into ascending order. To sort data in descending order use theDESC keywordwith ORDER BY clause."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "column",
        "question": "What is column?",
        "answer": "• \n• \n• \n\nTheORDER BYclause in SQL is a powerful feature used tosort query resultsin either ascending or descending order based on one or more columns. ### ORDER BY in SQL\nTheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. Syntax:\n\nThe syntax to use ORDER BY clause in SQL is:\n\nSELECT * FROM table_name ORDER BY column_name ASC | DESC\n\nKey Terms:\n\n• table_name: name of the table. • column_name:name of the column according to which the data is needed to be arranged. ### Example 1 : Sort According To a Single Column using ORDER BY Clause\nIn this example, we will fetch all data from the table Student and sort the result in descending order according to the column ROLL_NO."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "clause",
        "question": "What is clause?",
        "answer": "• \n• \n• \n\nTheORDER BYclause in SQL is a powerful feature used tosort query resultsin either ascending or descending order based on one or more columns. In this article, we’ll explain how the ORDER BY clause works, provide itssyntax, and walk through severalpractical examplesusing a table to illustrate its usage. To sort data in descending order use theDESC keywordwith ORDER BY clause. Syntax:\n\nThe syntax to use ORDER BY clause in SQL is:\n\nSELECT * FROM table_name ORDER BY column_name ASC | DESC\n\nKey Terms:\n\n• table_name: name of the table. ### SQL ORDER BY Clause Examples\nWe have created an Student table that stores Student data including their roll_no, name, age, addess, and phone."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nTheORDER BYclause in SQL is a powerful feature used tosort query resultsin either ascending or descending order based on one or more columns. We’ll focus on key concepts that help optimize SQL queries for better readability and performance. ### ORDER BY in SQL\nTheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. SQL ORDER BY default mode is sorting data into ascending order. Syntax:\n\nThe syntax to use ORDER BY clause in SQL is:\n\nSELECT * FROM table_name ORDER BY column_name ASC | DESC\n\nKey Terms:\n\n• table_name: name of the table."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "Whether you’re presenting data to users or analyzing large datasets, sorting the results in a structured way is essential. ### ORDER BY in SQL\nTheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. It is very useful to present data in a structured manner. SQL ORDER BY default mode is sorting data into ascending order. To sort data in descending order use theDESC keywordwith ORDER BY clause."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "according",
        "question": "What is according?",
        "answer": "### ORDER BY in SQL\nTheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. • column_name:name of the column according to which the data is needed to be arranged. ### Example 1 : Sort According To a Single Column using ORDER BY Clause\nIn this example, we will fetch all data from the table Student and sort the result in descending order according to the column ROLL_NO. ### Example 2 : Sort According To Multiple Columns using ORDER BY Clause\nIn this example, we will fetch all data from the table Student and then sort the result in descending order first according to the columnage. and then in ascending order according to the columnname."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "sort",
        "question": "What is sort?",
        "answer": "• \n• \n• \n\nTheORDER BYclause in SQL is a powerful feature used tosort query resultsin either ascending or descending order based on one or more columns. Whether you’re presenting data to users or analyzing large datasets, sorting the results in a structured way is essential. ### ORDER BY in SQL\nTheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. SQL ORDER BY default mode is sorting data into ascending order. To sort data in descending order use theDESC keywordwith ORDER BY clause."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "columns",
        "question": "What is columns?",
        "answer": "• \n• \n• \n\nTheORDER BYclause in SQL is a powerful feature used tosort query resultsin either ascending or descending order based on one or more columns. ### ORDER BY in SQL\nTheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. ### Example 2 : Sort According To Multiple Columns using ORDER BY Clause\nIn this example, we will fetch all data from the table Student and then sort the result in descending order first according to the columnage. To sort according to multiple columns, separate the names of columns by the (,) operator. Column number must be greater than 0 and not greater than the number of columns in the result table."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "sorting",
        "question": "What is sorting?",
        "answer": "Whether you’re presenting data to users or analyzing large datasets, sorting the results in a structured way is essential. SQL ORDER BY default mode is sorting data into ascending order. Now, sorting further this result-set according to name will sort the rows with the same Age according to name in ascending order. ### Sorting By Column Number (instead of name)\nAn integer that identifies the number of the column in the SelectItems in the underlying query of theSELECTstatement. Syntax:\n\nThe Syntax to use ORDER BY Clause with Column Number\n\nORDER BYColumn_Number asc/desc\n\n\n### Example of Sorting By Column Number\nHere we take an example to sort a database table according to column 1 i.e Roll Number."
    },
    {
        "topic": "sql-order-by",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "In this article, we’ll explain how the ORDER BY clause works, provide itssyntax, and walk through severalpractical examplesusing a table to illustrate its usage. Syntax:\n\nThe syntax to use ORDER BY clause in SQL is:\n\nSELECT * FROM table_name ORDER BY column_name ASC | DESC\n\nKey Terms:\n\n• table_name: name of the table. ### SQL ORDER BY Clause Examples\nWe have created an Student table that stores Student data including their roll_no, name, age, addess, and phone. We will use the following table in examples. Student_Table\n\nNow consider the above database table and find the results of different queries."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nSQL Outer Joins allowretrieval of rowsfrom two or more tables based on a related column. Unlikeinner Joins, they also include rows that do not have a corresponding match in one or both of the tables. This capability makesOuter Joinsextremely useful for comprehensive data analysis and reporting, especially when dealing with incomplete data or wanting to show all records regardless of matching conditions. In this article, we will learn the concept ofSQL Outer Joins, its types, syntax, and practical use cases. We will also explore examples that show how Outer Joins can effectively solve real-world data retrieval problems."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "outer",
        "question": "What is outer?",
        "answer": "• \n• \n• \n\nSQL Outer Joins allowretrieval of rowsfrom two or more tables based on a related column. This capability makesOuter Joinsextremely useful for comprehensive data analysis and reporting, especially when dealing with incomplete data or wanting to show all records regardless of matching conditions. In this article, we will learn the concept ofSQL Outer Joins, its types, syntax, and practical use cases. We will also explore examples that show how Outer Joins can effectively solve real-world data retrieval problems. ### What is an SQL Outer Join?"
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "employees",
        "question": "What is employees?",
        "answer": "Let’s Consider the two tables,EmployeesandDepartmentsfor understanding all the above outer join with examples\n\nEmployees Table:\n\nDepartments Table:\n\n\n### LEFT OUTER JOIN (or LEFT JOIN)\nTheLEFT OUTER JOIN(referred to asLEFT JOIN) returns all rows from the left table, and the matching rows from the right table. LEFT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nLEFT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample :To retrieve all employees along with their respective departments, even if they don’t belong to any department (i.e., the department is NULL), we can use the LEFT OUTER JOIN\n\nQuery:\n\n\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nLEFT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\n\nIn this example, Michael does not belong to any department, so the DepartmentName for Michael is NULL. RIGHT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nRIGHT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample:Let’s now look at a RIGHT OUTER JOIN on the Employees and Departments tables. Suppose we want to retrieve all departments, even if no employees belong to a specific department. Query:\n\n\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nRIGHT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\n\n\n### FULL OUTER JOIN\nTheFULL OUTER JOINreturns all rows when there is a match in either the left or right table."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "departments",
        "question": "What is departments?",
        "answer": "Let’s Consider the two tables,EmployeesandDepartmentsfor understanding all the above outer join with examples\n\nEmployees Table:\n\nDepartments Table:\n\n\n### LEFT OUTER JOIN (or LEFT JOIN)\nTheLEFT OUTER JOIN(referred to asLEFT JOIN) returns all rows from the left table, and the matching rows from the right table. LEFT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nLEFT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample :To retrieve all employees along with their respective departments, even if they don’t belong to any department (i.e., the department is NULL), we can use the LEFT OUTER JOIN\n\nQuery:\n\n\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nLEFT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\n\nIn this example, Michael does not belong to any department, so the DepartmentName for Michael is NULL. RIGHT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nRIGHT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample:Let’s now look at a RIGHT OUTER JOIN on the Employees and Departments tables. Suppose we want to retrieve all departments, even if no employees belong to a specific department. Query:\n\n\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nRIGHT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\n\n\n### FULL OUTER JOIN\nTheFULL OUTER JOINreturns all rows when there is a match in either the left or right table."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nSQL Outer Joins allowretrieval of rowsfrom two or more tables based on a related column. Unlikeinner Joins, they also include rows that do not have a corresponding match in one or both of the tables. Outer Join ensures that all rows from one or both tables are included in the result, even if there is no match in the other table. It is particularly useful when you need to show all records from one table, including those that don’t have a match in the other table. Let’s Consider the two tables,EmployeesandDepartmentsfor understanding all the above outer join with examples\n\nEmployees Table:\n\nDepartments Table:\n\n\n### LEFT OUTER JOIN (or LEFT JOIN)\nTheLEFT OUTER JOIN(referred to asLEFT JOIN) returns all rows from the left table, and the matching rows from the right table."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "right",
        "question": "What is right?",
        "answer": "### Types of Outer Joins\nThere are three main types of Outer Joins in SQL:\n\n• LEFT OUTER JOIN (or LEFT JOIN)\n• RIGHT OUTER JOIN (or RIGHT JOIN)\n• FULL OUTER JOIN\n\nEach of these join types handles unmatched rows differently, and understanding how they work will help you use them effectively in yourSQLqueries. Let’s Consider the two tables,EmployeesandDepartmentsfor understanding all the above outer join with examples\n\nEmployees Table:\n\nDepartments Table:\n\n\n### LEFT OUTER JOIN (or LEFT JOIN)\nTheLEFT OUTER JOIN(referred to asLEFT JOIN) returns all rows from the left table, and the matching rows from the right table. If there is no match, the result will includeNULL valuesfor columns from the right table. ### RIGHT OUTER JOIN (RIGHT JOIN)\nTheRIGHT OUTER JOIN(often calledRIGHT JOIN) returns all rows from the right table, and the matching rows from the left table. RIGHT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nRIGHT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample:Let’s now look at a RIGHT OUTER JOIN on the Employees and Departments tables."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "joins",
        "question": "What is joins?",
        "answer": "• \n• \n• \n\nSQL Outer Joins allowretrieval of rowsfrom two or more tables based on a related column. Unlikeinner Joins, they also include rows that do not have a corresponding match in one or both of the tables. This capability makesOuter Joinsextremely useful for comprehensive data analysis and reporting, especially when dealing with incomplete data or wanting to show all records regardless of matching conditions. In this article, we will learn the concept ofSQL Outer Joins, its types, syntax, and practical use cases. We will also explore examples that show how Outer Joins can effectively solve real-world data retrieval problems."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "This capability makesOuter Joinsextremely useful for comprehensive data analysis and reporting, especially when dealing with incomplete data or wanting to show all records regardless of matching conditions. We will also explore examples that show how Outer Joins can effectively solve real-world data retrieval problems. Outer joins are particularly useful in the following situations:\n\n• Incomplete Data:When you need to include all records from one table even if there is no match in the other table. • Data Integrity Issues:When working with datasets that might have missing or incomplete relationships, outer joins can help ensure you don’t miss out on important records. • Reporting and Analysis:When generating reports that need to show all records, regardless of matching conditions, such as when summarizing employee data alongside department data."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "left",
        "question": "What is left?",
        "answer": "### Types of Outer Joins\nThere are three main types of Outer Joins in SQL:\n\n• LEFT OUTER JOIN (or LEFT JOIN)\n• RIGHT OUTER JOIN (or RIGHT JOIN)\n• FULL OUTER JOIN\n\nEach of these join types handles unmatched rows differently, and understanding how they work will help you use them effectively in yourSQLqueries. Let’s Consider the two tables,EmployeesandDepartmentsfor understanding all the above outer join with examples\n\nEmployees Table:\n\nDepartments Table:\n\n\n### LEFT OUTER JOIN (or LEFT JOIN)\nTheLEFT OUTER JOIN(referred to asLEFT JOIN) returns all rows from the left table, and the matching rows from the right table. LEFT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nLEFT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample :To retrieve all employees along with their respective departments, even if they don’t belong to any department (i.e., the department is NULL), we can use the LEFT OUTER JOIN\n\nQuery:\n\n\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nLEFT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\n\nIn this example, Michael does not belong to any department, so the DepartmentName for Michael is NULL. ### RIGHT OUTER JOIN (RIGHT JOIN)\nTheRIGHT OUTER JOIN(often calledRIGHT JOIN) returns all rows from the right table, and the matching rows from the left table. If there is no match, the result will includeNULL valuesfor columns from the left table."
    },
    {
        "topic": "sql-outer-join",
        "subtopic": "table1",
        "question": "What is table1?",
        "answer": "LEFT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nLEFT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample :To retrieve all employees along with their respective departments, even if they don’t belong to any department (i.e., the department is NULL), we can use the LEFT OUTER JOIN\n\nQuery:\n\n\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nLEFT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\n\nIn this example, Michael does not belong to any department, so the DepartmentName for Michael is NULL. RIGHT OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nRIGHT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample:Let’s now look at a RIGHT OUTER JOIN on the Employees and Departments tables. FULL OUTER JOIN\n\nSyntax:\n\n\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nFULL JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample:Let’s now use a FULL OUTER JOIN to get all employees and all departments, regardless of whether an employee belongs to a department or a department has employees."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nIn SQL, theRIGHT JOIN(also called RIGHT OUTER JOIN) is an essential command used to combine data from two tables based on a related column. It returns all records from the right table, along with thematching recordsfrom the left table. If there is no matching record in the left table, SQL will returnNULL valuesfor the left table’s columns. ### SQL RIGHT JOIN Keyword\nTheRIGHT JOIN in SQLreturns a table that contains all the records from the right table and only matching records from the left table. In simpler terms, if a row is present in the right table but not in the left table, the result will include this row with NULL values for columns from the left table."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "right",
        "question": "What is right?",
        "answer": "• \n• \n• \n\nIn SQL, theRIGHT JOIN(also called RIGHT OUTER JOIN) is an essential command used to combine data from two tables based on a related column. It returns all records from the right table, along with thematching recordsfrom the left table. In this article, we will dive deep into theRIGHT JOINoperation, explore its syntax, and walk through detailed examples to help you fully understand how to use it effectively. ### SQL RIGHT JOIN Keyword\nTheRIGHT JOIN in SQLreturns a table that contains all the records from the right table and only matching records from the left table. In simpler terms, if a row is present in the right table but not in the left table, the result will include this row with NULL values for columns from the left table."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nIn SQL, theRIGHT JOIN(also called RIGHT OUTER JOIN) is an essential command used to combine data from two tables based on a related column. In this article, we will dive deep into theRIGHT JOINoperation, explore its syntax, and walk through detailed examples to help you fully understand how to use it effectively. ### SQL RIGHT JOIN Keyword\nTheRIGHT JOIN in SQLreturns a table that contains all the records from the right table and only matching records from the left table. TheVisual Representation of RIGHT JOINis shown below in theVenn Diagram. RIGHT JOIN\n\nSyntax:\n\n\n```python\nSELECTcolumn_name(s)FROMtableARIGHT JOINtableBONtableA.column_name = tableB.column_name;\n```\n\n### Examples of SQL RIGHT JOIN\nIn this example, we will consider two tablesemployeetable containing details of the employees working in the particular department the anddepartmenttable containing the details of the department\n\nEmployee Table:\n\nE1\n\nVarun Singhal\n\nD1\n\nE2\n\nAmrita Aggarwal\n\nD2\n\nE3\n\nRavi Anand\n\nD3\n\nDepartment Table:\n\nD1\n\nIT\n\nDelhi\n\nD2\n\nHR\n\nHyderabad\n\nD3\n\nFinance\n\nPune\n\nD4\n\nTesting\n\nNoida\n\nD5\n\nMarketing\n\nMathura\n\n\n### Example: Perform a RIGHT JOIN on Employee and Department Tables\nNow, we will perform SQL RIGHT JOIN on these two tables."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "• \n• \n• \n\nIn SQL, theRIGHT JOIN(also called RIGHT OUTER JOIN) is an essential command used to combine data from two tables based on a related column. If there is no matching record in the left table, SQL will returnNULL valuesfor the left table’s columns. ### SQL RIGHT JOIN Keyword\nTheRIGHT JOIN in SQLreturns a table that contains all the records from the right table and only matching records from the left table. RIGHT JOIN\n\nSyntax:\n\n\n```python\nSELECTcolumn_name(s)FROMtableARIGHT JOINtableBONtableA.column_name = tableB.column_name;\n```\n\n### Examples of SQL RIGHT JOIN\nIn this example, we will consider two tablesemployeetable containing details of the employees working in the particular department the anddepartmenttable containing the details of the department\n\nEmployee Table:\n\nE1\n\nVarun Singhal\n\nD1\n\nE2\n\nAmrita Aggarwal\n\nD2\n\nE3\n\nRavi Anand\n\nD3\n\nDepartment Table:\n\nD1\n\nIT\n\nDelhi\n\nD2\n\nHR\n\nHyderabad\n\nD3\n\nFinance\n\nPune\n\nD4\n\nTesting\n\nNoida\n\nD5\n\nMarketing\n\nMathura\n\n\n### Example: Perform a RIGHT JOIN on Employee and Department Tables\nNow, we will perform SQL RIGHT JOIN on these two tables. ### Applications of SQL RIGHT JOIN\n• Merging Data: Allows to merge data from different tables in database."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nIn SQL, theRIGHT JOIN(also called RIGHT OUTER JOIN) is an essential command used to combine data from two tables based on a related column. ### Applications of SQL RIGHT JOIN\n• Merging Data: Allows to merge data from different tables in database. • Analyzing Relationships: Useful in finding patterns and relations between data. ### Important Points About SQL RIGHT JOIN\n• Right JOIN allows to join two table, keeping all the data or right table and only matching data of left table. • It allows us to deal with missing values in database and also helps in analyzing relationships between data."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "left",
        "question": "What is left?",
        "answer": "It returns all records from the right table, along with thematching recordsfrom the left table. If there is no matching record in the left table, SQL will returnNULL valuesfor the left table’s columns. ### SQL RIGHT JOIN Keyword\nTheRIGHT JOIN in SQLreturns a table that contains all the records from the right table and only matching records from the left table. In simpler terms, if a row is present in the right table but not in the left table, the result will include this row with NULL values for columns from the left table. Conversely, if a record from the left table is not in the right table, it will not be included in the result."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "null",
        "question": "What is null?",
        "answer": "If there is no matching record in the left table, SQL will returnNULL valuesfor the left table’s columns. In simpler terms, if a row is present in the right table but not in the left table, the result will include this row with NULL values for columns from the left table. Query:\n\n\n```python\nSELECTemp_no , emp_name ,d_name, locationFROMemployeeRIGHT  JOINdeptONemployee.dept_no = department.dept_no;\n```\nOutput:\n\nemp_no\n\nemp_name\n\nd_name\n\nlocation\n\nE1\n\nVarun Singhal\n\nIT\n\nDelhi\n\nE2\n\nAmrita Aggarwal\n\nHR\n\nHyderabad\n\nE3\n\nRavi Anand\n\nFinance\n\nPune\n\n[NULL]\n\n[NULL]\n\nTesting\n\nNoida\n\n[NULL]\n\n[NULL]\n\nMarketing\n\nMathura\n\nExplanation:As right join gives the matching rows and the rows that are present in the right table but not in the left table. Here in this example, we see that the department that contains no employee contains[NULL] values of emp_noandemp_nameafter performing the right join. It ensures that even if some records in the right table have no corresponding data in the left table, they will still appear in the result set with NULL values for the missing fields from the left table."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "department",
        "question": "What is department?",
        "answer": "RIGHT JOIN\n\nSyntax:\n\n\n```python\nSELECTcolumn_name(s)FROMtableARIGHT JOINtableBONtableA.column_name = tableB.column_name;\n```\n\n### Examples of SQL RIGHT JOIN\nIn this example, we will consider two tablesemployeetable containing details of the employees working in the particular department the anddepartmenttable containing the details of the department\n\nEmployee Table:\n\nE1\n\nVarun Singhal\n\nD1\n\nE2\n\nAmrita Aggarwal\n\nD2\n\nE3\n\nRavi Anand\n\nD3\n\nDepartment Table:\n\nD1\n\nIT\n\nDelhi\n\nD2\n\nHR\n\nHyderabad\n\nD3\n\nFinance\n\nPune\n\nD4\n\nTesting\n\nNoida\n\nD5\n\nMarketing\n\nMathura\n\n\n### Example: Perform a RIGHT JOIN on Employee and Department Tables\nNow, we will perform SQL RIGHT JOIN on these two tables. Query:\n\n\n```python\nSELECTemp_no , emp_name ,d_name, locationFROMemployeeRIGHT  JOINdeptONemployee.dept_no = department.dept_no;\n```\nOutput:\n\nemp_no\n\nemp_name\n\nd_name\n\nlocation\n\nE1\n\nVarun Singhal\n\nIT\n\nDelhi\n\nE2\n\nAmrita Aggarwal\n\nHR\n\nHyderabad\n\nE3\n\nRavi Anand\n\nFinance\n\nPune\n\n[NULL]\n\n[NULL]\n\nTesting\n\nNoida\n\n[NULL]\n\n[NULL]\n\nMarketing\n\nMathura\n\nExplanation:As right join gives the matching rows and the rows that are present in the right table but not in the left table. Here in this example, we see that the department that contains no employee contains[NULL] values of emp_noandemp_nameafter performing the right join."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "values",
        "question": "What is values?",
        "answer": "If there is no matching record in the left table, SQL will returnNULL valuesfor the left table’s columns. In simpler terms, if a row is present in the right table but not in the left table, the result will include this row with NULL values for columns from the left table. Here in this example, we see that the department that contains no employee contains[NULL] values of emp_noandemp_nameafter performing the right join. • Ensuring Completeness: ARIGHT JOINensures that all records from theright tableare included in the result, even if there are no corresponding matches in theleft table\n• Handling Missing Values: Allows to look for missing values in one of the table. • It allows us to deal with missing values in database and also helps in analyzing relationships between data."
    },
    {
        "topic": "sql-right-join",
        "subtopic": "records",
        "question": "What is records?",
        "answer": "It returns all records from the right table, along with thematching recordsfrom the left table. ### SQL RIGHT JOIN Keyword\nTheRIGHT JOIN in SQLreturns a table that contains all the records from the right table and only matching records from the left table. • Ensuring Completeness: ARIGHT JOINensures that all records from theright tableare included in the result, even if there are no corresponding matches in theleft table\n• Handling Missing Values: Allows to look for missing values in one of the table. ### Conclusion\nThe SQL RIGHT JOIN is an important operation for combining data from two tables where you need to prioritize the right table’s records. It ensures that even if some records in the right table have no corresponding data in the left table, they will still appear in the result set with NULL values for the missing fields from the left table."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "• \n• \n• \n\nA Self Join inSQLis a powerful technique that allows one tojoin a tablewith itself. This operation is helpful when you need to compare rows within the same table based on specific conditions. ASelf Joinis often used in scenarios where there is hierarchical or relational data within the same table, such as when one employee reports to another in an organizational structure. A Self Join is simply a regularjoin operationwhere a table is joined with itself. This allows us to compare rows within thesame table, which is particularly useful when working withhierarchical dataor when comparing related rows from a single table."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "join",
        "question": "What is join?",
        "answer": "• \n• \n• \n\nA Self Join inSQLis a powerful technique that allows one tojoin a tablewith itself. ASelf Joinis often used in scenarios where there is hierarchical or relational data within the same table, such as when one employee reports to another in an organizational structure. In this article, we will learn a self-join, itssyntax, and use cases and provide practicalexamplesto demonstrate how it works. ### What is SQL Self Join? A Self Join is simply a regularjoin operationwhere a table is joined with itself."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "self",
        "question": "What is self?",
        "answer": "• \n• \n• \n\nA Self Join inSQLis a powerful technique that allows one tojoin a tablewith itself. ASelf Joinis often used in scenarios where there is hierarchical or relational data within the same table, such as when one employee reports to another in an organizational structure. In this article, we will learn a self-join, itssyntax, and use cases and provide practicalexamplesto demonstrate how it works. ### What is SQL Self Join? A Self Join is simply a regularjoin operationwhere a table is joined with itself."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "employee",
        "question": "What is employee?",
        "answer": "ASelf Joinis often used in scenarios where there is hierarchical or relational data within the same table, such as when one employee reports to another in an organizational structure. For example, a Self Join can help us retrieve employee-managerrelationships, where each employee in the table has a reference to their manager’s ID. ### Example: SQL Self Join to Retrieve Employees and Their Managers\nLet’s use an illustration to further understand how theself-joinfunctions. Assume that we have a table called “GFGemployees” with the columns employee_id, employee_name, and manager_id. Each employee in the company is assigned a manager, and using the manager-ids, we can identify each employee."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "manager",
        "question": "What is manager?",
        "answer": "For example, a Self Join can help us retrieve employee-managerrelationships, where each employee in the table has a reference to their manager’s ID. ### Example: SQL Self Join to Retrieve Employees and Their Managers\nLet’s use an illustration to further understand how theself-joinfunctions. Assume that we have a table called “GFGemployees” with the columns employee_id, employee_name, and manager_id. Each employee in the company is assigned a manager, and using the manager-ids, we can identify each employee. We need to extract the list of employees along with the names of their managers because the manager_id column contains the manager ID for each employee\n\nStep 1:First, we need to create the “GFGemployees” table with following query inSQL."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "ASelf Joinis often used in scenarios where there is hierarchical or relational data within the same table, such as when one employee reports to another in an organizational structure. This allows us to compare rows within thesame table, which is particularly useful when working withhierarchical dataor when comparing related rows from a single table. ```python\nCREATE TABLE GFGemployees(employee_idINT PRIMARY KEY, employee_name VARCHAR(50), manager_id INT);\n```\nStep 2:Now we will add data into the ‘GFGemployees’ table usingINSERT INTOstatement:\n\n\n```python\nINSERT INTO GFGemployees (employee_id, employee_name, manager_id)VALUES  (1, 'Zaid', 3),  (2, 'Rahul', 3),  (3, 'Raman', 4),(4, 'Kamran', NULL),  (5, 'Farhan', 4);\n```\nOutput:\n\nemployee_id\n\nemployee_name\n\nmanager_id\n\n1\n\nZaid\n\n3\n\n2\n\nRahul\n\n3\n\n3\n\nRaman\n\n4\n\n4\n\nKamran\n\nNULL\n\n5\n\nFarhan\n\n4\n\nStep 3: Explanation and implementation of Self Join\n\nNow, we need to perform selfjoinon the table we created i.e.”GFGemployees” in order to retrieve the list of employees and their corresponding managers name and for that we need to write a query, where we will create two different aliases for the “GFGemployees” table as “e” which will represent the GFG employee’s information and “m” will represent the manager’s information. Step 4: Query for Self-join\n\n\n```python\nSELECT e.employee_name AS employee,m.employee_name AS managerFROMGFGemployees AS e JOIN GFGemployeesAS m ON e.manager_id = m.employee_id;\n```\nOutput:\n\nThe resultant table after performing self join will be as follows:\n\nemployee\n\nmanager\n\nZaid\n\nRaman\n\nRahul\n\nRaman\n\nRaman\n\nKamran\n\nFarhan\n\nKamran\n\n\n### Applications of SQL Self Join\n• Hierarchical Data:Self joins are particularly useful when working with hierarchical data such as organizational structures, where each employee has a manager. • Data Comparison:Self joins allow comparing records within the same table based on specific conditions, like comparing sales figures of employees working in the same department."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "gfgemployees",
        "question": "What is gfgemployees?",
        "answer": "Assume that we have a table called “GFGemployees” with the columns employee_id, employee_name, and manager_id. We need to extract the list of employees along with the names of their managers because the manager_id column contains the manager ID for each employee\n\nStep 1:First, we need to create the “GFGemployees” table with following query inSQL. ```python\nCREATE TABLE GFGemployees(employee_idINT PRIMARY KEY, employee_name VARCHAR(50), manager_id INT);\n```\nStep 2:Now we will add data into the ‘GFGemployees’ table usingINSERT INTOstatement:\n\n\n```python\nINSERT INTO GFGemployees (employee_id, employee_name, manager_id)VALUES  (1, 'Zaid', 3),  (2, 'Rahul', 3),  (3, 'Raman', 4),(4, 'Kamran', NULL),  (5, 'Farhan', 4);\n```\nOutput:\n\nemployee_id\n\nemployee_name\n\nmanager_id\n\n1\n\nZaid\n\n3\n\n2\n\nRahul\n\n3\n\n3\n\nRaman\n\n4\n\n4\n\nKamran\n\nNULL\n\n5\n\nFarhan\n\n4\n\nStep 3: Explanation and implementation of Self Join\n\nNow, we need to perform selfjoinon the table we created i.e.”GFGemployees” in order to retrieve the list of employees and their corresponding managers name and for that we need to write a query, where we will create two different aliases for the “GFGemployees” table as “e” which will represent the GFG employee’s information and “m” will represent the manager’s information. Step 4: Query for Self-join\n\n\n```python\nSELECT e.employee_name AS employee,m.employee_name AS managerFROMGFGemployees AS e JOIN GFGemployeesAS m ON e.manager_id = m.employee_id;\n```\nOutput:\n\nThe resultant table after performing self join will be as follows:\n\nemployee\n\nmanager\n\nZaid\n\nRaman\n\nRahul\n\nRaman\n\nRaman\n\nKamran\n\nFarhan\n\nKamran\n\n\n### Applications of SQL Self Join\n• Hierarchical Data:Self joins are particularly useful when working with hierarchical data such as organizational structures, where each employee has a manager."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "manager_id",
        "question": "What is manager_id?",
        "answer": "Assume that we have a table called “GFGemployees” with the columns employee_id, employee_name, and manager_id. We need to extract the list of employees along with the names of their managers because the manager_id column contains the manager ID for each employee\n\nStep 1:First, we need to create the “GFGemployees” table with following query inSQL. ```python\nCREATE TABLE GFGemployees(employee_idINT PRIMARY KEY, employee_name VARCHAR(50), manager_id INT);\n```\nStep 2:Now we will add data into the ‘GFGemployees’ table usingINSERT INTOstatement:\n\n\n```python\nINSERT INTO GFGemployees (employee_id, employee_name, manager_id)VALUES  (1, 'Zaid', 3),  (2, 'Rahul', 3),  (3, 'Raman', 4),(4, 'Kamran', NULL),  (5, 'Farhan', 4);\n```\nOutput:\n\nemployee_id\n\nemployee_name\n\nmanager_id\n\n1\n\nZaid\n\n3\n\n2\n\nRahul\n\n3\n\n3\n\nRaman\n\n4\n\n4\n\nKamran\n\nNULL\n\n5\n\nFarhan\n\n4\n\nStep 3: Explanation and implementation of Self Join\n\nNow, we need to perform selfjoinon the table we created i.e.”GFGemployees” in order to retrieve the list of employees and their corresponding managers name and for that we need to write a query, where we will create two different aliases for the “GFGemployees” table as “e” which will represent the GFG employee’s information and “m” will represent the manager’s information. This way byjoining the tablewith itself using the manager_id and employee_id columns, we can generate relationship between employees and their managers. Step 4: Query for Self-join\n\n\n```python\nSELECT e.employee_name AS employee,m.employee_name AS managerFROMGFGemployees AS e JOIN GFGemployeesAS m ON e.manager_id = m.employee_id;\n```\nOutput:\n\nThe resultant table after performing self join will be as follows:\n\nemployee\n\nmanager\n\nZaid\n\nRaman\n\nRahul\n\nRaman\n\nRaman\n\nKamran\n\nFarhan\n\nKamran\n\n\n### Applications of SQL Self Join\n• Hierarchical Data:Self joins are particularly useful when working with hierarchical data such as organizational structures, where each employee has a manager."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "employees",
        "question": "What is employees?",
        "answer": "### Example: SQL Self Join to Retrieve Employees and Their Managers\nLet’s use an illustration to further understand how theself-joinfunctions. Assume that we have a table called “GFGemployees” with the columns employee_id, employee_name, and manager_id. We need to extract the list of employees along with the names of their managers because the manager_id column contains the manager ID for each employee\n\nStep 1:First, we need to create the “GFGemployees” table with following query inSQL. ```python\nCREATE TABLE GFGemployees(employee_idINT PRIMARY KEY, employee_name VARCHAR(50), manager_id INT);\n```\nStep 2:Now we will add data into the ‘GFGemployees’ table usingINSERT INTOstatement:\n\n\n```python\nINSERT INTO GFGemployees (employee_id, employee_name, manager_id)VALUES  (1, 'Zaid', 3),  (2, 'Rahul', 3),  (3, 'Raman', 4),(4, 'Kamran', NULL),  (5, 'Farhan', 4);\n```\nOutput:\n\nemployee_id\n\nemployee_name\n\nmanager_id\n\n1\n\nZaid\n\n3\n\n2\n\nRahul\n\n3\n\n3\n\nRaman\n\n4\n\n4\n\nKamran\n\nNULL\n\n5\n\nFarhan\n\n4\n\nStep 3: Explanation and implementation of Self Join\n\nNow, we need to perform selfjoinon the table we created i.e.”GFGemployees” in order to retrieve the list of employees and their corresponding managers name and for that we need to write a query, where we will create two different aliases for the “GFGemployees” table as “e” which will represent the GFG employee’s information and “m” will represent the manager’s information. This way byjoining the tablewith itself using the manager_id and employee_id columns, we can generate relationship between employees and their managers."
    },
    {
        "topic": "sql-self-join",
        "subtopic": "employee_name",
        "question": "What is employee_name?",
        "answer": "Assume that we have a table called “GFGemployees” with the columns employee_id, employee_name, and manager_id. ```python\nCREATE TABLE GFGemployees(employee_idINT PRIMARY KEY, employee_name VARCHAR(50), manager_id INT);\n```\nStep 2:Now we will add data into the ‘GFGemployees’ table usingINSERT INTOstatement:\n\n\n```python\nINSERT INTO GFGemployees (employee_id, employee_name, manager_id)VALUES  (1, 'Zaid', 3),  (2, 'Rahul', 3),  (3, 'Raman', 4),(4, 'Kamran', NULL),  (5, 'Farhan', 4);\n```\nOutput:\n\nemployee_id\n\nemployee_name\n\nmanager_id\n\n1\n\nZaid\n\n3\n\n2\n\nRahul\n\n3\n\n3\n\nRaman\n\n4\n\n4\n\nKamran\n\nNULL\n\n5\n\nFarhan\n\n4\n\nStep 3: Explanation and implementation of Self Join\n\nNow, we need to perform selfjoinon the table we created i.e.”GFGemployees” in order to retrieve the list of employees and their corresponding managers name and for that we need to write a query, where we will create two different aliases for the “GFGemployees” table as “e” which will represent the GFG employee’s information and “m” will represent the manager’s information. Step 4: Query for Self-join\n\n\n```python\nSELECT e.employee_name AS employee,m.employee_name AS managerFROMGFGemployees AS e JOIN GFGemployeesAS m ON e.manager_id = m.employee_id;\n```\nOutput:\n\nThe resultant table after performing self join will be as follows:\n\nemployee\n\nmanager\n\nZaid\n\nRaman\n\nRahul\n\nRaman\n\nRaman\n\nKamran\n\nFarhan\n\nKamran\n\n\n### Applications of SQL Self Join\n• Hierarchical Data:Self joins are particularly useful when working with hierarchical data such as organizational structures, where each employee has a manager."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "Schema design is the process of creating a logical and organized structure for a database, which involves defining tables, columns, relationships, constraints, and other elements that will govern how data is stored and accessed. Effective schema design is essential for creating a robust, scalable, and efficient database system. ### Way to Create Database\n• Identify the purpose and scope of the database: Before designing adatabaseschema, it is important to define the purpose and scope of the database. This will help you determine what kind of data the database needs to store, how it will be used, and what types of queries will be performed on the data. • Normalize the database:Normalizationis the process of organizing data into tables and applying rules to ensure data is stored in a consistent and efficient manner."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "schema",
        "question": "What is schema?",
        "answer": "• \n• \n• \n\nThere are various strategies that are considered while designing a schema. Most of these strategies follow an incremental approach that is, they must start with some schema constructs derived from the requirements and then they incrementally modify, refine, or build on them. ### What is Schema Design? Schema design is the process of creating a logical and organized structure for a database, which involves defining tables, columns, relationships, constraints, and other elements that will govern how data is stored and accessed. Effective schema design is essential for creating a robust, scalable, and efficient database system."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "Schema design is the process of creating a logical and organized structure for a database, which involves defining tables, columns, relationships, constraints, and other elements that will govern how data is stored and accessed. • Normalize the database:Normalizationis the process of organizing data into tables and applying rules to ensure data is stored in a consistent and efficient manner. • Establish relationships between tables:Establishing relationships between tables can help to eliminate data redundancy and improve data consistency. For example, a foreign key can be used to link a record in one table to a record in another table, ensuring that data is consistent across both tables. For example, a primary key constraint can ensure that each record in a table has a unique identifier, while a check constraint can ensure that data meets certain conditions before it is inserted into a table."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "Schema design is the process of creating a logical and organized structure for a database, which involves defining tables, columns, relationships, constraints, and other elements that will govern how data is stored and accessed. Effective schema design is essential for creating a robust, scalable, and efficient database system. ### Way to Create Database\n• Identify the purpose and scope of the database: Before designing adatabaseschema, it is important to define the purpose and scope of the database. This will help you determine what kind of data the database needs to store, how it will be used, and what types of queries will be performed on the data. • Normalize the database:Normalizationis the process of organizing data into tables and applying rules to ensure data is stored in a consistent and efficient manner."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "tables",
        "question": "What is tables?",
        "answer": "Schema design is the process of creating a logical and organized structure for a database, which involves defining tables, columns, relationships, constraints, and other elements that will govern how data is stored and accessed. • Normalize the database:Normalizationis the process of organizing data into tables and applying rules to ensure data is stored in a consistent and efficient manner. • Establish relationships between tables:Establishing relationships between tables can help to eliminate data redundancy and improve data consistency. For example, a foreign key can be used to link a record in one table to a record in another table, ensuring that data is consistent across both tables. ### Features of Different Strategies for Schema Design\n\n### Normalization\n• Divides large tables into smaller, related tables to minimize data redundancy and ensure data consistency\n• Reduces the need for multiple updates to maintain consistency\n• Eliminatesdata anomalies, such as update, insertion, and deletion anomalies\n• Results in a more complex schema with more tables and relationships\n• May negatively impact query performance due to the increased number of joins required\n\n\n### Denormalization\n• Adds redundant data to improve query performance by reducing the number of joins required\n• Simplifies data access by storing all data in one place\n• Can result in data inconsistency if not properly managed\n• Increases storage requirements due to the duplicated data\n• Simplifies queries by reducing the number of joins required, which can result in faster query execution\n\n\n### Vertical Partitioning\n• Splits a table into smaller tables based on columns to improve query performance\n• Reduces I/O operations by only reading relevant columns from disk\n• Simplifies data access by storing data in tables with fewer columns\n• Can result in a more complex schema with more tables and relationships\n• Can negatively impact query performance if a query requires columns from multiple tables\n\n\n### Horizontal Partitioning\n• Splits a table into smaller tables based on rows to improve query performance and scalability\n• Simplifies data management by breaking down large tables into smaller, more manageable pieces\n• Increases query performance by reducing the amount of data that needs to be scanned\n• Can result in a more complex schema with more tables and relationships\n• Can negatively impact query performance if a query requires data from multiple partitions\n\n\n### Constraints in DBMS\n• Primary Key Constraint:Ensures that each record in a table is unique."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "example",
        "question": "What is example?",
        "answer": "Let’s try to understand this with an example, we may specify only a few level entity types and then we specify theirattributesand split them into lower-level entity types and relationships. The process of specialization to refine an entity type into a subclass is also an example of this strategy. For example, we may start with attributes and group these into entity types and relationships. The basic example is the process of generalizing entity types into the higher-level generalized superclass. For example, using numeric data types for numeric data can improve calculation performance, while using date/time data types can help with date/time calculations and sorting."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "types",
        "question": "What is types?",
        "answer": "Let’s try to understand this with an example, we may specify only a few level entity types and then we specify theirattributesand split them into lower-level entity types and relationships. For example, we may start with attributes and group these into entity types and relationships. We can also add a new relationship among entity types as the design goes ahead. The basic example is the process of generalizing entity types into the higher-level generalized superclass. We could specify a few clearly evident entity types in the schema and continue by adding other entity types and relationships that are related to each other."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "performance",
        "question": "What is performance?",
        "answer": "For example, using numeric data types for numeric data can improve calculation performance, while using date/time data types can help with date/time calculations and sorting. • Optimize for performance:Schema design can have a significant impact on database performance. Optimizing indexes, partitioning data, and using appropriate data types can all improve query performance and reduce database overhead. ### Features of Different Strategies for Schema Design\n\n### Normalization\n• Divides large tables into smaller, related tables to minimize data redundancy and ensure data consistency\n• Reduces the need for multiple updates to maintain consistency\n• Eliminatesdata anomalies, such as update, insertion, and deletion anomalies\n• Results in a more complex schema with more tables and relationships\n• May negatively impact query performance due to the increased number of joins required\n\n\n### Denormalization\n• Adds redundant data to improve query performance by reducing the number of joins required\n• Simplifies data access by storing all data in one place\n• Can result in data inconsistency if not properly managed\n• Increases storage requirements due to the duplicated data\n• Simplifies queries by reducing the number of joins required, which can result in faster query execution\n\n\n### Vertical Partitioning\n• Splits a table into smaller tables based on columns to improve query performance\n• Reduces I/O operations by only reading relevant columns from disk\n• Simplifies data access by storing data in tables with fewer columns\n• Can result in a more complex schema with more tables and relationships\n• Can negatively impact query performance if a query requires columns from multiple tables\n\n\n### Horizontal Partitioning\n• Splits a table into smaller tables based on rows to improve query performance and scalability\n• Simplifies data management by breaking down large tables into smaller, more manageable pieces\n• Increases query performance by reducing the amount of data that needs to be scanned\n• Can result in a more complex schema with more tables and relationships\n• Can negatively impact query performance if a query requires data from multiple partitions\n\n\n### Constraints in DBMS\n• Primary Key Constraint:Ensures that each record in a table is unique. By understanding your data and its relationships, normalizing to avoid redundancy, setting up keys and constraints to ensuredata integrity, and planning for performance and security, you can create a database that is efficient, reliable, and easy to maintain."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "design",
        "question": "What is design?",
        "answer": "• \n• \n• \n\nThere are various strategies that are considered while designing a schema. ### What is Schema Design? Schema design is the process of creating a logical and organized structure for a database, which involves defining tables, columns, relationships, constraints, and other elements that will govern how data is stored and accessed. Effective schema design is essential for creating a robust, scalable, and efficient database system. Here are some strategies for schema design in DBMS."
    },
    {
        "topic": "strategies-for-schema-design-in-dbms",
        "subtopic": "query",
        "question": "What is query?",
        "answer": "Optimizing indexes, partitioning data, and using appropriate data types can all improve query performance and reduce database overhead. ### Features of Different Strategies for Schema Design\n\n### Normalization\n• Divides large tables into smaller, related tables to minimize data redundancy and ensure data consistency\n• Reduces the need for multiple updates to maintain consistency\n• Eliminatesdata anomalies, such as update, insertion, and deletion anomalies\n• Results in a more complex schema with more tables and relationships\n• May negatively impact query performance due to the increased number of joins required\n\n\n### Denormalization\n• Adds redundant data to improve query performance by reducing the number of joins required\n• Simplifies data access by storing all data in one place\n• Can result in data inconsistency if not properly managed\n• Increases storage requirements due to the duplicated data\n• Simplifies queries by reducing the number of joins required, which can result in faster query execution\n\n\n### Vertical Partitioning\n• Splits a table into smaller tables based on columns to improve query performance\n• Reduces I/O operations by only reading relevant columns from disk\n• Simplifies data access by storing data in tables with fewer columns\n• Can result in a more complex schema with more tables and relationships\n• Can negatively impact query performance if a query requires columns from multiple tables\n\n\n### Horizontal Partitioning\n• Splits a table into smaller tables based on rows to improve query performance and scalability\n• Simplifies data management by breaking down large tables into smaller, more manageable pieces\n• Increases query performance by reducing the amount of data that needs to be scanned\n• Can result in a more complex schema with more tables and relationships\n• Can negatively impact query performance if a query requires data from multiple partitions\n\n\n### Constraints in DBMS\n• Primary Key Constraint:Ensures that each record in a table is unique."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "entity",
        "question": "What is entity?",
        "answer": "• \n• \n• \n\nStructural constraints, within the context of Entity-Relationship (ER) modeling, specify and determine how the entities take part in the relationships and this gives an outline of how the interactions between the entities can be designed in a database. Two primary types of constraints arecardinality(specifying the number of instances in a relationship) andparticipation(whether all or some entity instances are involved in the relationship). These represent the maximum number of entities that can be associated with each other through relationship, R.\n\n\n### Types of Cardinality in ER-Model\nThere can be 4 types of cardinality –\n\n• One-to-one (1:1) –When one entity in each entity set takes part at most once in the relationship, the cardinality is one-to-one. • One-to-many (1: N) –If entities in the first entity set take part in the relationship set at most once and entities in the second entity set take part many times (at least twice), the cardinality is said to be one-to-many. • Many-to-one (N:1) –If entities in the first entity set take part in the relationship set many times (at least twice), while entities in the second entity set take part at most once, the cardinality is said to be many-to-one."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "participation",
        "question": "What is participation?",
        "answer": "Two primary types of constraints arecardinality(specifying the number of instances in a relationship) andparticipation(whether all or some entity instances are involved in the relationship). Cardinality is defined as one-to-one, one-to-many, or many-to-many, while participation can be total or partial. To understand Structural Constraints, we must take a look at Cardinality Ratios and Participation Constraints.Cardinality Ratios of relationships :The entities are denoted by rectangle and relationships by diamond.There are numbers (represented by M and N) written above the lines which connect relationships and entities. ### Participation Constraints in ER-Model\nParticipation Constraintstell us that the participation in a relationship can either be total or partial. ### Total Participation\nWhen each entity in an entity set participates in a relation, it is calledTotal Participation."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "relationship",
        "question": "What is relationship?",
        "answer": "• \n• \n• \n\nStructural constraints, within the context of Entity-Relationship (ER) modeling, specify and determine how the entities take part in the relationships and this gives an outline of how the interactions between the entities can be designed in a database. Two primary types of constraints arecardinality(specifying the number of instances in a relationship) andparticipation(whether all or some entity instances are involved in the relationship). To understand Structural Constraints, we must take a look at Cardinality Ratios and Participation Constraints.Cardinality Ratios of relationships :The entities are denoted by rectangle and relationships by diamond.There are numbers (represented by M and N) written above the lines which connect relationships and entities. These represent the maximum number of entities that can be associated with each other through relationship, R.\n\n\n### Types of Cardinality in ER-Model\nThere can be 4 types of cardinality –\n\n• One-to-one (1:1) –When one entity in each entity set takes part at most once in the relationship, the cardinality is one-to-one. • One-to-many (1: N) –If entities in the first entity set take part in the relationship set at most once and entities in the second entity set take part many times (at least twice), the cardinality is said to be one-to-many."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "entities",
        "question": "What is entities?",
        "answer": "• \n• \n• \n\nStructural constraints, within the context of Entity-Relationship (ER) modeling, specify and determine how the entities take part in the relationships and this gives an outline of how the interactions between the entities can be designed in a database. This forms the constraints that need to be used in defining an accurate and efficient database schema since the introduction of the interaction rules of entities ensures that the correctness of the data model reflects in the real situation. To understand Structural Constraints, we must take a look at Cardinality Ratios and Participation Constraints.Cardinality Ratios of relationships :The entities are denoted by rectangle and relationships by diamond.There are numbers (represented by M and N) written above the lines which connect relationships and entities. These represent the maximum number of entities that can be associated with each other through relationship, R.\n\n\n### Types of Cardinality in ER-Model\nThere can be 4 types of cardinality –\n\n• One-to-one (1:1) –When one entity in each entity set takes part at most once in the relationship, the cardinality is one-to-one. • One-to-many (1: N) –If entities in the first entity set take part in the relationship set at most once and entities in the second entity set take part many times (at least twice), the cardinality is said to be one-to-many."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "constraints",
        "question": "What is constraints?",
        "answer": "• \n• \n• \n\nStructural constraints, within the context of Entity-Relationship (ER) modeling, specify and determine how the entities take part in the relationships and this gives an outline of how the interactions between the entities can be designed in a database. Two primary types of constraints arecardinality(specifying the number of instances in a relationship) andparticipation(whether all or some entity instances are involved in the relationship). This forms the constraints that need to be used in defining an accurate and efficient database schema since the introduction of the interaction rules of entities ensures that the correctness of the data model reflects in the real situation. The knowledge of these constraints is very essential for the design of strong and functional databases. To understand Structural Constraints, we must take a look at Cardinality Ratios and Participation Constraints.Cardinality Ratios of relationships :The entities are denoted by rectangle and relationships by diamond.There are numbers (represented by M and N) written above the lines which connect relationships and entities."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "cardinality",
        "question": "What is cardinality?",
        "answer": "Two primary types of constraints arecardinality(specifying the number of instances in a relationship) andparticipation(whether all or some entity instances are involved in the relationship). Cardinality is defined as one-to-one, one-to-many, or many-to-many, while participation can be total or partial. To understand Structural Constraints, we must take a look at Cardinality Ratios and Participation Constraints.Cardinality Ratios of relationships :The entities are denoted by rectangle and relationships by diamond.There are numbers (represented by M and N) written above the lines which connect relationships and entities. These are called cardinality ratios. These represent the maximum number of entities that can be associated with each other through relationship, R.\n\n\n### Types of Cardinality in ER-Model\nThere can be 4 types of cardinality –\n\n• One-to-one (1:1) –When one entity in each entity set takes part at most once in the relationship, the cardinality is one-to-one."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "set",
        "question": "What is set?",
        "answer": "These represent the maximum number of entities that can be associated with each other through relationship, R.\n\n\n### Types of Cardinality in ER-Model\nThere can be 4 types of cardinality –\n\n• One-to-one (1:1) –When one entity in each entity set takes part at most once in the relationship, the cardinality is one-to-one. • One-to-many (1: N) –If entities in the first entity set take part in the relationship set at most once and entities in the second entity set take part many times (at least twice), the cardinality is said to be one-to-many. • Many-to-one (N:1) –If entities in the first entity set take part in the relationship set many times (at least twice), while entities in the second entity set take part at most once, the cardinality is said to be many-to-one. • Many-to-many (N: N) –The cardinality is said to be many to many if entities in both the entity sets take part many times (at least twice) in the relationship set. ### Total Participation\nWhen each entity in an entity set participates in a relation, it is calledTotal Participation."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "structural",
        "question": "What is structural?",
        "answer": "• \n• \n• \n\nStructural constraints, within the context of Entity-Relationship (ER) modeling, specify and determine how the entities take part in the relationships and this gives an outline of how the interactions between the entities can be designed in a database. To understand Structural Constraints, we must take a look at Cardinality Ratios and Participation Constraints.Cardinality Ratios of relationships :The entities are denoted by rectangle and relationships by diamond.There are numbers (represented by M and N) written above the lines which connect relationships and entities. ### Structural Constraints\nStructural Constraints are also called Structural properties of adatabase management system (DBMS). Cardinality Ratios and Participation Constraints taken together are called Structural Constraints. The name constraints refer to the fact that such limitations must be imposed on the data, for the DBMS system to be consistent with the requirements.The Structural constraints are represented byMin-Max notation."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "total",
        "question": "What is total?",
        "answer": "Cardinality is defined as one-to-one, one-to-many, or many-to-many, while participation can be total or partial. ### Participation Constraints in ER-Model\nParticipation Constraintstell us that the participation in a relationship can either be total or partial. ### Total Participation\nWhen each entity in an entity set participates in a relation, it is calledTotal Participation. In ER modeling, total participation exists when the instances of the entity must necessarily participate in at least one relationship instance. For example, in a university system, where every student must be enrolled in at least one course, total participation exists in the relationship between “Student” and “Course”."
    },
    {
        "topic": "structural-constraints-of-relationships-in-er-model",
        "subtopic": "partial",
        "question": "What is partial?",
        "answer": "Cardinality is defined as one-to-one, one-to-many, or many-to-many, while participation can be total or partial. ### Participation Constraints in ER-Model\nParticipation Constraintstell us that the participation in a relationship can either be total or partial. ### Partial Participation\nWhen some of the entities in the given entity set do not participate in a relation, it is calledPartial Participation.Contrary to full participation, partial participation allows some components of a particular entity to be present without being part of any relation. For instance, in the university system, if some professors do not teach any courses, then their participation would be partial in the “Teaches” relationship. The minimum number of times an entity can appear in a relation is represented by m whereas, the maximum time it is available is denoted by n. If m is 0 it signifies that the entity is participating in the relation partially, whereas, if m is either greater than or equal to 1, it denotes total participation of the entity.Note –Number of times an entity participates in a relationship is same as the number appearance of the entity in the tuples."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nRedundancymeans having multiple copies of the same data in the database. This problem arises when a database is not normalized. This problem happens when the insertion of a data record is not possible without adding some additional unrelated data to the record. This anomaly happens when the deletion of a data record results in losing some unrelated information that was stored as part of the record that was deleted from a table. ### Updation Anomaly\nSuppose the rank of the college changes then changes will have to be all over the database which will be time-consuming and computationally costly."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "redundancy",
        "question": "What is redundancy?",
        "answer": "• \n• \n• \n\nRedundancymeans having multiple copies of the same data in the database. Problems caused due to redundancy are:\n\n• Insertion anomaly\n• Deletion anomaly\n• Updation anomaly\n\n\n### Insertion Anomaly\nIf a student detail has to be inserted whose course is not being decided yet then insertion will not be possible till the time course is decided for the student. Redundancy in a database occurs when the same data is stored in multiple places. Redundancy can cause various problems such as data inconsistencies, higher storage requirements, and slower data retrieval. ### Problems Caused Due to Redundancy\n• Data Inconsistency:Redundancy can lead to data inconsistencies, where the same data is stored in multiple locations, and changes to one copy of the data are not reflected in the other copies."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nRedundancymeans having multiple copies of the same data in the database. This problem arises when a database is not normalized. ### Updation Anomaly\nSuppose the rank of the college changes then changes will have to be all over the database which will be time-consuming and computationally costly. All places should be updated, If updation does not occur at all places then the database will be in an inconsistent state. Redundancy in a database occurs when the same data is stored in multiple places."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "multiple",
        "question": "What is multiple?",
        "answer": "• \n• \n• \n\nRedundancymeans having multiple copies of the same data in the database. Redundancy in a database occurs when the same data is stored in multiple places. ### Problems Caused Due to Redundancy\n• Data Inconsistency:Redundancy can lead to data inconsistencies, where the same data is stored in multiple locations, and changes to one copy of the data are not reflected in the other copies. If the same data is stored in multiple places, more storage space is required to store the data. • Performance Issues:Redundancy can also lead to performance issues, as the database must spend more time updating multiple copies of the same data."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "lead",
        "question": "What is lead?",
        "answer": "It can be observed that values of attribute college name, college rank, and course are being repeated which can lead to problems. ### Problems Caused Due to Redundancy\n• Data Inconsistency:Redundancy can lead to data inconsistencies, where the same data is stored in multiple locations, and changes to one copy of the data are not reflected in the other copies. This can result in incorrect data being used in decision-making processes and can lead to errors and inconsistencies in the data. This can lead to higher costs and slower data retrieval. • Update Anomalies:Redundancy can lead to update anomalies, where changes made to one copy of the data are not reflected in the other copies."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "copies",
        "question": "What is copies?",
        "answer": "• \n• \n• \n\nRedundancymeans having multiple copies of the same data in the database. ### Problems Caused Due to Redundancy\n• Data Inconsistency:Redundancy can lead to data inconsistencies, where the same data is stored in multiple locations, and changes to one copy of the data are not reflected in the other copies. • Update Anomalies:Redundancy can lead to update anomalies, where changes made to one copy of the data are not reflected in the other copies. • Performance Issues:Redundancy can also lead to performance issues, as the database must spend more time updating multiple copies of the same data. • Security Issues:Redundancy can also create security issues, as multiple copies of the same data can be accessed and manipulated by unauthorized users."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "storage",
        "question": "What is storage?",
        "answer": "Redundancy can cause various problems such as data inconsistencies, higher storage requirements, and slower data retrieval. • Storage Requirements:Redundancy increases the storage requirements of a database. If the same data is stored in multiple places, more storage space is required to store the data. • Data Duplication:Redundancy can lead to data duplication, where the same data is stored in multiple locations, resulting in wasted storage space and increased maintenance complexity. ### Disadvantages of Redundant Data\n• Increased storage requirements:Redundant data takes up additional storage space within the database, which can increase costs and slow down performance."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "issues",
        "question": "What is issues?",
        "answer": "• Performance Issues:Redundancy can also lead to performance issues, as the database must spend more time updating multiple copies of the same data. • Security Issues:Redundancy can also create security issues, as multiple copies of the same data can be accessed and manipulated by unauthorized users. This can make it more difficult to troubleshoot and resolve issues and can require more time and resources to maintain the database. • Usability Issues:Redundancy can also create usability issues, as users may have difficulty accessing the correct version of the data or may be confused by inconsistencies and errors. Answer:\n\nSome of the problems that are caused due to the redundancy in the database are:\n\n• Data Inconsistency\n• Storage Requirement\n• Update Anomalies\n• Security Issues\n• Maintenance Complexity\n\n\n### Q.3: How is data redundancy handled?"
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "errors",
        "question": "What is errors?",
        "answer": "This can result in incorrect data being used in decision-making processes and can lead to errors and inconsistencies in the data. This can result in incorrect data being used in decision-making processes and can lead to errors and inconsistencies in the data. This can also lead to confusion and errors, as different copies of the data may have different values or be out of sync. This can result in inconsistencies and errors and can make it difficult to ensure that the data is accurate and up-to-date. • Usability Issues:Redundancy can also create usability issues, as users may have difficulty accessing the correct version of the data or may be confused by inconsistencies and errors."
    },
    {
        "topic": "the-problem-of-redundancy-in-database",
        "subtopic": "anomaly",
        "question": "What is anomaly?",
        "answer": "Problems caused due to redundancy are:\n\n• Insertion anomaly\n• Deletion anomaly\n• Updation anomaly\n\n\n### Insertion Anomaly\nIf a student detail has to be inserted whose course is not being decided yet then insertion will not be possible till the time course is decided for the student. ### Deletion Anomaly\nIf the details of students in this table are deleted then the details of the college will also get deleted which should not occur by common sense. This anomaly happens when the deletion of a data record results in losing some unrelated information that was stored as part of the record that was deleted from a table. ### Updation Anomaly\nSuppose the rank of the college changes then changes will have to be all over the database which will be time-consuming and computationally costly."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "• \n• \n• \n\nKeys are one of the basic requirements of a relational database model. We also use keys to set up relations amongst various columns and tables of a relational database. ### Why do we require Keys in a DBMS? We require keys in a DBMS to ensure that data is organized, accurate, and easily accessible. Keys help to uniquely identify records in a table, which prevents duplication and ensures data integrity.Keys also establish relationships between different tables, allowing for efficient querying and management of data."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "It is widely used to identify the tuples(rows) uniquely in the table. We also use keys to set up relations amongst various columns and tables of a relational database. Keys help to uniquely identify records in a table, which prevents duplication and ensures data integrity.Keys also establish relationships between different tables, allowing for efficient querying and management of data. • A super key is a group of single or multiple keys that uniquely identifies rows in a table. Example:\n\nTable STUDENT\n\n\n```python\nConsider the table shown above.STUD_NO+PHONE is a super key."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "keys",
        "question": "What is keys?",
        "answer": "• \n• \n• \n\nKeys are one of the basic requirements of a relational database model. We also use keys to set up relations amongst various columns and tables of a relational database. ### Why do we require Keys in a DBMS? We require keys in a DBMS to ensure that data is organized, accurate, and easily accessible. Keys help to uniquely identify records in a table, which prevents duplication and ensures data integrity.Keys also establish relationships between different tables, allowing for efficient querying and management of data."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "primary",
        "question": "What is primary?",
        "answer": "```\nRelation between Primary Key, Candidate Key, and Super Key\n\nNow Try Questions discussed inNumber of possible Superkeysto test your understanding. • A table can have multiple candidate keys but only one primary key. ```\nTable STUDENT_COURSE\n\n\n### Primary Key\nThere can be more than one candidate key in relation out of which one can be chosen as the primary key. For Example, STUD_NO, as well as STUD_PHONE, are candidate keys for relation STUDENT but STUD_NO can be chosen as theprimary key(only one out of many candidate keys). • Aprimary keyis aunique key, meaning it can uniquely identify each record (tuple) in a table."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "candidate",
        "question": "What is candidate?",
        "answer": "```\nRelation between Primary Key, Candidate Key, and Super Key\n\nNow Try Questions discussed inNumber of possible Superkeysto test your understanding. ### Candidate Key\nThe minimal set of attributes that can uniquely identify a tuple is known as acandidate key. • A candidate key is a minimal super key, meaning it can uniquely identify a record but contains no extra attributes. • It is a super key with no repeated data is called a candidate key. • A candidate key must contain unique values, ensuring that no two rows have the same value in the candidate key’s columns."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "uniquely",
        "question": "What is uniquely?",
        "answer": "It is widely used to identify the tuples(rows) uniquely in the table. Keys help to uniquely identify records in a table, which prevents duplication and ensures data integrity.Keys also establish relationships between different tables, allowing for efficient querying and management of data. ### Different Types of Database Keys\n\n### Super Key\nThe set of one or more attributes (columns) that can uniquely identify a tuple (record) is known asSuper Key. • A super key is a group of single or multiple keys that uniquely identifies rows in a table. For example, if the “STUD_NO” column can uniquely identify a student, adding “SNAME” to it will still form a valid super key, though it’s unnecessary."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "stud_no",
        "question": "What is stud_no?",
        "answer": "For Example, STUD_NO, (STUD_NO, STUD_NAME), etc. For example, if the “STUD_NO” column can uniquely identify a student, adding “SNAME” to it will still form a valid super key, though it’s unnecessary. Example:\n\nTable STUDENT\n\n\n```python\nConsider the table shown above.STUD_NO+PHONE is a super key. For Example, STUD_NO in STUDENT relation. Example:\n\n\n```python\nSTUD_NO is the candidate key for relation STUDENT."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "student",
        "question": "What is student?",
        "answer": "For example, if the “STUD_NO” column can uniquely identify a student, adding “SNAME” to it will still form a valid super key, though it’s unnecessary. Example:\n\nTable STUDENT\n\n\n```python\nConsider the table shown above.STUD_NO+PHONE is a super key. For Example, STUD_NO in STUDENT relation. Example:\n\n\n```python\nSTUD_NO is the candidate key for relation STUDENT. ```\nTable STUDENT\n\n• The candidate key can be simple (having only one attribute) or composite as well."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "example",
        "question": "What is example?",
        "answer": "For Example, STUD_NO, (STUD_NO, STUD_NAME), etc. For example, if the “STUD_NO” column can uniquely identify a student, adding “SNAME” to it will still form a valid super key, though it’s unnecessary. Example:\n\nTable STUDENT\n\n\n```python\nConsider the table shown above.STUD_NO+PHONE is a super key. For Example, STUD_NO in STUDENT relation. Example:\n\n\n```python\nSTUD_NO is the candidate key for relation STUDENT."
    },
    {
        "topic": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign",
        "subtopic": "identify",
        "question": "What is identify?",
        "answer": "It is widely used to identify the tuples(rows) uniquely in the table. Keys help to uniquely identify records in a table, which prevents duplication and ensures data integrity.Keys also establish relationships between different tables, allowing for efficient querying and management of data. ### Different Types of Database Keys\n\n### Super Key\nThe set of one or more attributes (columns) that can uniquely identify a tuple (record) is known asSuper Key. For example, if the “STUD_NO” column can uniquely identify a student, adding “SNAME” to it will still form a valid super key, though it’s unnecessary. ### Candidate Key\nThe minimal set of attributes that can uniquely identify a tuple is known as acandidate key."
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "database",
        "question": "What is database?",
        "answer": "• \n• \n• \n\nDatabases and data are the fundamental building blocks of new technology. Data is the building blocks of information, like numbers, words, pictures, and more, that computers use and process.Databases, on the other hand, are like organized libraries, making sure this data isstored,retrieved, andmanagedeffectively. In this article, we’ll explore the differenttypes of databasesfrom the classicSQLto the trendyNoSQLand evenCloud databases. We will also explore the different databases for web development, backend development, mobile development, DevOps, data engineering, data science, artificial intelligence, cloud computing, and even blockchain/web 3.0. Types of Databases\n\nTable of Content\n\n• What are Data & Databases?"
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "data",
        "question": "What is data?",
        "answer": "• \n• \n• \n\nDatabases and data are the fundamental building blocks of new technology. Data is the building blocks of information, like numbers, words, pictures, and more, that computers use and process.Databases, on the other hand, are like organized libraries, making sure this data isstored,retrieved, andmanagedeffectively. In this article, we’ll explore the differenttypes of databasesfrom the classicSQLto the trendyNoSQLand evenCloud databases. We will also explore the different databases for web development, backend development, mobile development, DevOps, data engineering, data science, artificial intelligence, cloud computing, and even blockchain/web 3.0. Types of Databases\n\nTable of Content\n\n• What are Data & Databases?"
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "databases",
        "question": "What is databases?",
        "answer": "• \n• \n• \n\nDatabases and data are the fundamental building blocks of new technology. Data is the building blocks of information, like numbers, words, pictures, and more, that computers use and process.Databases, on the other hand, are like organized libraries, making sure this data isstored,retrieved, andmanagedeffectively. In this article, we’ll explore the differenttypes of databasesfrom the classicSQLto the trendyNoSQLand evenCloud databases. We will also explore the different databases for web development, backend development, mobile development, DevOps, data engineering, data science, artificial intelligence, cloud computing, and even blockchain/web 3.0. Types of Databases\n\nTable of Content\n\n• What are Data & Databases?"
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "In this article, we’ll explore the differenttypes of databasesfrom the classicSQLto the trendyNoSQLand evenCloud databases. Relational Databases (SQL databases)\nRelational databases(RDBMS) organize data into tables, where each table hasrows and columns. These databases usestructured query language(SQL) for defining and manipulating data. These are the following relational databases:\n\n• MySQL\n• PostgreSQL\n• Oracle (PL/SQL, programming language extension for Oracle Database)\n• SQL Server\n• SQLite\n• MariaDB\n• IBM Db2\n\n\n### 2. NoSQL Databases\nThese databases are designed to handle large volumes ofunstructured,semi-structured, orstructureddata.NoSQLprovide flexible schema designs and often offerhorizontal scalability."
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "design",
        "question": "What is design?",
        "answer": "• Types of Databases\n• Databases Cheat Sheet\n• Databases Interview Questions\n• Database Query Based Questions\n• Databases Comprehensive Learning Path\n• Database Design\n• Database Connectivity\n• Database Interview Experience\n• Databases Required for Different Technology\n• Types of Database Jobs\n• Tips & Tricks to Improve Database Knowledge\n\n\n### What are Data & Databases? ### Types of Databases\nThere are various types of databases, each designed for specific use cases and requirements. NoSQL Databases\nThese databases are designed to handle large volumes ofunstructured,semi-structured, orstructureddata.NoSQLprovide flexible schema designs and often offerhorizontal scalability. They are designed to efficiently handle tasks such asadding,modifying, andretrieving datainreal-timeto support business operations. • Database Query Questions\n• SQL Exercises\n• MySQL Exercises\n• PostgreSQL Exercises\n• PL/SQL Exercises\n• MongoDB Exercises\n\n\n### Databases Comprehensive Learning Path\nWhether you’re just starting your journey into the world ofdatabasesor aiming to enhance your expertise, thiscurated learning pathisdesignedto guide us from thefundamentalstoadvancedconcepts in a structured and accurate manner."
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "years",
        "question": "What is years?",
        "answer": "Job Role\n\nExperience\n\nSallary\n\nDatabase Administrator (DBA)\n\nEntry-level require 1-3 years of experience, while senior roles require 5+ years. 4 to 15 LPA\n\nDatabase Developer\n\nEntry-level roles 1-3 years of experience, while senior developers need 5+ years. 4 to 12 LPA\n\nData Analyst\n\nEntry-level positions require 1-3 years of experience, while senior data analysts need 5+ years. 3 to 8 LPA\n\nData Engineer\n\nEntry-level roles require 1-3 years of experience, while senior data engineers need 5+ years\n\n4 to 15 LPA\n\nDatabase Architect\n\nEntry-level positions require 3-5 years of experience, while senior architects need 8+ years. 7 to 24 LPA\n\nDatabase Manager\n\nMid-level management require 5-8 years of experience, while senior management roles need 10+ years."
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "applications",
        "question": "What is applications?",
        "answer": "It acts as a centralized and organized repository where data can be stored, managed, and accessed by various applications or users. It provides an interface between the database and the users or applications, allowing them to access and manage data efficiently. • Concurrency Control:Managing simultaneous access to the database by multiple users or applications to prevent conflicts and ensure data consistency. • How to Design Database for Logistics and Transportation\n• How to Design Database for Social Media Platform\n• How to Design Database for Flight Reservation System\n• How to Design ER Diagrams for E-commerce Website\n\n\n### Database Connectivity\nDatabase Connectivity refers to the capability of software applications to interact with and access data stored in databases. Database Connectivity is crucial for various types of applications, including web applications, mobile apps, desktop applications, and APIs."
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "experience",
        "question": "What is experience?",
        "answer": "• Types of Databases\n• Databases Cheat Sheet\n• Databases Interview Questions\n• Database Query Based Questions\n• Databases Comprehensive Learning Path\n• Database Design\n• Database Connectivity\n• Database Interview Experience\n• Databases Required for Different Technology\n• Types of Database Jobs\n• Tips & Tricks to Improve Database Knowledge\n\n\n### What are Data & Databases? There are several mechanisms for establishing connectivity between applications and databases\n\n• ORM (Object-Relational Mapping)\n• ODM (Object-Document Mapping)\n• ODBC (Open Database Connectivity)\n\n\n### Database Interview Experience\nIn database interview experience series, we share some of theinterview experienceof individuals who’ve faced the challenges of database interviews. Whether you’re crafting a fitness tracker or a social networking app, a solid understanding of databases is fundamental for delivering efficient and seamless user experiences. ### Types of Database Jobs\nThe field of databases offers adiverse range of job roles, each requiring different levels ofexperienceandexpertise. Let’s explore into different types of job roles, considering the required experience levels."
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "management",
        "question": "What is management?",
        "answer": "ADatabase Management System(DBMS) is asoftwaresystem that enables users todefine,create,maintain, andmanipulatedatabases. • IMS (Information Management System)\n\n\n### 9. • IDMS (Integrated Database Management System)\n\n\n### 10. In this architecture, all data processing and management tasks are performed on the central server, and clients access the database remotely. These questions typically involveretrieving,manipulating, and analyzing data stored within a database using SQL (Structured Query Language) or other query languages specific to the database management system being used."
    },
    {
        "topic": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm",
        "subtopic": "interview",
        "question": "What is interview?",
        "answer": "• Types of Databases\n• Databases Cheat Sheet\n• Databases Interview Questions\n• Database Query Based Questions\n• Databases Comprehensive Learning Path\n• Database Design\n• Database Connectivity\n• Database Interview Experience\n• Databases Required for Different Technology\n• Types of Database Jobs\n• Tips & Tricks to Improve Database Knowledge\n\n\n### What are Data & Databases? • SQL Cheat Sheet\n• SQL Command Cheat Sheet\n• MySQL Cheat Sheet\n• PL/SQL Cheat Sheet\n• PostgreSQL Cheat Sheet\n\n\n### Databases Interview Questions\nWhether you’re preparing for ajob interviewor aiming to brush up on your database fundamentals, theseinterview questionwill help through some common and advanced database interview. • SQL Interview Questions\n• SQL Query Interview Questions\n• MySQL Interview Questions\n• PL/SQL Interview Questions\n\n\n### Database Query Based Questions\nQuery-based database questions are an essential component ofpracticingandmastering database skills. There are several mechanisms for establishing connectivity between applications and databases\n\n• ORM (Object-Relational Mapping)\n• ODM (Object-Document Mapping)\n• ODBC (Open Database Connectivity)\n\n\n### Database Interview Experience\nIn database interview experience series, we share some of theinterview experienceof individuals who’ve faced the challenges of database interviews. FromSQLtoNoSQL, each article offers insights and tips to help you ace your next interview."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "select",
        "question": "What is select?",
        "answer": "```python\nSELECT name, section FROM tblGROUP BY name, sectionHAVING COUNT(*) > 1\n```\n\n### Q2. ```python\nSELECT max(salary) FROM EMPLOYEES WHERE salary IN(SELECT salary FROM EMPLOYEEs MINUS SELECT max(salary)FROM EMPLOYEES);\n```\nOR\n\n\n```python\nSELECT max(salary) FROM EMPLOYEES WHEREsalary <> (SELECT max(salary) FROM EMPLOYEES);\n```\n\n### Q3. ```python\nSELECT E.IDFROM  Employee EWHERE  EXISTS  (SELECT E2.salaryFROM Employee E2WHERE E2.DeptName = 'CS'AND   E.salary > E2.salary)\n```\nFollowing 5 rows will be the result of the query as 3000 is the minimum salary of CS Employees and all these rows are greater than 30000. Write a trigger to update Emp table such that, If an updation is done in Dep table then salary of all employees of that department should be incremented by some amount (updation)\nAssuming Table name are Dept and Emp, trigger can be written as follows:\n\n\n```python\nCREATE OR REPLACE TRIGGER update_trigAFTER UPDATE ON DeptFOR EACH ROWDECLARECURSOR emp_cur IS SELECT * FROM Emp;BEGINFOR i IN emp_cur LOOPIF i.dept_no = :NEW.dept_no THENDBMS_OUTPUT.PUT_LINE(i.emp_no);  --  for printing thoseUPDATE Emp                      -- emp number which areSET sal = i.sal + 100           -- updatedWHERE emp_no = i.emp_no;END IF;END LOOP;END;\n```\n\n### Q5. ```python\nSELECT student, marksFROM tableWHERE marks > SELECT AVG(marks) from table;\n```\n\n### Q6."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "salary",
        "question": "What is salary?",
        "answer": "Query to find 2nd highest salary of an employee? ```python\nSELECT max(salary) FROM EMPLOYEES WHERE salary IN(SELECT salary FROM EMPLOYEEs MINUS SELECT max(salary)FROM EMPLOYEES);\n```\nOR\n\n\n```python\nSELECT max(salary) FROM EMPLOYEES WHEREsalary <> (SELECT max(salary) FROM EMPLOYEES);\n```\n\n### Q3. ```python\nSELECT E.IDFROM  Employee EWHERE  EXISTS  (SELECT E2.salaryFROM Employee E2WHERE E2.DeptName = 'CS'AND   E.salary > E2.salary)\n```\nFollowing 5 rows will be the result of the query as 3000 is the minimum salary of CS Employees and all these rows are greater than 30000. Write a trigger to update Emp table such that, If an updation is done in Dep table then salary of all employees of that department should be incremented by some amount (updation)\nAssuming Table name are Dept and Emp, trigger can be written as follows:\n\n\n```python\nCREATE OR REPLACE TRIGGER update_trigAFTER UPDATE ON DeptFOR EACH ROWDECLARECURSOR emp_cur IS SELECT * FROM Emp;BEGINFOR i IN emp_cur LOOPIF i.dept_no = :NEW.dept_no THENDBMS_OUTPUT.PUT_LINE(i.emp_no);  --  for printing thoseUPDATE Emp                      -- emp number which areSET sal = i.sal + 100           -- updatedWHERE emp_no = i.emp_no;END IF;END LOOP;END;\n```\n\n### Q5. Name the Employee who has the third-highest salary using sub queries."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "key",
        "question": "What is key?",
        "answer": "Difference between primary key and unique key and why one should use a unique key if it allows only one null ? Primary key:\n\n• Only one in a row(tuple). • Never allows null value(only key field). • Unique key identifier can not be null and must be unique. Unique Key:\n\n• Can be more than one unique key in one row."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "sql",
        "question": "What is sql?",
        "answer": "The difference between the having and where clause in SQL is that the where clause canNOT be used with aggregates, but the having clause can. Note:It is not a predefined rule but by and large you’ll see that in a good number of the SQL queries, we use WHERE prior to GROUP BY and HAVING after GROUP BY. What is embedded and dynamic SQL? Static or Embedded SQL:\n\n• SQL statements in an application that do not change at runtime and, therefore, can be hard-coded into the application. Dynamic SQL:\n\n• SQL statements that are constructed at runtime; for example, the application may allow users to enter their own queries."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "python",
        "question": "What is python?",
        "answer": "```python\nSELECT name, section FROM tblGROUP BY name, sectionHAVING COUNT(*) > 1\n```\n\n### Q2. ```python\nSELECT max(salary) FROM EMPLOYEES WHERE salary IN(SELECT salary FROM EMPLOYEEs MINUS SELECT max(salary)FROM EMPLOYEES);\n```\nOR\n\n\n```python\nSELECT max(salary) FROM EMPLOYEES WHEREsalary <> (SELECT max(salary) FROM EMPLOYEES);\n```\n\n### Q3. ```python\nSELECT E.IDFROM  Employee EWHERE  EXISTS  (SELECT E2.salaryFROM Employee E2WHERE E2.DeptName = 'CS'AND   E.salary > E2.salary)\n```\nFollowing 5 rows will be the result of the query as 3000 is the minimum salary of CS Employees and all these rows are greater than 30000. Write a trigger to update Emp table such that, If an updation is done in Dep table then salary of all employees of that department should be incremented by some amount (updation)\nAssuming Table name are Dept and Emp, trigger can be written as follows:\n\n\n```python\nCREATE OR REPLACE TRIGGER update_trigAFTER UPDATE ON DeptFOR EACH ROWDECLARECURSOR emp_cur IS SELECT * FROM Emp;BEGINFOR i IN emp_cur LOOPIF i.dept_no = :NEW.dept_no THENDBMS_OUTPUT.PUT_LINE(i.emp_no);  --  for printing thoseUPDATE Emp                      -- emp number which areSET sal = i.sal + 100           -- updatedWHERE emp_no = i.emp_no;END IF;END LOOP;END;\n```\n\n### Q5. ```python\nSELECT student, marksFROM tableWHERE marks > SELECT AVG(marks) from table;\n```\n\n### Q6."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "query",
        "question": "What is query?",
        "answer": "Write a Query to find the Repeated row\nIn the above table, we can find duplicate rows using the below query. Query to find 2nd highest salary of an employee? How many rows are there in the result of the following query? How many rows are there in the result of the following query? ```python\nSELECT E.IDFROM  Employee EWHERE  EXISTS  (SELECT E2.salaryFROM Employee E2WHERE E2.DeptName = 'CS'AND   E.salary > E2.salary)\n```\nFollowing 5 rows will be the result of the query as 3000 is the minimum salary of CS Employees and all these rows are greater than 30000."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "table",
        "question": "What is table?",
        "answer": "There is a table where only one row is fully repeated. Write a Query to find the Repeated row\nIn the above table, we can find duplicate rows using the below query. Consider the following Employee table. Write a trigger to update Emp table such that, If an updation is done in Dep table then salary of all employees of that department should be incremented by some amount (updation)\nAssuming Table name are Dept and Emp, trigger can be written as follows:\n\n\n```python\nCREATE OR REPLACE TRIGGER update_trigAFTER UPDATE ON DeptFOR EACH ROWDECLARECURSOR emp_cur IS SELECT * FROM Emp;BEGINFOR i IN emp_cur LOOPIF i.dept_no = :NEW.dept_no THENDBMS_OUTPUT.PUT_LINE(i.emp_no);  --  for printing thoseUPDATE Emp                      -- emp number which areSET sal = i.sal + 100           -- updatedWHERE emp_no = i.emp_no;END IF;END LOOP;END;\n```\n\n### Q5. There is a table which contains two columns Student and Marks, you need to find all the students, whose marks are greater than average marks i.e."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "unique",
        "question": "What is unique?",
        "answer": "Difference between primary key and unique key and why one should use a unique key if it allows only one null ? • Unique key identifier can not be null and must be unique. Unique Key:\n\n• Can be more than one unique key in one row. • Unique key can have null values(only single null is allowed). • Unique key can be null and may not be unique."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "marks",
        "question": "What is marks?",
        "answer": "There is a table which contains two columns Student and Marks, you need to find all the students, whose marks are greater than average marks i.e. ```python\nSELECT student, marksFROM tableWHERE marks > SELECT AVG(marks) from table;\n```\n\n### Q6. Let us consider below table ‘Marks’. ```python\nSELECT Student, sum(Score) AS totalFROM Marks\n```\nThis would select data row by row basis. For example, the output of the below query\n\n\n```python\nSELECT Student, sum(score) AS total FROM Marks\n```\nWhen we apply to have in above query, we get\n\n\n```python\nSELECT Student, sum(score) AS totalFROM Marks having total > 70\n```\n\n### Q8."
    },
    {
        "topic": "commonly-asked-dbms-interview-questions-set-2",
        "subtopic": "dynamic",
        "question": "What is dynamic?",
        "answer": "What’s the difference between materialized and dynamic view? Dynamic views:\n\n• Virtual only and run the query definition each time they are accessed. • A dynamic view may be created every time that a specific view is requested by the user. What is embedded and dynamic SQL? Dynamic SQL:\n\n• SQL statements that are constructed at runtime; for example, the application may allow users to enter their own queries."
    }
]